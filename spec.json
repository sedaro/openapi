{
 "openapi": "3.0.2",
 "info": {
  "title": "Sedaro API",
  "description": "\nAllows for consumption of Sedaro services.\nRead more about Sedaro at [docs.sedaro.com](https://docs.sedaro.com).\n\n### Clients\n\n**Python:** [sedaro](https://pypi.org/project/sedaro/)\n- This package provides additional functionality on top of the auto-generated OpenAPI client. See the package docs for more information.\n\n### API Key\n\nTo access the Sedaro service via this API, you will need an API key.  You can generate an API key for your account in the\nSedaro [Management Console](https://satellite.sedaro.com/#/account). Once complete, pass the API key in all requests\nvia the `X_API_KEY` HTTP header.\n\n*API keys grant full access to your account and should never be shared. If you think your API key has been compromised,\nyou can revoke it in the [Management Console](https://satellite.sedaro.com/#/account).*\n\n### Jupyter Notebooks\n\nFor additional examples of how to use this API for modeling and simulation, see our [Mod-Sim Notebooks](https://github.com/sedaro/modsim-notebooks).\n\n### Community, Support, Discussion\n\nIf you have any issues or suggestions, please reach out:\n\n1. Join the Sedaro Community [Slack](https://join.slack.com/t/sedaro-community/shared_invite/zt-1jps4i711-mXy88AZQ9AV7YcEXr8x7Ow)\n2. Email us at support@sedarotech.com\n\n### Known Issues\n\n- Error responses are more specific than what is shown throughout the documentation.  A 4xx or 5xx error will be returned\nin all error cases.  Only a `200` status indicates success.  See a given error response for additional details.\n",
  "version": "4.4.0",
  "x-logo": {
   "url": "https://api.sedaro.com/static/multimedia/logo_secondary_06142023.png",
   "backgroundColor": "#FAFAFA",
   "altText": "Sedaro API Docs"
  }
 },
 "paths": {
  "/models/branches/{branchId}/template": {
   "patch": {
    "tags": [
     "Templates"
    ],
    "summary": "Update a Template Model",
    "description": "`Metamodel` `root` properties can be updated and multiple `Block`s can be created, updated, and/or deleted in the same\nrequest as follows:\n\n- Properties on the template root are updated via the `root` key.\n- `Block`s are **created** via dictionaries in the `Block`s list, making sure to include all required fields, the `type`\n(name of the class), and **exclude** an `id` property.\n- `Block`s are **updated** via dictionaries in the `Block`s list, making sure to **include** an `id` property, the `type`\n(name of the class) and any fields to be updated.\n- `Block`s are deleted via strings in the `delete` key corresponding to `id`s of `Block`s to be deleted.\n\n```jsonc\n{\n    // UPDATE root properties\n    \"root\": {\n        \"property\": \"value\"\n    },\n    \"blocks\": [\n        // CREATE block\n        {\n            \"property\": \"value\",\n            \"type\": \"ClassName\",\n        },\n        // UPDATE block\n        {\n            \"id\": \"NWDjzoSSKT7yGJpZdSN9-\",\n            \"property\": \"value\",\n            \"type\": \"ClassName\",\n        },\n    ],\n    // DELETE blocks\n    \"delete\": [\"NWDk7l3UPDZ0AlJW2Ut0V\", \"NWDkZ7oToTp-W9IiutbnF\"]\n}\n```",
    "operationId": "crud_template",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Branchid",
       "type": "string"
      },
      "name": "branchId",
      "in": "path"
     }
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "title": "Data",
        "anyOf": [
         {
          "$ref": "#/components/schemas/VehicleTemplateUpdateInterface"
         },
         {
          "$ref": "#/components/schemas/ScenarioTemplateUpdateInterface"
         }
        ]
       }
      }
     },
     "required": true
    },
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/TemplateCrudRes"
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  },
  "/simulations/branches/{branchId}/control/": {
   "get": {
    "tags": [
     "Jobs"
    ],
    "summary": "Get all simulations",
    "description": "`branchId` is the ID of the Scenario Branch for which to get all the Simulation Jobs. If the `latest` query param is included, only the most recent Simulation Job is included in the list.",
    "operationId": "get_simulations",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Branchid",
       "type": "string"
      },
      "name": "branchId",
      "in": "path"
     },
     {
      "required": false,
      "schema": {
       "title": "Latest",
       "enum": [
        ""
       ],
       "type": "string"
      },
      "name": "latest",
      "in": "query"
     }
    ],
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "title": "Response Get Simulations",
         "anyOf": [
          {
           "type": "array",
           "items": {
            "$ref": "#/components/schemas/SimulationJob"
           }
          },
          {
           "$ref": "#/components/schemas/SimulationJob"
          }
         ]
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   },
   "post": {
    "tags": [
     "Jobs"
    ],
    "summary": "Start a simulation",
    "description": "`branchId` is the ID of the Scenario Branch to simulate.",
    "operationId": "start_simulation",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Branchid",
       "type": "string"
      },
      "name": "branchId",
      "in": "path"
     }
    ],
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/SimulationJob"
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  },
  "/simulations/branches/{branchId}/control/{jobId}": {
   "get": {
    "tags": [
     "Jobs"
    ],
    "summary": "Get a simulation",
    "description": "`branchId` is the ID of the Scenario Branch simulated by the Simulation Job with ID `jobId`.",
    "operationId": "get_simulation",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Branchid",
       "type": "string"
      },
      "name": "branchId",
      "in": "path"
     },
     {
      "required": true,
      "schema": {
       "title": "Jobid",
       "type": "string"
      },
      "name": "jobId",
      "in": "path"
     }
    ],
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/SimulationJob"
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   },
   "delete": {
    "tags": [
     "Jobs"
    ],
    "summary": "Terminate a simulation",
    "description": "`branchId` is the ID of the Scenario Branch simulated by the Simulation Job with ID `jobId`.",
    "operationId": "terminate_simulation",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Branchid",
       "type": "string"
      },
      "name": "branchId",
      "in": "path"
     },
     {
      "required": true,
      "schema": {
       "title": "Jobid",
       "type": "string"
      },
      "name": "jobId",
      "in": "path"
     }
    ],
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/MessageRes"
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  },
  "/simulations/jobs/{jobId}/externals/{agentId}/{externalStateBlockId}": {
   "get": {
    "tags": [
     "Externals"
    ],
    "summary": "Read `ExternalState` for a simulation",
    "description": "This endpoint is used to read/consume state from a running simulation.\n- `jobId`: The ID of the running simulation for which to communicate\n- `agentId`: The ID of the `Agent` in the simulation for which the produced state pertains\n- `externalStateBlockId`: The ID of the relevant `ExternalState` Block of the `Agent` with ID `agentId` which defines the `consumed` state variables.\n- `time` (optional): The simulation `time` at which to read the `consumed` state. During `SpontaneousExternalState`\ntransactions, if `time` is omitted, the relevant Engine's `time` will be used.  `time` should be omitted for `PerRoundExternalState` transactions.",
    "operationId": "get_external",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Jobid",
       "type": "string"
      },
      "name": "jobId",
      "in": "path"
     },
     {
      "required": true,
      "schema": {
       "title": "Agentid",
       "type": "string"
      },
      "name": "agentId",
      "in": "path"
     },
     {
      "required": true,
      "schema": {
       "title": "Externalstateblockid",
       "type": "string"
      },
      "name": "externalStateBlockId",
      "in": "path"
     },
     {
      "required": false,
      "schema": {
       "title": "Time",
       "type": "number"
      },
      "name": "time",
      "in": "query"
     }
    ],
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "title": "Response Get External",
         "type": "array",
         "items": {}
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   },
   "patch": {
    "tags": [
     "Externals"
    ],
    "summary": "Set `ExternalState` for a simulation",
    "description": "This endpoint is used to publish/produce state to a running simulation.\n- `jobId`: The ID of the running simulation for which to communicate\n- `agentId`: The ID of the `Agent` in the simulation for which the produced state pertains\n- `externalStateBlockId`: The ID of the relevant `ExternalState` Block of the `Agent` with ID `agentId` which defines the `produced` state variables.\n\nSee details on the request body below.",
    "operationId": "put_external",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Jobid",
       "type": "string"
      },
      "name": "jobId",
      "in": "path"
     },
     {
      "required": true,
      "schema": {
       "title": "Agentid",
       "type": "string"
      },
      "name": "agentId",
      "in": "path"
     },
     {
      "required": true,
      "schema": {
       "title": "Externalstateblockid",
       "type": "string"
      },
      "name": "externalStateBlockId",
      "in": "path"
     }
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/ExternalStateSetRequest"
       }
      }
     },
     "required": true
    },
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "title": "Response Put External",
         "type": "array",
         "items": {}
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  },
  "/data/{id}": {
   "get": {
    "tags": [
     "Data"
    ],
    "summary": "Query Data",
    "description": "Queries Data Service data set with ID `id`.",
    "operationId": "get_data",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Id",
       "type": "string"
      },
      "name": "id",
      "in": "path"
     },
     {
      "required": false,
      "schema": {
       "title": "Start",
       "type": "number"
      },
      "name": "start",
      "in": "query"
     },
     {
      "required": false,
      "schema": {
       "title": "Stop",
       "type": "number"
      },
      "name": "stop",
      "in": "query"
     },
     {
      "required": false,
      "schema": {
       "title": "Binwidth",
       "type": "number"
      },
      "name": "binWidth",
      "in": "query"
     },
     {
      "required": false,
      "schema": {
       "title": "Streams",
       "type": "string"
      },
      "name": "streams",
      "in": "query"
     }
    ],
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DataServiceResponse"
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  },
  "/models/repositories/": {
   "post": {
    "tags": [
     "Repositories"
    ],
    "summary": "Create new repository",
    "description": "Creates a new repository based on the body params. The new repository will begin with a default branch.",
    "operationId": "create_repo",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/RepoCreateReq"
       }
      }
     },
     "required": true
    },
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/RepoRes"
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  },
  "/models/repositories/{repositoryId}": {
   "get": {
    "tags": [
     "Repositories"
    ],
    "summary": "Get repository",
    "description": "Gets a repository with `id` of given `repoId`.",
    "operationId": "get_repo",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Repositoryid",
       "type": "string"
      },
      "name": "repositoryId",
      "in": "path"
     }
    ],
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/RepoRes"
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   },
   "delete": {
    "tags": [
     "Repositories"
    ],
    "summary": "Delete repository",
    "description": "Deletes a repository with `id` of given `repoId` and all associated branches.",
    "operationId": "delete_repo",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Repositoryid",
       "type": "string"
      },
      "name": "repositoryId",
      "in": "path"
     }
    ],
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/EntityDeleteRes"
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   },
   "patch": {
    "tags": [
     "Repositories"
    ],
    "summary": "Update repository",
    "description": "Updates a repository with `id` of given `repoId` based on the body params.",
    "operationId": "update_repo",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Repositoryid",
       "type": "string"
      },
      "name": "repositoryId",
      "in": "path"
     }
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/RepoUpdateReq"
       }
      }
     },
     "required": true
    },
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/RepoRes"
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  },
  "/models/repositories//import": {
   "post": {
    "tags": [
     "Repositories"
    ],
    "summary": "Import branch as new repository",
    "description": "Imports the branch(es) from the uploaded zip file into the workspace associated with workspace `id` from the\n        body. All branches will be in their own repo and given new `id`s. For info on exporting, see the branches [export\n        route](#operation/export_branch).",
    "operationId": "import_branch_as_new_repo",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/RepoImportReq"
       }
      }
     },
     "required": true
    },
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/MessageRes"
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  },
  "/models/branches/{branchId}": {
   "get": {
    "tags": [
     "Branches"
    ],
    "summary": "Get a branch",
    "description": "Retrieves the branch with the provided `id`.",
    "operationId": "get_branch",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Branchid",
       "type": "string"
      },
      "name": "branchId",
      "in": "path"
     }
    ],
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "title": "Response Get Branch",
         "anyOf": [
          {
           "$ref": "#/components/schemas/BranchVehicleRes"
          },
          {
           "$ref": "#/components/schemas/BranchScenarioRes"
          }
         ]
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   },
   "post": {
    "tags": [
     "Branches"
    ],
    "summary": "Branch off existing branch",
    "description": "Creates a new branch based on and in the same repository as the branch associated with the provided `id`.",
    "operationId": "create_branch",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Branchid",
       "type": "string"
      },
      "name": "branchId",
      "in": "path"
     }
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/BranchCreate"
       }
      }
     },
     "required": true
    },
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "title": "Response Create Branch",
         "anyOf": [
          {
           "$ref": "#/components/schemas/BranchVehicleRes"
          },
          {
           "$ref": "#/components/schemas/BranchScenarioRes"
          }
         ]
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   },
   "delete": {
    "tags": [
     "Branches"
    ],
    "summary": "Delete a branch",
    "description": "Deletes the branch with the provided `id`.",
    "operationId": "delete_branch",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Branchid",
       "type": "string"
      },
      "name": "branchId",
      "in": "path"
     }
    ],
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/EntityDeleteRes"
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   },
   "patch": {
    "tags": [
     "Branches"
    ],
    "summary": "Update a branch",
    "description": "Updates updateable fields on the branch with the provided `id`. Note:\n- `shareable` indicates whether shareable links are valid for this branch.\n- `password` indicates whether the shareable link requires a password.",
    "operationId": "update_branch",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Branchid",
       "type": "string"
      },
      "name": "branchId",
      "in": "path"
     }
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/BranchUpdate"
       }
      }
     },
     "required": true
    },
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "title": "Response Update Branch",
         "anyOf": [
          {
           "$ref": "#/components/schemas/BranchVehicleRes"
          },
          {
           "$ref": "#/components/schemas/BranchScenarioRes"
          }
         ]
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  },
  "/models/branches/{branchId}/share-auth/": {
   "post": {
    "tags": [
     "Branches"
    ],
    "summary": "Verify branch password",
    "description": "Route to verify password when a user tries to access a branch with the provided `id` via a password protected shareable link.\nIf successful, returns a success message with a set-cookie. The cookie stores a `jwt` that allows for non-owner collaborators to send `GET` requests to the corresponding branch.",
    "operationId": "verify_branch_password",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Branchid",
       "type": "string"
      },
      "name": "branchId",
      "in": "path"
     }
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/BranchVerifyPassword"
       }
      }
     },
     "required": true
    },
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/MessageRes"
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  },
  "/models/branches/{branchId}/commits/": {
   "post": {
    "tags": [
     "Branches"
    ],
    "summary": "Commit changes to a branch",
    "description": "Takes all changes to the blocks on the branch with the provided `id` and commits them to the corresponding version-controlled branch.",
    "operationId": "commit_to_branch",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Branchid",
       "type": "string"
      },
      "name": "branchId",
      "in": "path"
     },
     {
      "required": true,
      "schema": {
       "title": "Commitmessage",
       "type": "string"
      },
      "name": "commitMessage",
      "in": "query"
     }
    ],
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/MessageRes"
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  },
  "/models/branches/{currentBranchId}/merge/{incomingBranchId}": {
   "post": {
    "tags": [
     "Branches"
    ],
    "summary": "Merge branch into another branch",
    "description": "Merges branch with `incomingBranchId` into branch with `currentBranchId`. This route has two functions:\n- To initiate the merge, send the request with no body. If there are no conflicts, it will successfully complete the merge and send back the resulting branch.\n- If there are conflicts, the response body will have a key of `conflicts` with a list of conflict objects outlining the \"current\" and \"incoming\" changes. Review the list, and send a second request to the same route including a list of resulutions (see optional `resultions` param in the request body schema below) indicating where you would like to keep the \"current\" or \"incoming\" changes. The indices in the `resultions` list should correspond with the indices of the `conflicts` list.",
    "operationId": "merge_branches",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Currentbranchid",
       "type": "string"
      },
      "name": "currentBranchId",
      "in": "path"
     },
     {
      "required": true,
      "schema": {
       "title": "Incomingbranchid",
       "type": "string"
      },
      "name": "incomingBranchId",
      "in": "path"
     }
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/BranchMerge"
       }
      }
     },
     "required": true
    },
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "title": "Response Merge Branches",
         "anyOf": [
          {
           "$ref": "#/components/schemas/BranchVehicleRes"
          },
          {
           "$ref": "#/components/schemas/BranchScenarioRes"
          },
          {
           "$ref": "#/components/schemas/BranchMergeConflictsRes"
          }
         ]
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  },
  "/models/branches/{branchId}/committed/": {
   "get": {
    "tags": [
     "Branches"
    ],
    "summary": "Get saved branch data",
    "description": "Retrieves all **committed** branch `data` (object with all the blocks) from the branch with the given `id`.",
    "operationId": "get_committed_branch_data",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Branchid",
       "type": "string"
      },
      "name": "branchId",
      "in": "path"
     }
    ],
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "title": "Response Get Committed Branch Data",
         "anyOf": [
          {
           "$ref": "#/components/schemas/VehicleTemplate"
          },
          {
           "$ref": "#/components/schemas/ScenarioTemplate"
          }
         ]
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  },
  "/models/branches/{branchId}/saved/": {
   "get": {
    "tags": [
     "Branches"
    ],
    "summary": "Get committed branch data",
    "description": "Retrieves all **saved** branch `data` (object with all the blocks) from the branch with the given `id`.",
    "operationId": "get_saved_branch_data",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Branchid",
       "type": "string"
      },
      "name": "branchId",
      "in": "path"
     }
    ],
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "title": "Response Get Saved Branch Data",
         "anyOf": [
          {
           "$ref": "#/components/schemas/VehicleTemplate"
          },
          {
           "$ref": "#/components/schemas/ScenarioTemplate"
          }
         ]
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  },
  "/models/branches/{branchId}/changes/": {
   "get": {
    "tags": [
     "Branches"
    ],
    "summary": "Get branch changes",
    "description": "Retrieves the state of the saved branch `data` and committed branch `data` with the given `id` and returns them for comparison.",
    "operationId": "get_branch_changes",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Branchid",
       "type": "string"
      },
      "name": "branchId",
      "in": "path"
     }
    ],
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/BranchChangesRes"
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  },
  "/models/branches/{branchId}/export/": {
   "get": {
    "tags": [
     "Branches"
    ],
    "summary": "Export branch",
    "description": "Exports the branch with `id` of given `branchId`. If the branch is a Scenario, also exports all branches\n        referenced in the Scenario's agents. The returned `FileResponse` contains exported branch(es) as a json file(s)\n        zipped in a directory. For info on importing, see the repositories [import route](#operation/import_branch_as_new_repo).",
    "operationId": "export_branch",
    "parameters": [
     {
      "required": true,
      "schema": {
       "title": "Branchid",
       "type": "string"
      },
      "name": "branchId",
      "in": "path"
     }
    ],
    "responses": {
     "200": {
      "description": "Successful Response"
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  }
 },
 "components": {
  "schemas": {
   "Agent": {
    "title": "Agent",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Agent Name",
      "maxLength": 32,
      "type": "string",
      "description": "The unique name of this Agent."
     },
     "peripheral": {
      "title": "Peripheral Flag",
      "type": "boolean",
      "description": "If true, this Agent is considered a Peripheral Agent within the Scenario.",
      "default": false
     },
     "targetMapping": {
      "title": "IDs of Associated Agent Blocks",
      "type": "object",
      "description": "Relationship with data to one or more `Agent` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": {}
     },
     "targetGroupMapping": {
      "title": "IDs of Associated AgentGroup Blocks",
      "type": "object",
      "description": "Relationship with data to one or more `AgentGroup` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": {}
     },
     "differentiatingState": {
      "title": "Differentiating State",
      "type": "object",
      "description": "State used to differentiate this Agent from others instantiated from the same Agent Template. This object is merged with the Agent Template model before the simulation begins.  State variable organization must be identical to the Agent Template model in order to successfully overwrite it.",
      "default": {}
     },
     "templateRef": {
      "title": "Agent Template Ref",
      "type": "string",
      "description": "The ID of the referenced Agent Template `Branch`."
     },
     "orbit": {
      "title": "ID of Associated Orbit Block",
      "type": "string",
      "description": "Relationship to zero or one `Orbit` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "externalState": {
      "title": "IDs of Associated ExternalState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `ExternalState` blocks. Inverse key: `ExternalState.agents`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "AgentGroup": {
    "title": "AgentGroup",
    "required": [
     "name",
     "agentType"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "agentAssociations": {
      "title": "IDs of Associated Agent Blocks",
      "type": "object",
      "description": "Relationship with data to one or more `Agent` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": {}
     },
     "agentType": {
      "title": "Agent Type",
      "allOf": [
       {
        "$ref": "#/components/schemas/Types"
       }
      ]
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "AngleBase306": {
    "title": "AngleBase306",
    "type": "object",
    "properties": {
     "rad": {
      "title": "Rad",
      "type": "number"
     },
     "deg": {
      "title": "Deg",
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "AngleFieldOfView30": {
    "title": "AngleFieldOfView30",
    "type": "object",
    "properties": {
     "rad": {
      "title": "Rad",
      "maximum": 3.141592653589793,
      "minimum": 0.0,
      "type": "number"
     },
     "deg": {
      "title": "Deg",
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "AngleFieldOfView35": {
    "title": "AngleFieldOfView35",
    "type": "object",
    "properties": {
     "rad": {
      "title": "Rad",
      "maximum": 1.5707963267948966,
      "minimum": 0.0,
      "type": "number"
     },
     "deg": {
      "title": "Deg",
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "AngleFieldOfView36": {
    "title": "AngleFieldOfView36",
    "type": "object",
    "properties": {
     "rad": {
      "title": "Rad",
      "maximum": 1.5707963267948966,
      "minimum": 0.0,
      "type": "number"
     },
     "deg": {
      "title": "Deg",
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "AngleSensors20": {
    "title": "AngleSensors20",
    "type": "object",
    "properties": {
     "rad": {
      "title": "Rad",
      "minimum": 0.0,
      "type": "number"
     },
     "deg": {
      "title": "Deg",
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "AngleSensors51": {
    "title": "AngleSensors51",
    "type": "object",
    "properties": {
     "rad": {
      "title": "Rad",
      "minimum": 0.0,
      "type": "number"
     },
     "deg": {
      "title": "Deg",
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "AngleSensors56": {
    "title": "AngleSensors56",
    "type": "object",
    "properties": {
     "rad": {
      "title": "Rad",
      "minimum": 0.0,
      "type": "number"
     },
     "deg": {
      "title": "Deg",
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "AngularVelocityBase306": {
    "title": "AngularVelocityBase306",
    "type": "object",
    "properties": {
     "deg/s": {
      "title": "Deg/S",
      "type": "number"
     },
     "rpm": {
      "title": "Rpm",
      "type": "number"
     },
     "rad/s": {
      "title": "Rad/S",
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "AngularVelocitySensor": {
    "title": "AngularVelocitySensor",
    "required": [
     "name",
     "oneSigmaPerAxisError"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ComponentDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "conditions": {
      "title": "IDs of Associated Condition Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Condition` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "fieldOfView": {
      "title": "ID of Associated FieldOfView Block",
      "type": "string",
      "description": "Relationship to zero or one `FieldOfView` blocks. Inverse key: `FieldOfView.sensors`. On delete: `restrict` (prevent referenced block from being deleted while relationship to this one exists)."
     },
     "oneSigmaPerAxisError": {
      "title": "Measurment Per-Axis Error [rad/s]",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngularVelocitySensors84"
       }
      ],
      "description": "Standard deviation of normally-distributed noise added to all elements of the measured vector."
     },
     "measurement": {
      "title": "Measured Angular Velocity Vector [rad/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "AngularVelocitySensors84": {
    "title": "AngularVelocitySensors84",
    "type": "object",
    "properties": {
     "deg/s": {
      "title": "Deg/S",
      "type": "number"
     },
     "rpm": {
      "title": "Rpm",
      "type": "number"
     },
     "rad/s": {
      "title": "Rad/S",
      "minimum": 0.0,
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "Antenna": {
    "title": "Antenna",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ComponentDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "fieldOfView": {
      "title": "ID of Associated FieldOfView Block",
      "type": "string",
      "description": "Relationship to a single `FieldOfView` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "externalInterfaces": {
      "title": "IDs of Associated ExternalDataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `ExternalDataInterface` blocks. Inverse key: `ExternalDataInterface.directedEnergyDevice`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "AveragingAlgorithm": {
    "title": "AveragingAlgorithm",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "rate": {
      "title": "Update Rate [Hz]",
      "type": "number",
      "description": "Update rate is not currently implemented but will be supported in a future release."
     },
     "attitudeSolution": {
      "title": "Attitude Solution Quaternion",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "angularVelocitySolution": {
      "title": "Angular Velocity Solution [rad/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "opticalAttitudeSensors": {
      "title": "IDs of Associated OpticalAttitudeSensor Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `OpticalAttitudeSensor` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "angularVelocitySensors": {
      "title": "IDs of Associated AngularVelocitySensor Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `AngularVelocitySensor` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "BaseDissipations": {
    "title": "BaseDissipations",
    "required": [
     "total"
    ],
    "type": "object",
    "properties": {
     "total": {
      "title": "Total",
      "minimum": 0.0,
      "type": "number"
     }
    }
   },
   "Battery": {
    "title": "Battery",
    "required": [
     "configurationType"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "configurationType": {
      "title": "Cell Configuration Type",
      "anyOf": [
       {
        "enum": [
         ""
        ],
        "type": "string"
       },
       {
        "$ref": "#/components/schemas/ConfigurationTypes"
       }
      ]
     },
     "initialSoc": {
      "title": "Initial State of Charge",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "default": 1.0
     },
     "maxChargeCurrentOverride": {
      "title": "Max Charge Current Override",
      "minimum": 0.0,
      "type": "number",
      "description": "If undefined, the max charge current will be computed from the `BatteryCell`-`BatteryPack` composition."
     },
     "maxDischargeCurrentOverride": {
      "title": "Max Discharge Current Override",
      "minimum": 0.0,
      "type": "number",
      "description": "If undefined, the max discharge current will be computed from the `BatteryCell`-`BatteryPack` composition."
     },
     "minSocOverride": {
      "title": "Min SoC Override",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "If undefined, the min state of charge will be computed from the `BatteryCell`-`BatteryPack` composition."
     },
     "powerProcessor": {
      "title": "ID of Associated PowerProcessor Block",
      "type": "string",
      "description": "Relationship to a single `PowerProcessor` block. Inverse key: `PowerProcessor.battery`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "packs": {
      "title": "IDs of Associated BatteryPack Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `BatteryPack` blocks. Inverse key: `BatteryPack.battery`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "current": {
      "title": "Operating current",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "voltage": {
      "title": "Operating voltage from discharge curve [V].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "power": {
      "title": "Operating power [W].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "soc": {
      "title": "State of charge.",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 1.0
     },
     "curve": {
      "title": "Discharge curve.",
      "maxItems": 2,
      "minItems": 2,
      "type": "array",
      "items": {
       "type": "items"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>The discharge curve of the `Battery`, computed from the `BatteryCell`-`BatteryPack` composition."
     },
     "idealMaxChargeCurrent": {
      "title": "Maximum current at which the `Battery` can be charged based on configuration [A].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "maxChargeCurrent": {
      "title": "Maximum current at which the `Battery` can be charged at timestep [A].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "maxChargeVoltage": {
      "title": "Voltage at maximum charge current (`maxChargeCurrent`) [V].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "maxChargePower": {
      "title": "Power at maximum charging current and voltage (`maxChargeCurrent` and `maxChargeVoltage`) [W].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "idealMaxDischargeCurrent": {
      "title": "Maximum current at which the `Battery` can be discharged [A].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "esr": {
      "title": "Equivalent series resistance (ESR) [ohms].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "capacity": {
      "title": "Charge capacity [A-h].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "minSoc": {
      "title": "Minimum allowed state of charge.",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "voc": {
      "title": "Open circuit voltage [V].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "BatteryCell": {
    "title": "BatteryCell",
    "required": [
     "partNumber",
     "esr",
     "maxChargeCurrent",
     "maxDischargeCurrent",
     "minSoc",
     "curve",
     "capacity"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Partnumber",
      "maxLength": 32,
      "type": "string"
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "esr": {
      "title": "ESR [ohms])",
      "minimum": 0.0,
      "type": "number"
     },
     "maxChargeCurrent": {
      "title": "Max Charge Current [A]",
      "minimum": 0.0,
      "type": "number"
     },
     "maxDischargeCurrent": {
      "title": "Max Discharge Current [A]",
      "minimum": 0.0,
      "type": "number"
     },
     "minSoc": {
      "title": "Min State of Charge",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number"
     },
     "curve": {
      "title": "SoC vs. Voc Curve",
      "maxItems": 2,
      "minItems": 2,
      "type": "array",
      "items": {
       "type": "array",
       "items": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "Cell state of charge vs. open-circuit voltage curve. The first list should contain all SoC values in increasing order and the second should contain all Voc values [V].  Each Voc value must be greater than or equal to the prior value."
     },
     "capacity": {
      "title": "Capacity [A-hr]",
      "minimum": 0.0,
      "type": "number"
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "BatteryPack": {
    "title": "BatteryPack",
    "required": [
     "name",
     "numSeries",
     "numParallel"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/BatteryPackDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "numSeries": {
      "title": "# of Series Cells",
      "minimum": 1.0,
      "type": "integer"
     },
     "numParallel": {
      "title": "# of Parallel Cells",
      "minimum": 1.0,
      "type": "integer"
     },
     "cell": {
      "title": "ID of Associated BatteryCell Block",
      "type": "string",
      "description": "Relationship to a single `BatteryCell` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "battery": {
      "title": "ID of Associated Battery Block",
      "type": "string",
      "description": "Relationship to a single `Battery` block. Inverse key: `Battery.packs`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "curve": {
      "title": "Discharge curve.",
      "maxItems": 2,
      "minItems": 2,
      "type": "array",
      "items": {
       "type": "items"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>The discharge curve of the `BatteryPack`, computed from the `BatteryCell` composition."
     },
     "idealMaxChargeCurrent": {
      "title": "Maximum current at which the pack can be charged [A].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "idealMaxDischargeCurrent": {
      "title": "Maximum current at which the pack can be discharged [A].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "minSoc": {
      "title": "Minimum allowed state of charge.",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "esr": {
      "title": "Equivalent series resistance [Ohms].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "capacity": {
      "title": "Charge capacity [A-h].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "current": {
      "title": "Operating current [A].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "BatteryPackDissipations": {
    "title": "BatteryPackDissipations",
    "required": [
     "total",
     "internalLoads",
     "esr"
    ],
    "type": "object",
    "properties": {
     "total": {
      "title": "Total",
      "minimum": 0.0,
      "type": "number"
     },
     "internalLoads": {
      "title": "Internalloads",
      "minimum": 0.0,
      "type": "number"
     },
     "esr": {
      "title": "Esr",
      "minimum": 0.0,
      "type": "number"
     }
    }
   },
   "BodyFrameVector": {
    "title": "BodyFrameVector",
    "required": [
     "name",
     "definitionType",
     "definitionParams"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "definitionType": {
      "title": "Definition Type",
      "allOf": [
       {
        "$ref": "#/components/schemas/BodyFrameVectorTypes"
       }
      ]
     },
     "definitionParams": {
      "title": "Definition Parameters",
      "anyOf": [
       {
        "$ref": "#/components/schemas/SphericalAngles"
       },
       {
        "$ref": "#/components/schemas/Vector"
       }
      ],
      "description": "If `definitionType` is `SPHERICAL_ANGLES`, then `definitionParams` should be a `SphericalAngles` object. If `definitionType` is `VECTOR`, then `definitionParams` should be a `Vector` object."
     },
     "unitVector": {
      "title": "Unit Vector",
      "description": "This value is derived from `definitionParams` and is not user-defined."
     },
     "geocenterAngle": {
      "title": "Geocenter Angle [rad]",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "heliocenterAngle": {
      "title": "Heliocenter Angle [rad]",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "BodyFrameVectorTypes": {
    "title": "BodyFrameVectorTypes",
    "enum": [
     "SPHERICAL_ANGLES",
     "VECTOR"
    ],
    "description": "An enumeration."
   },
   "BodyInFovCondition": {
    "title": "BodyInFovCondition",
    "required": [
     "name",
     "relationship",
     "scalar"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "terminator": {
      "title": "Termination Condition",
      "type": "boolean",
      "description": "If set to true, the simulation will be terminated when this condition evaluates to true.",
      "default": false
     },
     "compliance": {
      "title": "Compliance Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this condition is compliant, false otherwise."
     },
     "relationship": {
      "title": "Relationship",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConditionRelationship"
       }
      ],
      "description": "The relationship to use when comparing the assigned values."
     },
     "scalar": {
      "title": "Constant value to compare to."
     },
     "fieldOfView": {
      "title": "ID of Associated FieldOfView Block",
      "type": "string",
      "description": "Relationship to a single `FieldOfView` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "negate": {
      "title": "Negate the condition so that it is True if the Target is outside of the Field of View or eclipsed by the Earth or moon.",
      "type": "boolean",
      "default": false
     },
     "targetA": {
      "title": "ID of Associated CelestialTarget Block",
      "type": "string",
      "description": "Relationship to a single `CelestialTarget` block. On delete: `restrict` (prevent referenced block from being deleted while relationship to this one exists).\n\nAdditional Details:\nThe statemanager returns a value of 0 if the body is fully outside of the Field of View or line of sight is eclipsed by the Earth or moon, 1 if the target is fully in the field of view and the line of sight to the center is not eclipsed, and 0.5 otherwise. Define the scalar and relationship to get the desired behavior."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "BranchChangesRes": {
    "title": "BranchChangesRes",
    "required": [
     "edited",
     "committed"
    ],
    "type": "object",
    "properties": {
     "edited": {
      "title": "Edited",
      "anyOf": [
       {
        "$ref": "#/components/schemas/VehicleTemplate"
       },
       {
        "$ref": "#/components/schemas/ScenarioTemplate"
       }
      ]
     },
     "committed": {
      "title": "Committed",
      "anyOf": [
       {
        "$ref": "#/components/schemas/VehicleTemplate"
       },
       {
        "$ref": "#/components/schemas/ScenarioTemplate"
       }
      ]
     }
    }
   },
   "BranchCreate": {
    "title": "BranchCreate",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "name": {
      "title": "Name",
      "maxLength": 32,
      "type": "string"
     },
     "description": {
      "title": "Description",
      "maxLength": 300,
      "type": "string"
     }
    }
   },
   "BranchMerge": {
    "title": "BranchMerge",
    "type": "object",
    "properties": {
     "resolutions": {
      "title": "Resolutions",
      "type": "array",
      "items": {
       "enum": [
        "current",
        "incoming"
       ],
       "type": "string"
      }
     }
    }
   },
   "BranchMergeConflictsRes": {
    "title": "BranchMergeConflictsRes",
    "required": [
     "conflicts"
    ],
    "type": "object",
    "properties": {
     "conflicts": {
      "title": "Conflicts",
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/ConflictsObj"
      }
     }
    }
   },
   "BranchRes": {
    "title": "BranchRes",
    "required": [
     "name",
     "id",
     "dateCreated",
     "dateModified",
     "repository",
     "data"
    ],
    "type": "object",
    "properties": {
     "name": {
      "title": "Name",
      "maxLength": 32,
      "type": "string"
     },
     "description": {
      "title": "Description",
      "maxLength": 300,
      "type": "string"
     },
     "id": {
      "title": "Id",
      "type": "integer"
     },
     "dateCreated": {
      "title": "Datecreated",
      "type": "string",
      "format": "date-time"
     },
     "dateModified": {
      "title": "Datemodified",
      "type": "string",
      "format": "date-time"
     },
     "repository": {
      "title": "Repository",
      "anyOf": [
       {
        "type": "object"
       },
       {
        "type": "integer"
       }
      ]
     },
     "data": {
      "title": "Data",
      "anyOf": [
       {
        "$ref": "#/components/schemas/VehicleTemplateRes"
       },
       {
        "$ref": "#/components/schemas/ScenarioTemplateRes"
       }
      ]
     }
    }
   },
   "BranchScenarioRes": {
    "title": "BranchScenarioRes",
    "required": [
     "name",
     "id",
     "dateCreated",
     "dateModified",
     "repository",
     "data"
    ],
    "type": "object",
    "properties": {
     "name": {
      "title": "Name",
      "maxLength": 32,
      "type": "string"
     },
     "description": {
      "title": "Description",
      "maxLength": 300,
      "type": "string"
     },
     "id": {
      "title": "Id",
      "type": "integer"
     },
     "dateCreated": {
      "title": "Datecreated",
      "type": "string",
      "format": "date-time"
     },
     "dateModified": {
      "title": "Datemodified",
      "type": "string",
      "format": "date-time"
     },
     "repository": {
      "title": "Repository",
      "anyOf": [
       {
        "type": "object"
       },
       {
        "type": "integer"
       }
      ]
     },
     "data": {
      "$ref": "#/components/schemas/ScenarioTemplateRes"
     }
    }
   },
   "BranchUpdate": {
    "title": "BranchUpdate",
    "type": "object",
    "properties": {
     "name": {
      "title": "Name",
      "maxLength": 32,
      "type": "string"
     },
     "description": {
      "title": "Description",
      "maxLength": 300,
      "type": "string"
     }
    }
   },
   "BranchVehicleRes": {
    "title": "BranchVehicleRes",
    "required": [
     "name",
     "id",
     "dateCreated",
     "dateModified",
     "repository",
     "data"
    ],
    "type": "object",
    "properties": {
     "name": {
      "title": "Name",
      "maxLength": 32,
      "type": "string"
     },
     "description": {
      "title": "Description",
      "maxLength": 300,
      "type": "string"
     },
     "id": {
      "title": "Id",
      "type": "integer"
     },
     "dateCreated": {
      "title": "Datecreated",
      "type": "string",
      "format": "date-time"
     },
     "dateModified": {
      "title": "Datemodified",
      "type": "string",
      "format": "date-time"
     },
     "repository": {
      "title": "Repository",
      "anyOf": [
       {
        "type": "object"
       },
       {
        "type": "integer"
       }
      ]
     },
     "data": {
      "$ref": "#/components/schemas/VehicleTemplateRes"
     }
    }
   },
   "BranchVerifyPassword": {
    "title": "BranchVerifyPassword",
    "required": [
     "password"
    ],
    "type": "object",
    "properties": {
     "password": {
      "title": "Password",
      "type": "string"
     }
    }
   },
   "BusRegulator": {
    "title": "BusRegulator",
    "required": [
     "name",
     "inputType",
     "voltage",
     "maxOutputPower",
     "efficiency"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "inputType": {
      "title": "Input Type",
      "allOf": [
       {
        "$ref": "#/components/schemas/InputTypes"
       }
      ],
      "description": "The input source to the regulator. If `BUS_REGULATOR`, `inRegulator` must be defined. Otherwise, power will be drawn from the EPS root node."
     },
     "voltage": {
      "title": "Output Voltage [V]",
      "type": "number"
     },
     "maxOutputPower": {
      "title": "Max Output Power [W]",
      "minimum": 0.0,
      "type": "number"
     },
     "efficiency": {
      "title": "Efficiency",
      "maximum": 1.0,
      "exclusiveMinimum": 0.0,
      "type": "number",
      "description": "The efficiency of the regulator. The remaining power is dissipated as heat."
     },
     "inRegulator": {
      "title": "ID of Associated BusRegulator Block",
      "type": "string",
      "description": "Relationship to zero or one `BusRegulator` blocks. Inverse key: `BusRegulator.outRegulators`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "powerProcessor": {
      "title": "ID of Associated PowerProcessor Block",
      "type": "string",
      "description": "Relationship to a single `PowerProcessor` block. Inverse key: `PowerProcessor.busRegulators`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "outRegulators": {
      "title": "IDs of Associated BusRegulator Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `BusRegulator` blocks. Inverse key: `BusRegulator.inRegulator`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "loads": {
      "title": "IDs of Associated Load Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Load` blocks. Inverse key: `Load.busRegulator`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dynamicallyLoadedComponents": {
      "title": "IDs of Associated DynamicallyLoadedComponent Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DynamicallyLoadedComponent` blocks. Inverse key: `DynamicallyLoadedComponent.busRegulator`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/BaseDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "outputPowers": {
      "title": "Outputpowers",
      "type": "object",
      "additionalProperties": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "Categories": {
    "title": "Categories",
    "enum": [
     "POWER",
     "CDH",
     "DATA_HANDLING",
     "GNC",
     "THERMAL",
     "STRUCTURE",
     "CUSTOM"
    ],
    "description": "An enumeration."
   },
   "CelestialPointingDirections": {
    "title": "CelestialPointingDirections",
    "enum": [
     "SUN",
     "MOON",
     "EARTH",
     "MERCURY",
     "VENUS",
     "MARS",
     "JUPITER",
     "SATURN",
     "URANUS",
     "NEPTUNE",
     "PLUTO"
    ],
    "description": "An enumeration."
   },
   "CelestialTarget": {
    "title": "CelestialTarget",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "agentId": {
      "title": "Agentid",
      "type": "string",
      "description": "**For internal use only**"
     },
     "position": {
      "title": "Position",
      "allOf": [
       {
        "$ref": "#/components/schemas/PositionBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "range": {
      "title": "Range to Agent [km]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "lineOfSight": {
      "title": "Line of Sight Between Target and Agent",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True if the line of sight to the target is not eclipsed by the Earth or moon."
     },
     "relativePosition": {
      "title": "Relative Position [km, km, km]",
      "maxItems": 3,
      "minItems": 3,
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "targetAzimuth": {
      "title": "Azimuth from Agent to Target",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "targetElevation": {
      "title": "Elevation from Agent to Target",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "lat": {
      "title": "Latitude",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "lon": {
      "title": "Longitude",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "alt": {
      "title": "Altitude",
      "allOf": [
       {
        "$ref": "#/components/schemas/DistanceBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "polynomialEphemerisBody": {
      "title": "Polynomial Ephemeris Body",
      "allOf": [
       {
        "$ref": "#/components/schemas/PolynomialEphemerisBody"
       }
      ],
      "description": "The celestial body to target."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "CelestialVector": {
    "title": "CelestialVector",
    "required": [
     "name",
     "celestialPointingDirection"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "type": "string"
     },
     "truth": {
      "title": "Truth Vector",
      "allOf": [
       {
        "$ref": "#/components/schemas/FrameVectorBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "estimate": {
      "title": "Estimated Vector",
      "allOf": [
       {
        "$ref": "#/components/schemas/FrameVectorBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "eclipsed": {
      "title": "Eclipsed Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": false
     },
     "celestialPointingDirection": {
      "title": "Celestial Pointing Direction",
      "allOf": [
       {
        "$ref": "#/components/schemas/CelestialPointingDirections"
       }
      ]
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "CircularFieldOfView": {
    "title": "CircularFieldOfView",
    "required": [
     "name",
     "halfAngle"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "boresightBodyFrameVector": {
      "title": "ID of Associated BodyFrameVector Block",
      "type": "string",
      "description": "Relationship to a single `BodyFrameVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "sensors": {
      "title": "IDs of Associated Sensor Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Sensor` blocks. Inverse key: `Sensor.fieldOfView`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "halfAngle": {
      "title": "View Half Angle",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleFieldOfView30"
       }
      ]
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "ClassicalOrbitalElements": {
    "title": "ClassicalOrbitalElements",
    "required": [
     "a",
     "e",
     "inc",
     "raan",
     "om",
     "nu"
    ],
    "type": "object",
    "properties": {
     "a": {
      "title": "Semimajor Axis [km]",
      "minimum": 6478.1359999999995,
      "type": "number"
     },
     "e": {
      "title": "Eccentricity",
      "exclusiveMaximum": 1.0,
      "minimum": 0.0,
      "type": "number"
     },
     "inc": {
      "title": "Inclination [deg]",
      "maximum": 180.0,
      "minimum": 0.0,
      "type": "number"
     },
     "raan": {
      "title": "RAAN [deg]",
      "maximum": 360.0,
      "minimum": -360.0,
      "type": "number"
     },
     "om": {
      "title": "Omega [deg]",
      "maximum": 360.0,
      "minimum": -360.0,
      "type": "number",
      "description": "True Longitude of Perigee or Argument of Perigee depending on Eccentricity and/or Inclination"
     },
     "nu": {
      "title": "Nu [deg]",
      "maximum": 360.0,
      "minimum": -360.0,
      "type": "number",
      "description": "Argument of Latitude, True Anomaly, or True Longitude depending on Eccentricity and/or Inclination"
     }
    }
   },
   "ClockConfig": {
    "title": "ClockConfig",
    "required": [
     "startTime",
     "stopTime"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "startTime": {
      "title": "Start Time [MJD]",
      "type": "number",
      "description": "The time at which the simulation begins simulating from."
     },
     "stopTime": {
      "title": "Stop Time [MJD]",
      "type": "number",
      "description": "The time at which the simulation completes."
     },
     "realTime": {
      "title": "Real-Time Mode",
      "type": "boolean",
      "description": "If true, the simulation will run 1x real-time.  This means if the simulation time-step is 10s, 10s of             wall time will elapse between the beginning of that round and the next. If false, the simulation will run as             fast as possible.  Use `syncTime` if you want simulation time to be syncronized to wall time.",
      "default": false
     },
     "syncTime": {
      "title": "Sync-Time Mode",
      "type": "boolean",
      "description": "If true, the simulation will run faster than real-time up to current wall time and then step in             sync with wall time. `syncTime` is only considered when `realTime` is true.",
      "default": false
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "Component": {
    "title": "Component",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ComponentDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "ComponentDissipations": {
    "title": "ComponentDissipations",
    "required": [
     "total",
     "internalLoads"
    ],
    "type": "object",
    "properties": {
     "total": {
      "title": "Total",
      "minimum": 0.0,
      "type": "number"
     },
     "internalLoads": {
      "title": "Internalloads",
      "minimum": 0.0,
      "type": "number"
     }
    }
   },
   "ComponentParameters": {
    "title": "ComponentParameters",
    "enum": [
     "DATA_STORAGE_FILL_PERCENT",
     "TEMPERATURE"
    ],
    "description": "An enumeration."
   },
   "ComponentToScalarCondition": {
    "title": "ComponentToScalarCondition",
    "required": [
     "name",
     "relationship",
     "scalar",
     "componentParam"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "terminator": {
      "title": "Termination Condition",
      "type": "boolean",
      "description": "If set to true, the simulation will be terminated when this condition evaluates to true.",
      "default": false
     },
     "compliance": {
      "title": "Compliance Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this condition is compliant, false otherwise."
     },
     "relationship": {
      "title": "Relationship",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConditionRelationship"
       }
      ],
      "description": "The relationship to use when comparing the assigned values."
     },
     "scalar": {
      "title": "Constant value to compare to."
     },
     "component": {
      "title": "ID of Associated Component Block",
      "type": "string",
      "description": "Relationship to a single `Component` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "componentParam": {
      "title": "Component Parameter",
      "allOf": [
       {
        "$ref": "#/components/schemas/ComponentParameters"
       }
      ]
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "CompoundCondition": {
    "title": "CompoundCondition",
    "required": [
     "name",
     "operator"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "terminator": {
      "title": "Termination Condition",
      "type": "boolean",
      "description": "If set to true, the simulation will be terminated when this condition evaluates to true.",
      "default": false
     },
     "compliance": {
      "title": "Compliance Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this condition is compliant, false otherwise."
     },
     "conditions": {
      "title": "IDs of Associated Condition Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Condition` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "operator": {
      "title": "Operator for combining conditions into one.",
      "allOf": [
       {
        "$ref": "#/components/schemas/CompoundOperators"
       }
      ]
     },
     "negate": {
      "title": "Negate Condition",
      "type": "boolean",
      "description": "If true, the condition is compliant when it evaluates to false.",
      "default": false
     },
     "countRelationship": {
      "title": "Count Relationship",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConditionRelationship"
       }
      ],
      "description": "Used to compare the number of conditions that are compliant to the `countValue`."
     },
     "countValue": {
      "title": "Count Value",
      "type": "integer",
      "description": "Number to compare the number of compliant conditions to using the `countRelationship`."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "CompoundOperators": {
    "title": "CompoundOperators",
    "enum": [
     "ALL",
     "ANY",
     "COUNT"
    ],
    "description": "An enumeration."
   },
   "ConditionRelationship": {
    "title": "ConditionRelationship",
    "enum": [
     "GREATER",
     "LESS",
     "GREATER_EQUAL",
     "LESS_EQUAL",
     "EQUAL",
     "NOT_EQUAL"
    ],
    "description": "An enumeration."
   },
   "ConfigurationTypes": {
    "title": "ConfigurationTypes",
    "enum": [
     "SERIES",
     "PARALLEL"
    ],
    "description": "An enumeration."
   },
   "ConflictsObj": {
    "title": "ConflictsObj",
    "required": [
     "current",
     "incoming",
     "block"
    ],
    "type": "object",
    "properties": {
     "current": {
      "title": "Current",
      "type": "object"
     },
     "incoming": {
      "title": "Incoming",
      "type": "object"
     },
     "block": {
      "title": "Block",
      "type": "string"
     }
    }
   },
   "ConstantPowerParams": {
    "title": "ConstantPowerParams",
    "required": [
     "power"
    ],
    "type": "object",
    "properties": {
     "power": {
      "title": "Power [W]",
      "minimum": 0.0,
      "type": "number"
     }
    }
   },
   "ConstantResistanceParams": {
    "title": "ConstantResistanceParams",
    "required": [
     "resistance"
    ],
    "type": "object",
    "properties": {
     "resistance": {
      "title": "Resistance [ohms]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     }
    }
   },
   "Cooler": {
    "title": "Cooler",
    "required": [
     "name",
     "onRegHeatFlowRate"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ComponentDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "busRegulator": {
      "title": "ID of Associated BusRegulator Block",
      "type": "string",
      "description": "Relationship to zero or one `BusRegulator` blocks. Inverse key: `BusRegulator.dynamicallyLoadedComponents`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "powerProcessor": {
      "title": "ID of Associated PowerProcessor Block",
      "type": "string",
      "description": "Relationship to zero or one `PowerProcessor` blocks. Inverse key: `PowerProcessor.dynamicallyLoadedComponents`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "onRegHeatFlowRate": {
      "title": "Heat Flow Rate when Active [W]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "controlledComponent": {
      "title": "ID of Associated Component Block",
      "type": "string",
      "description": "Relationship to a single `Component` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "tempControllerStates": {
      "title": "IDs of Associated TempControllerState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `TempControllerState` blocks. Inverse key: `TempControllerState.tempController`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "regHeatFlowRate": {
      "title": "Positive Heat Flow Rate [W]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "commandedTemperature": {
      "title": "Commanded Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "efficiency": {
      "title": "Cooler Efficiency [%]",
      "maximum": 1.0,
      "exclusiveMinimum": 0.0,
      "type": "number",
      "default": 1.0
     },
     "sinkHeatFlowRate": {
      "title": "Heat Flow Rate to Sink Interface [W]",
      "type": "number",
      "default": 0.0
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "CooperativeTransmitInterface": {
    "title": "CooperativeTransmitInterface",
    "required": [
     "name",
     "onBitRate",
     "alwaysActive"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "onBitRate": {
      "title": "Maximum Bit Rate [bps]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "alwaysActive": {
      "title": "Always Active Toggle",
      "type": "boolean",
      "description": "Toggles the interface to be always active. If false, interface active status will be dictated by theassociated `OperationalMode`s (via `opModes`)."
     },
     "dataType": {
      "title": "ID of Associated DataType Block",
      "type": "string",
      "description": "Relationship to a single `DataType` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "opModes": {
      "title": "IDs of Associated OperationalMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `OperationalMode` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "source": {
      "title": "ID of Associated Modem Block",
      "type": "string",
      "description": "Relationship to a single `Modem` block. Inverse key: `Modem.dataSinks`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "sink": {
      "title": "ID of Associated Component Block",
      "type": "string",
      "description": "Relationship to zero or one `Component` blocks. Inverse key: `Component.dataSources`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "bitRate": {
      "title": "Bit Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0
     },
     "isActive": {
      "title": "Interface Activity Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this `DataInterface` is active (given `opModes` association), false otherwise.",
      "default": false
     },
     "targetInFov": {
      "title": "One-Way Field of View Access",
      "type": "boolean",
      "description": "True if the target is in the Field of View and not eclipsed by the Earth or moon. Otherwise, false.",
      "default": false
     },
     "linkLatency": {
      "title": "Point to Point Link Latency [s]",
      "type": "number",
      "description": "The link latency is the light time it takes to communicate with the target. This time elapses between the signal being sent and received."
     },
     "linkTarget": {
      "title": "ID of Associated Target Block",
      "type": "string",
      "description": "Relationship to zero or one `Target` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "modem": {
      "title": "ID of Associated Modem Block",
      "type": "string",
      "description": "Relationship to a single `Modem` block. Inverse key: `Modem.externalInterfaces`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "directedEnergyDevice": {
      "title": "ID of Associated DirectedEnergyDevice Block",
      "type": "string",
      "description": "Relationship to a single `DirectedEnergyDevice` block. Inverse key: `DirectedEnergyDevice.externalInterfaces`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "linkTargetGroup": {
      "title": "ID of Associated TargetGroup Block",
      "type": "string",
      "description": "Relationship to zero or one `TargetGroup` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "canLink": {
      "title": "Link Availability Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this `ExternalDataInterface` can link to its `linkTarget`, false otherwise.",
      "default": false
     },
     "activeLinkTarget": {
      "title": "ID of Associated Target Block",
      "type": "string",
      "description": "Relationship to zero or one `Target` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "CrudRes": {
    "title": "CrudRes",
    "required": [
     "blocks",
     "delete"
    ],
    "type": "object",
    "properties": {
     "blocks": {
      "title": "Blocks",
      "type": "array",
      "items": {
       "type": "string"
      }
     },
     "delete": {
      "title": "Delete",
      "type": "array",
      "items": {
       "type": "string"
      }
     }
    }
   },
   "DataBus": {
    "title": "DataBus",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "interfaces": {
      "title": "IDs of Associated InternalDataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `InternalDataInterface` blocks. Inverse key: `InternalDataInterface.bus`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "bitRate": {
      "title": "Bit Rate [bps]",
      "minimum": 0.0,
      "type": "integer",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "DataInterface": {
    "title": "DataInterface",
    "required": [
     "name",
     "onBitRate",
     "alwaysActive"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "onBitRate": {
      "title": "Maximum Bit Rate [bps]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "alwaysActive": {
      "title": "Always Active Toggle",
      "type": "boolean",
      "description": "Toggles the interface to be always active. If false, interface active status will be dictated by theassociated `OperationalMode`s (via `opModes`)."
     },
     "dataType": {
      "title": "ID of Associated DataType Block",
      "type": "string",
      "description": "Relationship to a single `DataType` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "opModes": {
      "title": "IDs of Associated OperationalMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `OperationalMode` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "source": {
      "title": "ID of Associated Component Block",
      "type": "string",
      "description": "Relationship to zero or one `Component` blocks. Inverse key: `Component.dataSinks`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "sink": {
      "title": "ID of Associated Component Block",
      "type": "string",
      "description": "Relationship to zero or one `Component` blocks. Inverse key: `Component.dataSources`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "bitRate": {
      "title": "Bit Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0
     },
     "isActive": {
      "title": "Interface Activity Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this `DataInterface` is active (given `opModes` association), false otherwise.",
      "default": false
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "DataMode": {
    "title": "DataMode",
    "required": [
     "name",
     "alwaysActive"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "alwaysActive": {
      "title": "Always Active Toggle",
      "type": "boolean",
      "description": "Toggles the mode to be always active. If false, interface active status will be dictated by the associated `OperationalMode`s (via `opModes`)."
     },
     "input": {
      "title": "IDs of Associated DataType Blocks",
      "type": "object",
      "description": "Relationship with data to one or more `DataType` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": {}
     },
     "output": {
      "title": "IDs of Associated DataType Blocks",
      "type": "object",
      "description": "Relationship with data to one or more `DataType` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": {}
     },
     "opModes": {
      "title": "IDs of Associated OperationalMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `OperationalMode` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "components": {
      "title": "IDs of Associated Component Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Component` blocks. Inverse key: `Component.dataModes`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "isActive": {
      "title": "Mode Activity Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this `DataMode` is active (given `opModes` association), false otherwise.",
      "default": false
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "DataServiceResponse": {
    "title": "DataServiceResponse",
    "required": [
     "Data"
    ],
    "type": "object",
    "properties": {
     "Data": {
      "$ref": "#/components/schemas/DataSet"
     }
    }
   },
   "DataSet": {
    "title": "DataSet",
    "required": [
     "meta",
     "series"
    ],
    "type": "object",
    "properties": {
     "meta": {
      "title": "Meta",
      "type": "object"
     },
     "series": {
      "title": "Series",
      "type": "object"
     }
    }
   },
   "DataStorage": {
    "title": "DataStorage",
    "required": [
     "name",
     "capacity",
     "maxBitRateRead",
     "maxBitRateWrite"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "capacity": {
      "title": "Storage Capacity [bits]",
      "exclusiveMinimum": 0.0,
      "type": "integer"
     },
     "maxBitRateRead": {
      "title": "Maximum Read Rate [bps]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "maxBitRateWrite": {
      "title": "Maximum Write Rate [bps]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "component": {
      "title": "ID of Associated Component Block",
      "type": "string",
      "description": "Relationship to a single `Component` block. Inverse key: `Component.dataStorage`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "usage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {}
     },
     "readRate": {
      "title": "Current Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0
     },
     "writeRate": {
      "title": "Current Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0
     },
     "fillPercent": {
      "title": "Percentage Used of Capacity",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "DataType": {
    "title": "DataType",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "DeletedEntity": {
    "title": "DeletedEntity",
    "required": [
     "model",
     "id"
    ],
    "type": "object",
    "properties": {
     "model": {
      "title": "Model",
      "type": "string"
     },
     "id": {
      "title": "Id",
      "type": "integer"
     }
    }
   },
   "DirectionSensor": {
    "title": "DirectionSensor",
    "required": [
     "name",
     "oneSigmaAngleError"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ComponentDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "conditions": {
      "title": "IDs of Associated Condition Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Condition` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "fieldOfView": {
      "title": "ID of Associated FieldOfView Block",
      "type": "string",
      "description": "Relationship to zero or one `FieldOfView` blocks. Inverse key: `FieldOfView.sensors`. On delete: `restrict` (prevent referenced block from being deleted while relationship to this one exists)."
     },
     "oneSigmaAngleError": {
      "title": "Measurement Angular Error [deg]",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleSensors20"
       }
      ],
      "description": "Standard deviation of the angle between the true and measured vector directions."
     },
     "referenceVector": {
      "title": "ID of Associated ReferenceVector Block",
      "type": "string",
      "description": "Relationship to a single `ReferenceVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "truth": {
      "title": "Zero Noise Measurement Vector",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "measurement": {
      "title": "Measurement Vector",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "DistanceBase306": {
    "title": "DistanceBase306",
    "type": "object",
    "properties": {
     "mm": {
      "title": "Mm",
      "type": "number"
     },
     "km": {
      "title": "Km",
      "type": "number"
     },
     "cm": {
      "title": "Cm",
      "type": "number"
     },
     "m": {
      "title": "M",
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "DistanceSensors72": {
    "title": "DistanceSensors72",
    "type": "object",
    "properties": {
     "mm": {
      "title": "Mm",
      "type": "number"
     },
     "km": {
      "title": "Km",
      "minimum": 0.0,
      "type": "number"
     },
     "cm": {
      "title": "Cm",
      "type": "number"
     },
     "m": {
      "title": "M",
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "DurationBase306": {
    "title": "DurationBase306",
    "type": "object",
    "properties": {
     "day": {
      "title": "Day",
      "type": "number"
     },
     "s": {
      "title": "S",
      "type": "number"
     },
     "min": {
      "title": "Min",
      "type": "number"
     },
     "hour": {
      "title": "Hour",
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "DurationLoad69": {
    "title": "DurationLoad69",
    "type": "object",
    "properties": {
     "day": {
      "title": "Day",
      "minimum": 0.0,
      "type": "number"
     },
     "s": {
      "title": "S",
      "type": "number"
     },
     "min": {
      "title": "Min",
      "type": "number"
     },
     "hour": {
      "title": "Hour",
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "DurationOperationalMode18": {
    "title": "DurationOperationalMode18",
    "type": "object",
    "properties": {
     "day": {
      "title": "Day",
      "minimum": 0.0,
      "type": "number"
     },
     "s": {
      "title": "S",
      "type": "number"
     },
     "min": {
      "title": "Min",
      "type": "number"
     },
     "hour": {
      "title": "Hour",
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "DurationOperationalMode20": {
    "title": "DurationOperationalMode20",
    "type": "object",
    "properties": {
     "day": {
      "title": "Day",
      "minimum": 0.0,
      "type": "number"
     },
     "s": {
      "title": "S",
      "type": "number"
     },
     "min": {
      "title": "Min",
      "type": "number"
     },
     "hour": {
      "title": "Hour",
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "DurationOperationalMode22": {
    "title": "DurationOperationalMode22",
    "type": "object",
    "properties": {
     "day": {
      "title": "Day",
      "minimum": 0.0,
      "type": "number"
     },
     "s": {
      "title": "S",
      "type": "number"
     },
     "min": {
      "title": "Min",
      "type": "number"
     },
     "hour": {
      "title": "Hour",
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "DurationOperationalMode31": {
    "title": "DurationOperationalMode31",
    "type": "object",
    "properties": {
     "day": {
      "title": "Day",
      "minimum": 0.0,
      "type": "number"
     },
     "s": {
      "title": "S",
      "type": "number"
     },
     "min": {
      "title": "Min",
      "type": "number"
     },
     "hour": {
      "title": "Hour",
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "DurationOperationalMode33": {
    "title": "DurationOperationalMode33",
    "type": "object",
    "properties": {
     "day": {
      "title": "Day",
      "minimum": 0.0,
      "type": "number"
     },
     "s": {
      "title": "S",
      "type": "number"
     },
     "min": {
      "title": "Min",
      "type": "number"
     },
     "hour": {
      "title": "Hour",
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "EkfAlgorithm": {
    "title": "EkfAlgorithm",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "rate": {
      "title": "Update Rate [Hz]",
      "type": "number",
      "description": "Update rate is not currently implemented but will be supported in a future release."
     },
     "positionSolution": {
      "title": "Position Solution [km]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "velocitySolution": {
      "title": "Velocity Solution [km/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "covariance": {
      "title": "Solution Covariance",
      "type": "array",
      "items": {
       "maxItems": 6,
       "minItems": 6,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "positionCovariance": {
      "title": "Position Solution Covariance",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "velocityCovariance": {
      "title": "Velocity Solution Covariance",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "positionSensors": {
      "title": "IDs of Associated PositionSensor Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `PositionSensor` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "EntityDeleteRes": {
    "title": "EntityDeleteRes",
    "required": [
     "message",
     "deletedEntities"
    ],
    "type": "object",
    "properties": {
     "message": {
      "title": "Message",
      "type": "string"
     },
     "deletedEntities": {
      "title": "Deletedentities",
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/DeletedEntity"
      }
     }
    }
   },
   "EpsOutputTypes": {
    "title": "EpsOutputTypes",
    "enum": [
     "CORE_OUTPUT",
     "BUS_REGULATOR"
    ],
    "description": "An enumeration."
   },
   "EquatorialCircularReferenceOrbit": {
    "title": "EquatorialCircularReferenceOrbit",
    "required": [
     "initialRefOrbit",
     "nu",
     "alt"
    ],
    "type": "object",
    "properties": {
     "initialRefOrbit": {
      "title": "Initialreforbit",
      "enum": [
       "EQUATORIAL_CIRC"
      ],
      "type": "string"
     },
     "nu": {
      "title": "Nu [deg]",
      "maximum": 360.0,
      "minimum": -360.0,
      "type": "number"
     },
     "alt": {
      "title": "Altitude [km]",
      "minimum": 100.0,
      "type": "number"
     }
    }
   },
   "ExternalStateSetRequest": {
    "title": "ExternalStateSetRequest",
    "type": "object",
    "properties": {
     "values": {
      "title": "External State Values",
      "type": "array",
      "items": {},
      "description": "\nA list containing the values of the external state to be produced.  The shape of this list and its\ncontents should match that defined by the `produced` query on the `ExternalState` block targeted by this request.\n\nExamples:\n```python\nblock = {\n  produced: [\n    {'root': 'velocity'},\n  ],\n  ...\n}\nvalues == [\n    [1, 0, 0]\n]\n\nblock = {\n  produced: [\n    {'root': 'velocity'},\n    {'root': 'commandedAttitude'},\n  ],\n  ...\n}\nvalues == [\n    [1, 0, 0],\n    [0, 0, 0, 1]\n]\n\nblock = {\n  produced: [\n    {'root': 'velocity'},\n    {'Battery': 'voltage'},\n    # Recall that this syntax queries for the `voltage` of all blocks of type `Battery` in the model.\n    # In this example, assume there is a single Battery\n  ],\n  ...\n}\nvalues == [\n    [1, 0, 0],\n    [28.2]\n]\n```\n\nSome state must be produced as numpy arrays.  In this case, follow the numpy serialization/deserialization approach described above.\n",
      "default": []
     },
     "timestamp": {
      "title": "External State Values Timestamp [MJD]",
      "type": "number",
      "description": "\nThe timestamp of the external state `values`. `values` take effect once the relevant simulation\nEngine's `time` is >= `timestamp`. When a `timestamp` is provided, all future `timestamp`s must be\nsequential and increasing. When multiple `timestamp`ed `values` exist in a queue, the most current for\nwhich `time` is >= `timestamp` is taken.\n\nDuring `SpontaneousExternalState` transactions, if `timestamp` is omitted, the relevant Engine's `time` will be used.\n`timestamp` should be omitted for `PerRoundExternalState` transactions.\n"
     }
    }
   },
   "FixedSurface": {
    "title": "FixedSurface",
    "required": [
     "name",
     "area",
     "surfaceCentroid"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "area": {
      "title": "Area [m^2]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "surfaceCentroid": {
      "title": "Centroid [Vector3[m]]"
     },
     "bodyFrameVector": {
      "title": "ID of Associated BodyFrameVector Block",
      "type": "string",
      "description": "Relationship to a single `BodyFrameVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "surfaceMaterial": {
      "title": "ID of Associated SurfaceMaterial Block",
      "type": "string",
      "description": "Relationship to a single `SurfaceMaterial` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "geocenterAngle": {
      "title": "Geocenter Angle [rad]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "earthAlbedoViewFactor": {
      "title": "Earth Albedo View Factor [%]",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "earthIrViewFactor": {
      "title": "Earth IR View Factor [%]",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "solarViewFactor": {
      "title": "Solar View Factor [%]",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "surfaceNormalVector": {
      "title": "Surface Normal Vector",
      "allOf": [
       {
        "$ref": "#/components/schemas/FrameVectorBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "sat2Sun": {
      "title": "Sat to Sun Relative Vector [km]",
      "allOf": [
       {
        "$ref": "#/components/schemas/FrameVectorBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "earthIrHeatFlowRate": {
      "title": "Earth Infrared Heat Flow Rate [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "earthAlbedoHeatFlowRate": {
      "title": "Earth Albedo Heat Flow Rate [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "solarHeatFlowRate": {
      "title": "Solar Heat Flow Rate [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "spaceHeatFlowRate": {
      "title": "Space Heat Flow Rate [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "heatFlowRate": {
      "title": "Heat Flow Rate [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "FrameVectorBase306": {
    "title": "FrameVectorBase306",
    "type": "object",
    "properties": {
     "body": {
      "title": "Body",
      "maxItems": 3,
      "minItems": 3,
      "type": "array",
      "items": {
       "type": "number"
      }
     },
     "eci": {
      "title": "Eci",
      "maxItems": 3,
      "minItems": 3,
      "type": "array",
      "items": {
       "type": "number"
      }
     },
     "ecef": {
      "title": "Ecef",
      "maxItems": 3,
      "minItems": 3,
      "type": "array",
      "items": {
       "type": "number"
      }
     }
    },
    "additionalProperties": false
   },
   "FuelReservoir": {
    "title": "FuelReservoir",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "fuelTanks": {
      "title": "IDs of Associated FuelTank Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `FuelTank` blocks. Inverse key: `FuelTank.reservoir`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "thrusters": {
      "title": "IDs of Associated Thruster Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Thruster` blocks. Inverse key: `Thruster.fuelReservoir`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "flowRate": {
      "title": "Current Flow Rate [kg/s]",
      "minimum": 0.0,
      "type": "number",
      "default": 0.0
     },
     "totalFuel": {
      "title": "Total Fuel Mass [kg]",
      "minimum": 0.0,
      "type": "number"
     },
     "fillPercent": {
      "title": "Fuel Fill Percentage",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number"
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "FullyRegDetPowerProcessor": {
    "title": "FullyRegDetPowerProcessor",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ProcessorDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "topologyParams": {
      "title": "Topology Definition Parameters",
      "anyOf": [
       {
        "$ref": "#/components/schemas/FullyRegDetTopologyParams"
       },
       {
        "$ref": "#/components/schemas/SingleConvHybridTopologyParams"
       },
       {
        "$ref": "#/components/schemas/QuasiRegDetTopologyParams"
       },
       {
        "$ref": "#/components/schemas/TwoConvMpptTopologyParams"
       },
       {
        "$ref": "#/components/schemas/SingleConvMpptTopologyParams"
       }
      ],
      "description": "This field may only be undefined initially.  It is required on first update."
     },
     "loads": {
      "title": "IDs of Associated Load Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Load` blocks. Inverse key: `Load.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dynamicallyLoadedComponents": {
      "title": "IDs of Associated DynamicallyLoadedComponent Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DynamicallyLoadedComponent` blocks. Inverse key: `DynamicallyLoadedComponent.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "battery": {
      "title": "ID of Associated Battery Block",
      "type": "string",
      "description": "Relationship to a single `Battery` block. Inverse key: `Battery.powerProcessor`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "busRegulators": {
      "title": "IDs of Associated BusRegulator Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `BusRegulator` blocks. Inverse key: `BusRegulator.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "solarArrays": {
      "title": "IDs of Associated SolarArray Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `SolarArray` blocks. Inverse key: `SolarArray.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "FullyRegDetTopologyParams": {
    "title": "FullyRegDetTopologyParams",
    "required": [
     "bcrEfficiency",
     "outputPowerRating",
     "chargeDiodeDrop",
     "bdrEfficiency",
     "drivenControllerBusVoltage"
    ],
    "type": "object",
    "properties": {
     "bcrEfficiency": {
      "title": "Battery Charge Regulator (BCR) Efficiency",
      "maximum": 1.0,
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "outputPowerRating": {
      "title": "Output Power Rating [W]",
      "minimum": 0.0,
      "type": "number"
     },
     "chargeDiodeDrop": {
      "title": "Charge Diode Drop [V]",
      "minimum": 0.0,
      "type": "number"
     },
     "bdrEfficiency": {
      "title": "Battery Discharge Regulator (BDR) Efficiency",
      "maximum": 1.0,
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "drivenControllerBusVoltage": {
      "title": "Driven Controller Bus Voltage [V]",
      "minimum": 0.0,
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "GeostationaryReferenceOrbit": {
    "title": "GeostationaryReferenceOrbit",
    "required": [
     "initialRefOrbit",
     "lon"
    ],
    "type": "object",
    "properties": {
     "initialRefOrbit": {
      "title": "Initialreforbit",
      "enum": [
       "GEOSTAT"
      ],
      "type": "string"
     },
     "lon": {
      "title": "Longitude [deg]",
      "maximum": 360.0,
      "minimum": -360.0,
      "type": "number"
     }
    }
   },
   "GeostationaryTransferReferenceOrbit": {
    "title": "GeostationaryTransferReferenceOrbit",
    "required": [
     "initialRefOrbit",
     "om",
     "nu",
     "altPerigee"
    ],
    "type": "object",
    "properties": {
     "initialRefOrbit": {
      "title": "Initialreforbit",
      "enum": [
       "GEOSTAT_TRANSFER"
      ],
      "type": "string"
     },
     "om": {
      "title": "Omega [deg]",
      "maximum": 360.0,
      "minimum": -360.0,
      "type": "number"
     },
     "nu": {
      "title": "Nu [deg]",
      "maximum": 360.0,
      "minimum": -360.0,
      "type": "number"
     },
     "altPerigee": {
      "title": "Perigee Altitude [km]",
      "minimum": 100.0,
      "type": "number"
     }
    }
   },
   "GpsAlgorithm": {
    "title": "GpsAlgorithm",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "rate": {
      "title": "Update Rate [Hz]",
      "type": "number",
      "description": "Update rate is not currently implemented but will be supported in a future release."
     },
     "positionSolution": {
      "title": "Position Solution [km]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "velocitySolution": {
      "title": "Velocity Solution [km/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "covariance": {
      "title": "Solution Covariance",
      "type": "array",
      "items": {
       "maxItems": 6,
       "minItems": 6,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "positionCovariance": {
      "title": "Position Solution Covariance",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "velocityCovariance": {
      "title": "Velocity Solution Covariance",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "positionSensors": {
      "title": "IDs of Associated PositionSensor Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `PositionSensor` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "GroundTarget": {
    "title": "GroundTarget",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "agentId": {
      "title": "Agentid",
      "type": "string",
      "description": "**For internal use only**"
     },
     "position": {
      "title": "Position",
      "allOf": [
       {
        "$ref": "#/components/schemas/PositionBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "range": {
      "title": "Range to Agent [km]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "lineOfSight": {
      "title": "Line of Sight Between Target and Agent",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True if the line of sight to the target is not eclipsed by the Earth or moon."
     },
     "relativePosition": {
      "title": "Relative Position [km, km, km]",
      "maxItems": 3,
      "minItems": 3,
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "targetAzimuth": {
      "title": "Azimuth from Agent to Target",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "targetElevation": {
      "title": "Elevation from Agent to Target",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "lat": {
      "title": "Latitude",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "lon": {
      "title": "Longitude",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "alt": {
      "title": "Altitude",
      "allOf": [
       {
        "$ref": "#/components/schemas/DistanceBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "shadow": {
      "title": "In Shadow Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True indicates that the Target is currently in shadow."
     },
     "lst": {
      "title": "Local Sidereal Time",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "agentAzimuth": {
      "title": "Azimuth from Target to Agent",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "agentElevation": {
      "title": "Elevation from Target to Agent",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "solarAz": {
      "title": "Solar Azimuth",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "solarEl": {
      "title": "Solar Elevation",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "GroupRollers": {
    "title": "GroupRollers",
    "enum": [
     "MAX",
     "MIN",
     "MEAN",
     "MEDIAN",
     "COUNT",
     "ANY",
     "NOTANY",
     "ALL",
     "NOTALL",
     null
    ],
    "description": "An enumeration."
   },
   "HTTPValidationError": {
    "title": "HTTPValidationError",
    "type": "object",
    "properties": {
     "detail": {
      "title": "Detail",
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/ValidationError"
      }
     }
    }
   },
   "Heater": {
    "title": "Heater",
    "required": [
     "name",
     "onRegHeatFlowRate"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ComponentDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "busRegulator": {
      "title": "ID of Associated BusRegulator Block",
      "type": "string",
      "description": "Relationship to zero or one `BusRegulator` blocks. Inverse key: `BusRegulator.dynamicallyLoadedComponents`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "powerProcessor": {
      "title": "ID of Associated PowerProcessor Block",
      "type": "string",
      "description": "Relationship to zero or one `PowerProcessor` blocks. Inverse key: `PowerProcessor.dynamicallyLoadedComponents`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "onRegHeatFlowRate": {
      "title": "Heat Flow Rate when Active [W]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "controlledComponent": {
      "title": "ID of Associated Component Block",
      "type": "string",
      "description": "Relationship to a single `Component` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "tempControllerStates": {
      "title": "IDs of Associated TempControllerState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `TempControllerState` blocks. Inverse key: `TempControllerState.tempController`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "regHeatFlowRate": {
      "title": "Positive Heat Flow Rate [W]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "commandedTemperature": {
      "title": "Commanded Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "InitialStateDefType": {
    "title": "InitialStateDefType",
    "enum": [
     "ORBITAL_ELEMENTS",
     "REF_ORBIT",
     "ECI_STATE",
     "TLE"
    ],
    "type": "string",
    "description": "An enumeration."
   },
   "InputTypes": {
    "title": "InputTypes",
    "enum": [
     "EPS_ROOT_NODE",
     "BUS_REGULATOR"
    ],
    "description": "An enumeration."
   },
   "InternalDataInterface": {
    "title": "InternalDataInterface",
    "required": [
     "name",
     "onBitRate",
     "alwaysActive"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "onBitRate": {
      "title": "Maximum Bit Rate [bps]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "alwaysActive": {
      "title": "Always Active Toggle",
      "type": "boolean",
      "description": "Toggles the interface to be always active. If false, interface active status will be dictated by theassociated `OperationalMode`s (via `opModes`)."
     },
     "dataType": {
      "title": "ID of Associated DataType Block",
      "type": "string",
      "description": "Relationship to a single `DataType` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "opModes": {
      "title": "IDs of Associated OperationalMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `OperationalMode` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "source": {
      "title": "ID of Associated Component Block",
      "type": "string",
      "description": "Relationship to a single `Component` block. Inverse key: `Component.dataSinks`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "sink": {
      "title": "ID of Associated Component Block",
      "type": "string",
      "description": "Relationship to a single `Component` block. Inverse key: `Component.dataSources`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "bitRate": {
      "title": "Bit Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0
     },
     "isActive": {
      "title": "Interface Activity Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this `DataInterface` is active (given `opModes` association), false otherwise.",
      "default": false
     },
     "bus": {
      "title": "ID of Associated DataBus Block",
      "type": "string",
      "description": "Relationship to zero or one `DataBus` blocks. Inverse key: `DataBus.interfaces`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "IssReferenceOrbit": {
    "title": "IssReferenceOrbit",
    "required": [
     "initialRefOrbit",
     "raan",
     "nu"
    ],
    "type": "object",
    "properties": {
     "initialRefOrbit": {
      "title": "Initialreforbit",
      "enum": [
       "ISS"
      ],
      "type": "string"
     },
     "raan": {
      "title": "RAAN [deg]",
      "maximum": 360.0,
      "minimum": -360.0,
      "type": "number"
     },
     "nu": {
      "title": "Nu [deg]",
      "maximum": 360.0,
      "minimum": -360.0,
      "type": "number"
     }
    }
   },
   "LaserCommModule": {
    "title": "LaserCommModule",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ComponentDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "fieldOfView": {
      "title": "ID of Associated FieldOfView Block",
      "type": "string",
      "description": "Relationship to a single `FieldOfView` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "externalInterfaces": {
      "title": "IDs of Associated ExternalDataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `ExternalDataInterface` blocks. Inverse key: `ExternalDataInterface.directedEnergyDevice`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "LoadState": {
    "title": "LoadState",
    "required": [
     "name",
     "efficiency"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "efficiency": {
      "title": "Efficiency",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "Efficiency of the child `Load`s under this `LoadState` is active.  The remaining power is dissipated as heat."
     },
     "component": {
      "title": "ID of Associated Component Block",
      "type": "string",
      "description": "Relationship to a single `Component` block. Inverse key: `Component.loadStates`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "operationalModes": {
      "title": "IDs of Associated OperationalMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `OperationalMode` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "loads": {
      "title": "IDs of Associated Load Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Load` blocks. Inverse key: `Load.loadState`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "isActive": {
      "title": "Active Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this `LoadState` is active (given `operationalModes` association), false otherwise.",
      "default": false
     },
     "timeSinceActive": {
      "title": "Time Since Last Active",
      "allOf": [
       {
        "$ref": "#/components/schemas/DurationBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>Time since this `LoadState` was last active.",
      "default": {
       "day": 0.0
      }
     },
     "powerConsumed": {
      "title": "Current Power Consumption [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "powerDissipation": {
      "title": "Current Power Dissipation [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "LocalPointingDirections": {
    "title": "LocalPointingDirections",
    "enum": [
     "NADIR",
     "ZENITH",
     "CROSS_TRACK_POS",
     "CROSS_TRACK_NEG",
     "ALONG_TRACK_POS",
     "ALONG_TRACK_NEG",
     "RAM",
     "ANTI_RAM",
     "MAGNETIC_FIELD",
     "ECI_COORDINATES",
     "ENU_COORDINATES",
     "LVLH_COORDINATES"
    ],
    "description": "An enumeration."
   },
   "LocalVector": {
    "title": "LocalVector",
    "required": [
     "name",
     "localPointingDirection"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "type": "string"
     },
     "truth": {
      "title": "Truth Vector",
      "allOf": [
       {
        "$ref": "#/components/schemas/FrameVectorBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "estimate": {
      "title": "Estimated Vector",
      "allOf": [
       {
        "$ref": "#/components/schemas/FrameVectorBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "eclipsed": {
      "title": "Eclipsed Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": false
     },
     "localPointingDirection": {
      "title": "Local Pointing Direction Indicator",
      "allOf": [
       {
        "$ref": "#/components/schemas/LocalPointingDirections"
       }
      ]
     },
     "vectorCoordinates": {
      "title": "Vector Coordinates [x: km, y: km, z: km]",
      "maxItems": 3,
      "minItems": 3,
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "\nConstant vector coordinates in the chosen frame (per `localPointingDirection`):\n- `ECI_COORDINATES`: J2000 ECI\n- `LVLH_COORDINATES`: \n    - `x`: Local vertical, aligned with spacecraft position vector\n    - `y`: In-track, component of velocity vector perpendicular to x\n    - `z`: Completes the right-handed system, parallel to orbit angular momentum.\n- `ENU_COORDINATES`: \n    - `z`: Up, aligned with spacecraft position vector\n    - `y`: Component of geographic north vector perpendicular to z\n    - `x`: Completes the right-handed system, points along local East\n        "
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "LockPointingMode": {
    "title": "LockPointingMode",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "odAlgorithm": {
      "title": "ID of Associated OrbitDeterminationAlgorithm Block",
      "type": "string",
      "description": "Relationship to zero or one `OrbitDeterminationAlgorithm` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "adAlgorithm": {
      "title": "ID of Associated AttitudeDeterminationAlgorithm Block",
      "type": "string",
      "description": "Relationship to zero or one `AttitudeDeterminationAlgorithm` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "tcAlgorithm": {
      "title": "ID of Associated ThrustControlAlgorithm Block",
      "type": "string",
      "description": "Relationship to zero or one `ThrustControlAlgorithm` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "reactionWheelCommands": {
      "title": "Reaction Wheel Commands",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "magnetorquerCommands": {
      "title": "Magnetorquer Commands",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "commandedAttitude": {
      "title": "Commanded Attitude Quaternion",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "commandedAngularRates": {
      "title": "Commanded Angular Rate [rad/s]",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "lockBodyFrameVector": {
      "title": "ID of Associated BodyFrameVector Block",
      "type": "string",
      "description": "Relationship to a single `BodyFrameVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "lockVector": {
      "title": "ID of Associated ReferenceVector Block",
      "type": "string",
      "description": "Relationship to a single `ReferenceVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "acAlgorithm": {
      "title": "ID of Associated AttitudeControlAlgorithm Block",
      "type": "string",
      "description": "Relationship to a single `AttitudeControlAlgorithm` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "spinRate": {
      "title": "Commanded Spin Rate [rad/s]",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngularVelocityBase306"
       }
      ],
      "default": {
       "rad/s": 0.0
      }
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "Magnetorquer": {
    "title": "Magnetorquer",
    "required": [
     "name",
     "ratedMagneticMoment",
     "powerAtRatedMagneticMoment"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ComponentDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "busRegulator": {
      "title": "ID of Associated BusRegulator Block",
      "type": "string",
      "description": "Relationship to zero or one `BusRegulator` blocks. Inverse key: `BusRegulator.dynamicallyLoadedComponents`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "powerProcessor": {
      "title": "ID of Associated PowerProcessor Block",
      "type": "string",
      "description": "Relationship to zero or one `PowerProcessor` blocks. Inverse key: `PowerProcessor.dynamicallyLoadedComponents`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "isFail": {
      "title": "Isfail",
      "type": "boolean",
      "description": "**Warning:** Use of this field is deprecated.",
      "default": false
     },
     "bodyFrameVector": {
      "title": "ID of Associated BodyFrameVector Block",
      "type": "string",
      "description": "Relationship to a single `BodyFrameVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "torque": {
      "title": "Current Torque [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0.0,
       0.0,
       0.0
      ]
     },
     "maxTorque": {
      "title": "Current Maximum Torque Vector [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "commandedTorqueMagnitude": {
      "title": "Current Commanded Torque [N\u2022m]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "ratedMagneticMoment": {
      "title": "Maximum Magnetic Moment [A\u2022m\u00b2]",
      "minimum": 0.0,
      "type": "number"
     },
     "powerAtRatedMagneticMoment": {
      "title": "Maximum Power [W]",
      "type": "number"
     },
     "estimatedMagneticFieldVector": {
      "title": "Estimated Local Magnetic Field [T]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "pwmDutyCycle": {
      "title": "Pulse-Width Modulation Duty Cycle",
      "maximum": 1.0,
      "minimum": -1.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "magneticMoment": {
      "title": "Current Magnetic Moment [N\u2022m/T]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "magneticMomentMargin": {
      "title": "Magnetic Moment Margin [%]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "MaxAlignPointingMode": {
    "title": "MaxAlignPointingMode",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "odAlgorithm": {
      "title": "ID of Associated OrbitDeterminationAlgorithm Block",
      "type": "string",
      "description": "Relationship to zero or one `OrbitDeterminationAlgorithm` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "adAlgorithm": {
      "title": "ID of Associated AttitudeDeterminationAlgorithm Block",
      "type": "string",
      "description": "Relationship to zero or one `AttitudeDeterminationAlgorithm` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "tcAlgorithm": {
      "title": "ID of Associated ThrustControlAlgorithm Block",
      "type": "string",
      "description": "Relationship to zero or one `ThrustControlAlgorithm` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "reactionWheelCommands": {
      "title": "Reaction Wheel Commands",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "magnetorquerCommands": {
      "title": "Magnetorquer Commands",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "commandedAttitude": {
      "title": "Commanded Attitude Quaternion",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "commandedAngularRates": {
      "title": "Commanded Angular Rate [rad/s]",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "lockBodyFrameVector": {
      "title": "ID of Associated BodyFrameVector Block",
      "type": "string",
      "description": "Relationship to a single `BodyFrameVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "lockVector": {
      "title": "ID of Associated ReferenceVector Block",
      "type": "string",
      "description": "Relationship to a single `ReferenceVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "acAlgorithm": {
      "title": "ID of Associated AttitudeControlAlgorithm Block",
      "type": "string",
      "description": "Relationship to a single `AttitudeControlAlgorithm` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "maxAlignBodyFrameVector": {
      "title": "ID of Associated BodyFrameVector Block",
      "type": "string",
      "description": "Relationship to a single `BodyFrameVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "maxAlignVector": {
      "title": "ID of Associated ReferenceVector Block",
      "type": "string",
      "description": "Relationship to a single `ReferenceVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "MekfAlgorithm": {
    "title": "MekfAlgorithm",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "rate": {
      "title": "Update Rate [Hz]",
      "type": "number",
      "description": "Update rate is not currently implemented but will be supported in a future release."
     },
     "attitudeSolution": {
      "title": "Attitude Solution Quaternion",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "angularVelocitySolution": {
      "title": "Angular Velocity Solution [rad/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "opticalAttitudeSensors": {
      "title": "IDs of Associated OpticalAttitudeSensor Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `OpticalAttitudeSensor` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "angularVelocitySensors": {
      "title": "IDs of Associated AngularVelocitySensor Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `AngularVelocitySensor` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "covariance": {
      "title": "Solution Covariance",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "MessageRes": {
    "title": "MessageRes",
    "required": [
     "message"
    ],
    "type": "object",
    "properties": {
     "message": {
      "title": "Message",
      "type": "string"
     }
    }
   },
   "Modem": {
    "title": "Modem",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ComponentDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "externalInterfaces": {
      "title": "IDs of Associated ExternalDataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `ExternalDataInterface` blocks. Inverse key: `ExternalDataInterface.modem`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "OperationalMode": {
    "title": "OperationalMode",
    "required": [
     "name",
     "priority"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "priority": {
      "title": "Priority",
      "minimum": 0.0,
      "type": "integer",
      "description": "Higher values have higher priority. Default op modes have priorty == `0`."
     },
     "minOccurrenceDuration": {
      "title": "Min Occurrence Duration [min]",
      "allOf": [
       {
        "$ref": "#/components/schemas/DurationOperationalMode18"
       }
      ],
      "description": "This attribute is a QuantityKind for specifying a duration in **one** of several supported units. Various units are supported but are not to be combined.  For example, `{min: 0.5, s: 30}` is interpreted as `0.5 min` or `30 sec`, not `0.5 min + 30 sec`."
     },
     "maxOccurrenceDuration": {
      "title": "Max Occurrence Duration [min]",
      "allOf": [
       {
        "$ref": "#/components/schemas/DurationOperationalMode20"
       }
      ],
      "description": "This attribute is a QuantityKind for specifying a duration in **one** of several supported units. Various units are supported but are not to be combined.  For example, `{min: 0.5, s: 30}` is interpreted as `0.5 min` or `30 sec`, not `0.5 min + 30 sec`."
     },
     "minTimeBetweenOccurrences": {
      "title": "Min Time Between Occurrences [min]",
      "allOf": [
       {
        "$ref": "#/components/schemas/DurationOperationalMode22"
       }
      ],
      "description": "This attribute is a QuantityKind for specifying a duration in **one** of several supported units. Various units are supported but are not to be combined.  For example, `{min: 0.5, s: 30}` is interpreted as `0.5 min` or `30 sec`, not `0.5 min + 30 sec`."
     },
     "pointingMode": {
      "title": "ID of Associated PointingMode Block",
      "type": "string",
      "description": "Relationship to a single `PointingMode` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "conditions": {
      "title": "IDs of Associated Condition Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Condition` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "compliance": {
      "title": "Condition Compliance",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": false
     },
     "timeSinceActive": {
      "title": "Time Since Last Active",
      "allOf": [
       {
        "$ref": "#/components/schemas/DurationOperationalMode31"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>This attribute is a QuantityKind for specifying a duration in **one** of several supported units. Various units are supported but are not to be combined.  For example, `{min: 0.5, s: 30}` is interpreted as `0.5 min` or `30 sec`, not `0.5 min + 30 sec`.",
      "default": {
       "day": 1000000.0
      }
     },
     "timeSinceInactive": {
      "title": "Time Since Last Inactive",
      "allOf": [
       {
        "$ref": "#/components/schemas/DurationOperationalMode33"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>This attribute is a QuantityKind for specifying a duration in **one** of several supported units. Various units are supported but are not to be combined.  For example, `{min: 0.5, s: 30}` is interpreted as `0.5 min` or `30 sec`, not `0.5 min + 30 sec`.",
      "default": {
       "day": 1000000.0
      }
     },
     "isActive": {
      "title": "Activity Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": false
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "OpticalAttitudeSensor": {
    "title": "OpticalAttitudeSensor",
    "required": [
     "name",
     "oneSigmaCrossAxisError",
     "oneSigmaBoresightAxisError"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ComponentDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "conditions": {
      "title": "IDs of Associated Condition Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Condition` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "fieldOfView": {
      "title": "ID of Associated FieldOfView Block",
      "type": "string",
      "description": "Relationship to a single `FieldOfView` block. Inverse key: `FieldOfView.sensors`. On delete: `restrict` (prevent referenced block from being deleted while relationship to this one exists)."
     },
     "oneSigmaCrossAxisError": {
      "title": "Cross-Axis Angular Error [deg]",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleSensors51"
       }
      ],
      "description": "Standard deviation of the angle between the true and measured attitude directions."
     },
     "oneSigmaBoresightAxisError": {
      "title": "Boresight Angular Error [deg]",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleSensors56"
       }
      ],
      "description": "Standard deviation of the rotational error about the boresight of the sensor."
     },
     "measurement": {
      "title": "Measured Quaternion",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "Orbit": {
    "title": "Orbit",
    "required": [
     "initialStateDefType",
     "initialStateDefParams"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "initialStateDefType": {
      "title": "Initial State Definition Type",
      "allOf": [
       {
        "$ref": "#/components/schemas/InitialStateDefType"
       }
      ],
      "description": "\nThis attribute defines the necessary parameters for `initialStateDefParams`.\n\n- `ORBITAL_ELEMENTS`: Define initial orbit via classical orbital elements\n- `REF_ORBIT`: Define initial orbit via `ReferenceOrbit`. If selected, define one of the following under `initialStateDefParams`:\n    - `IssReferenceOrbit`\n    - `GeostationaryReferenceOrbit`\n    - `GeostationaryTransferReferenceOrbit`\n    - `PolarCircularReferenceOrbit`\n    - `EquatorialCircularReferenceOrbit`\n    - `SunSynchronousCircularOrbit`\n- `ECI_STATE`: Define initial orbit via ECI state\n- `TLE`: Define initial orbit via TLE\n        "
     },
     "initialStateDefParams": {
      "title": "Initial State Definition Parameters",
      "anyOf": [
       {
        "$ref": "#/components/schemas/StateVector"
       },
       {
        "$ref": "#/components/schemas/ClassicalOrbitalElements"
       },
       {
        "$ref": "#/components/schemas/Tle"
       },
       {
        "$ref": "#/components/schemas/IssReferenceOrbit"
       },
       {
        "$ref": "#/components/schemas/GeostationaryReferenceOrbit"
       },
       {
        "$ref": "#/components/schemas/GeostationaryTransferReferenceOrbit"
       },
       {
        "$ref": "#/components/schemas/PolarCircularReferenceOrbit"
       },
       {
        "$ref": "#/components/schemas/EquatorialCircularReferenceOrbit"
       },
       {
        "$ref": "#/components/schemas/SunSynchronousCircularOrbit"
       }
      ],
      "description": "The parameters required for defining the orbit specified by `initialStateDefType`."
     },
     "orbitalElements": {
      "title": "Orbital Elements",
      "allOf": [
       {
        "$ref": "#/components/schemas/OrbitalElementsData"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "period": {
      "title": "Orbital Period [Days]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "semiLatusRectum": {
      "title": "Semi-Latus Rectum [km]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "radiusPerigee": {
      "title": "Radius of Perigee [km]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "shadow": {
      "title": "In Shadow Status",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True indicates that the vehicle is currently in shadow.",
      "default": false
     },
     "beta": {
      "title": "Beta Angle",
      "maximum": 1.5707963267948966,
      "minimum": -1.5707963267948966,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "magneticFieldVector": {
      "title": "Magnetic Field Vector",
      "allOf": [
       {
        "$ref": "#/components/schemas/FrameVectorBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "atmosphericDensity": {
      "title": "Atmospheric Density [kg/m\u00b3]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>This value is set dynamically given Agent `position`.",
      "default": 0.0
     },
     "lst": {
      "title": "Local Sidereal Time [rad]",
      "maximum": 360.0,
      "minimum": -360.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "OrbitalElementsData": {
    "title": "OrbitalElementsData",
    "type": "object",
    "properties": {
     "a": {
      "title": "Semimajor Axis [km]",
      "type": "number"
     },
     "e": {
      "title": "Eccentricity",
      "type": "number"
     },
     "inc": {
      "title": "Inclination [rad]",
      "type": "number"
     },
     "raan": {
      "title": "RAAN [rad]",
      "type": "number",
      "description": "Right Ascension of the Ascending Node. 0 if the orbit is equatorial."
     },
     "om": {
      "title": "Argument of Periapsis [rad]",
      "type": "number",
      "description": "Argument of periapsis. 0 if the orbit is circular."
     },
     "nu": {
      "title": "True Anomaly [rad]",
      "type": "number",
      "description": "True anomaly. Arugument of latitude if the orbit is circular inclined, true longitude if the orbit is circular equatorial."
     },
     "eAnom": {
      "title": "Eccentric Anomaly [rad]",
      "type": "number"
     },
     "mAnom": {
      "title": "Mean Anomaly [rad]",
      "type": "number"
     }
    }
   },
   "PanelDissipations": {
    "title": "PanelDissipations",
    "required": [
     "total",
     "internalLoads",
     "blockingDiode"
    ],
    "type": "object",
    "properties": {
     "total": {
      "title": "Total",
      "minimum": 0.0,
      "type": "number"
     },
     "internalLoads": {
      "title": "Internalloads",
      "minimum": 0.0,
      "type": "number"
     },
     "blockingDiode": {
      "title": "Blockingdiode",
      "minimum": 0.0,
      "type": "number"
     }
    }
   },
   "PassivePointingMode": {
    "title": "PassivePointingMode",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "odAlgorithm": {
      "title": "ID of Associated OrbitDeterminationAlgorithm Block",
      "type": "string",
      "description": "Relationship to zero or one `OrbitDeterminationAlgorithm` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "adAlgorithm": {
      "title": "ID of Associated AttitudeDeterminationAlgorithm Block",
      "type": "string",
      "description": "Relationship to zero or one `AttitudeDeterminationAlgorithm` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "tcAlgorithm": {
      "title": "ID of Associated ThrustControlAlgorithm Block",
      "type": "string",
      "description": "Relationship to zero or one `ThrustControlAlgorithm` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "reactionWheelCommands": {
      "title": "Reaction Wheel Commands",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "magnetorquerCommands": {
      "title": "Magnetorquer Commands",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "commandedAttitude": {
      "title": "Commanded Attitude Quaternion",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "commandedAngularRates": {
      "title": "Commanded Angular Rate [rad/s]",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "PassiveTransmitInterface": {
    "title": "PassiveTransmitInterface",
    "required": [
     "name",
     "onBitRate",
     "alwaysActive"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "onBitRate": {
      "title": "Maximum Bit Rate [bps]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "alwaysActive": {
      "title": "Always Active Toggle",
      "type": "boolean",
      "description": "Toggles the interface to be always active. If false, interface active status will be dictated by theassociated `OperationalMode`s (via `opModes`)."
     },
     "dataType": {
      "title": "ID of Associated DataType Block",
      "type": "string",
      "description": "Relationship to a single `DataType` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "opModes": {
      "title": "IDs of Associated OperationalMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `OperationalMode` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "source": {
      "title": "ID of Associated Modem Block",
      "type": "string",
      "description": "Relationship to a single `Modem` block. Inverse key: `Modem.dataSinks`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "sink": {
      "title": "ID of Associated Component Block",
      "type": "string",
      "description": "Relationship to zero or one `Component` blocks. Inverse key: `Component.dataSources`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "bitRate": {
      "title": "Bit Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0
     },
     "isActive": {
      "title": "Interface Activity Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this `DataInterface` is active (given `opModes` association), false otherwise.",
      "default": false
     },
     "targetInFov": {
      "title": "One-Way Field of View Access",
      "type": "boolean",
      "description": "True if the target is in the Field of View and not eclipsed by the Earth or moon. Otherwise, false.",
      "default": false
     },
     "linkLatency": {
      "title": "Point to Point Link Latency [s]",
      "type": "number",
      "description": "The link latency is the light time it takes to communicate with the target. This time elapses between the signal being sent and received."
     },
     "linkTarget": {
      "title": "ID of Associated Target Block",
      "type": "string",
      "description": "Relationship to zero or one `Target` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "modem": {
      "title": "ID of Associated Modem Block",
      "type": "string",
      "description": "Relationship to a single `Modem` block. Inverse key: `Modem.externalInterfaces`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "directedEnergyDevice": {
      "title": "ID of Associated DirectedEnergyDevice Block",
      "type": "string",
      "description": "Relationship to a single `DirectedEnergyDevice` block. Inverse key: `DirectedEnergyDevice.externalInterfaces`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "linkTargetGroup": {
      "title": "ID of Associated TargetGroup Block",
      "type": "string",
      "description": "Relationship to zero or one `TargetGroup` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "canLink": {
      "title": "Link Availability Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this `ExternalDataInterface` can link to its `linkTarget`, false otherwise.",
      "default": false
     },
     "activeLinkTarget": {
      "title": "ID of Associated Target Block",
      "type": "string",
      "description": "Relationship to zero or one `Target` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "PerRoundExternalState": {
    "title": "PerRoundExternalState",
    "required": [
     "engineIndex"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "consumed": {
      "title": "Consumed State Variable Query",
      "type": "array",
      "items": {
       "anyOf": [
        {
         "type": "string"
        },
        {
         "type": "object"
        }
       ]
      },
      "default": []
     },
     "produced": {
      "title": "Produced State Variable Query",
      "type": "array",
      "items": {
       "anyOf": [
        {
         "type": "string"
        },
        {
         "type": "object"
        }
       ]
      },
      "default": []
     },
     "engineIndex": {
      "title": "Engine Index",
      "type": "integer",
      "description": "The index of the Engine to interface to.  This defines the `timeStep` at which these values are propagated. `0`: GNC, `1`: C&DH, `2`: Power, `3`: Thermal"
     },
     "agents": {
      "title": "IDs of Associated Agent Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Agent` blocks. Inverse key: `Agent.externalState`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "PidAlgorithm": {
    "title": "PidAlgorithm",
    "required": [
     "name",
     "gainP",
     "gainI",
     "gainD",
     "gainC"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "rate": {
      "title": "Update Rate [Hz]",
      "type": "number",
      "description": "Update rate is not currently implemented but will be supported in a future release."
     },
     "actuators": {
      "title": "IDs of Associated Actuator Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Actuator` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "reactionWheelCommands": {
      "title": "Reaction Wheel Commanded Torques [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "magnetorquerCommands": {
      "title": "Magnetorquer Commanded Torques [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "gainP": {
      "title": "Proportional Gain",
      "minimum": 0.0,
      "type": "number",
      "description": "Weighting applied to multiplicative quaternion error."
     },
     "gainI": {
      "title": "Integral Gain",
      "minimum": 0.0,
      "type": "number",
      "description": "Weighting applied to integratal of the multiplicative quaternion error."
     },
     "gainD": {
      "title": "Derivative Gain",
      "minimum": 0.0,
      "type": "number",
      "description": "Weighting applied to angular rate error."
     },
     "gainC": {
      "title": "Gain C",
      "minimum": 0.0,
      "type": "number",
      "description": "Dictates the strength of the magnetorquer desaturation torques."
     },
     "errorIntegral": {
      "title": "Attitude Error Integral",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "PolarCircularReferenceOrbit": {
    "title": "PolarCircularReferenceOrbit",
    "required": [
     "initialRefOrbit",
     "raan",
     "nu",
     "alt"
    ],
    "type": "object",
    "properties": {
     "initialRefOrbit": {
      "title": "Initialreforbit",
      "enum": [
       "POLAR_CIRC"
      ],
      "type": "string"
     },
     "raan": {
      "title": "RAAN [deg]",
      "maximum": 360.0,
      "minimum": -360.0,
      "type": "number"
     },
     "nu": {
      "title": "Nu [deg]",
      "maximum": 360.0,
      "minimum": -360.0,
      "type": "number"
     },
     "alt": {
      "title": "Altitude [km]",
      "minimum": 100.0,
      "type": "number"
     }
    }
   },
   "PolynomialEphemerisBody": {
    "title": "PolynomialEphemerisBody",
    "enum": [
     "SUN",
     "MOON",
     "EARTH",
     "MERCURY",
     "VENUS",
     "MARS",
     "JUPITER",
     "SATURN",
     "URANUS",
     "NEPTUNE",
     "PLUTO"
    ],
    "description": "An enumeration."
   },
   "PositionBase306": {
    "title": "PositionBase306",
    "type": "object",
    "properties": {
     "llaDeg": {
      "title": "Lladeg",
      "maxItems": 3,
      "minItems": 3,
      "type": "array",
      "items": {
       "type": "number"
      }
     },
     "gcLla": {
      "title": "Gclla",
      "maxItems": 3,
      "minItems": 3,
      "type": "array",
      "items": {
       "type": "number"
      }
     },
     "gcLlaDeg": {
      "title": "Gclladeg",
      "maxItems": 3,
      "minItems": 3,
      "type": "array",
      "items": {
       "type": "number"
      }
     },
     "lla": {
      "title": "Lla",
      "maxItems": 3,
      "minItems": 3,
      "type": "array",
      "items": {
       "type": "number"
      }
     },
     "eci": {
      "title": "Eci",
      "maxItems": 3,
      "minItems": 3,
      "type": "array",
      "items": {
       "type": "number"
      }
     },
     "ecef": {
      "title": "Ecef",
      "maxItems": 3,
      "minItems": 3,
      "type": "array",
      "items": {
       "type": "number"
      }
     }
    },
    "additionalProperties": false
   },
   "PositionSensor": {
    "title": "PositionSensor",
    "required": [
     "name",
     "oneSigmaDistanceError"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ComponentDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "conditions": {
      "title": "IDs of Associated Condition Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Condition` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "fieldOfView": {
      "title": "ID of Associated FieldOfView Block",
      "type": "string",
      "description": "Relationship to zero or one `FieldOfView` blocks. Inverse key: `FieldOfView.sensors`. On delete: `restrict` (prevent referenced block from being deleted while relationship to this one exists)."
     },
     "oneSigmaDistanceError": {
      "title": "Measurement Per-Axis Error [km]",
      "allOf": [
       {
        "$ref": "#/components/schemas/DistanceSensors72"
       }
      ],
      "description": "Standard deviation of the error added to all elements of the measured position."
     },
     "measurement": {
      "title": "Measured Position Vector [km]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "PowerLoad": {
    "title": "PowerLoad",
    "required": [
     "name",
     "epsOutputType",
     "loadDefParams"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "epsOutputType": {
      "title": "Power Supply Bus",
      "allOf": [
       {
        "$ref": "#/components/schemas/EpsOutputTypes"
       }
      ],
      "description": "`CORE_OUTPUT` if connected to the regulated/unregulated Power Processor bus.  `BUS_REGULATOR` if connected to a constant voltage `BusRegulator` output."
     },
     "busRegulator": {
      "title": "ID of Associated BusRegulator Block",
      "type": "string",
      "description": "Relationship to zero or one `BusRegulator` blocks. Inverse key: `BusRegulator.loads`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "powerProcessor": {
      "title": "ID of Associated PowerProcessor Block",
      "type": "string",
      "description": "Relationship to zero or one `PowerProcessor` blocks. Inverse key: `PowerProcessor.loads`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "loadState": {
      "title": "ID of Associated LoadState Block",
      "type": "string",
      "description": "Relationship to a single `LoadState` block. Inverse key: `LoadState.loads`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "powerConsumed": {
      "title": "Current power consumption of the load [W].",
      "type": "number"
     },
     "isActive": {
      "title": "Active status of the load.",
      "type": "boolean"
     },
     "dutyCyclePeriod": {
      "title": "Duty Cycle Period",
      "allOf": [
       {
        "$ref": "#/components/schemas/DurationLoad69"
       }
      ]
     },
     "dutyCyclePercentage": {
      "title": "Duty Cycle Percentage",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number"
     },
     "loadDefParams": {
      "title": "Load Definition Parameters",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConstantPowerParams"
       }
      ]
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "PowerProcessor": {
    "title": "PowerProcessor",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ProcessorDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "topologyParams": {
      "title": "Topology Definition Parameters",
      "anyOf": [
       {
        "$ref": "#/components/schemas/FullyRegDetTopologyParams"
       },
       {
        "$ref": "#/components/schemas/SingleConvHybridTopologyParams"
       },
       {
        "$ref": "#/components/schemas/QuasiRegDetTopologyParams"
       },
       {
        "$ref": "#/components/schemas/TwoConvMpptTopologyParams"
       },
       {
        "$ref": "#/components/schemas/SingleConvMpptTopologyParams"
       }
      ],
      "description": "This field may only be undefined initially.  It is required on first update."
     },
     "loads": {
      "title": "IDs of Associated Load Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Load` blocks. Inverse key: `Load.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dynamicallyLoadedComponents": {
      "title": "IDs of Associated DynamicallyLoadedComponent Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DynamicallyLoadedComponent` blocks. Inverse key: `DynamicallyLoadedComponent.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "battery": {
      "title": "ID of Associated Battery Block",
      "type": "string",
      "description": "Relationship to a single `Battery` block. Inverse key: `Battery.powerProcessor`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "busRegulators": {
      "title": "IDs of Associated BusRegulator Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `BusRegulator` blocks. Inverse key: `BusRegulator.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "solarArrays": {
      "title": "IDs of Associated SolarArray Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `SolarArray` blocks. Inverse key: `SolarArray.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "ProcessorDissipations": {
    "title": "ProcessorDissipations",
    "required": [
     "total",
     "internalLoads",
     "busRegulators",
     "powerController"
    ],
    "type": "object",
    "properties": {
     "total": {
      "title": "Total",
      "minimum": 0.0,
      "type": "number"
     },
     "internalLoads": {
      "title": "Internalloads",
      "minimum": 0.0,
      "type": "number"
     },
     "busRegulators": {
      "title": "Busregulators",
      "minimum": 0.0,
      "type": "number"
     },
     "powerController": {
      "title": "Powercontroller",
      "minimum": 0.0,
      "type": "number"
     }
    }
   },
   "QuasiRegDetPowerProcessor": {
    "title": "QuasiRegDetPowerProcessor",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ProcessorDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "topologyParams": {
      "title": "Topology Definition Parameters",
      "anyOf": [
       {
        "$ref": "#/components/schemas/FullyRegDetTopologyParams"
       },
       {
        "$ref": "#/components/schemas/SingleConvHybridTopologyParams"
       },
       {
        "$ref": "#/components/schemas/QuasiRegDetTopologyParams"
       },
       {
        "$ref": "#/components/schemas/TwoConvMpptTopologyParams"
       },
       {
        "$ref": "#/components/schemas/SingleConvMpptTopologyParams"
       }
      ],
      "description": "This field may only be undefined initially.  It is required on first update."
     },
     "loads": {
      "title": "IDs of Associated Load Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Load` blocks. Inverse key: `Load.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dynamicallyLoadedComponents": {
      "title": "IDs of Associated DynamicallyLoadedComponent Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DynamicallyLoadedComponent` blocks. Inverse key: `DynamicallyLoadedComponent.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "battery": {
      "title": "ID of Associated Battery Block",
      "type": "string",
      "description": "Relationship to a single `Battery` block. Inverse key: `Battery.powerProcessor`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "busRegulators": {
      "title": "IDs of Associated BusRegulator Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `BusRegulator` blocks. Inverse key: `BusRegulator.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "solarArrays": {
      "title": "IDs of Associated SolarArray Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `SolarArray` blocks. Inverse key: `SolarArray.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "QuasiRegDetTopologyParams": {
    "title": "QuasiRegDetTopologyParams",
    "required": [
     "bcrEfficiency",
     "outputPowerRating",
     "chargeDiodeDrop",
     "dischargeDiodeDrop",
     "chargeControllerBusVoltage"
    ],
    "type": "object",
    "properties": {
     "bcrEfficiency": {
      "title": "Battery Charge Regulator (BCR) Efficiency",
      "maximum": 1.0,
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "outputPowerRating": {
      "title": "Output Power Rating [W]",
      "minimum": 0.0,
      "type": "number"
     },
     "chargeDiodeDrop": {
      "title": "Charge Diode Drop [V]",
      "minimum": 0.0,
      "type": "number"
     },
     "dischargeDiodeDrop": {
      "title": "Discharge Diode Drop [V]",
      "minimum": 0.0,
      "type": "number"
     },
     "chargeControllerBusVoltage": {
      "title": "Charge Controller Bus Voltage [V]",
      "minimum": 0.0,
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "QuaternionBase306": {
    "title": "QuaternionBase306",
    "type": "object",
    "properties": {
     "body_ecef": {
      "title": "Body Ecef",
      "maxItems": 4,
      "minItems": 4,
      "type": "array",
      "items": {
       "type": "number"
      }
     },
     "ecef_body": {
      "title": "Ecef Body",
      "maxItems": 4,
      "minItems": 4,
      "type": "array",
      "items": {
       "type": "number"
      }
     },
     "eci_body": {
      "title": "Eci Body",
      "maxItems": 4,
      "minItems": 4,
      "type": "array",
      "items": {
       "type": "number"
      }
     },
     "body_eci": {
      "title": "Body Eci",
      "maxItems": 4,
      "minItems": 4,
      "type": "array",
      "items": {
       "type": "number"
      }
     }
    },
    "additionalProperties": false
   },
   "ReactionWheel": {
    "title": "ReactionWheel",
    "required": [
     "name",
     "inertia",
     "ratedMomentum",
     "ratedTorque",
     "efficiency"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ComponentDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "busRegulator": {
      "title": "ID of Associated BusRegulator Block",
      "type": "string",
      "description": "Relationship to zero or one `BusRegulator` blocks. Inverse key: `BusRegulator.dynamicallyLoadedComponents`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "powerProcessor": {
      "title": "ID of Associated PowerProcessor Block",
      "type": "string",
      "description": "Relationship to zero or one `PowerProcessor` blocks. Inverse key: `PowerProcessor.dynamicallyLoadedComponents`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "isFail": {
      "title": "Isfail",
      "type": "boolean",
      "description": "**Warning:** Use of this field is deprecated.",
      "default": false
     },
     "bodyFrameVector": {
      "title": "ID of Associated BodyFrameVector Block",
      "type": "string",
      "description": "Relationship to a single `BodyFrameVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "torque": {
      "title": "Current Torque [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0.0,
       0.0,
       0.0
      ]
     },
     "maxTorque": {
      "title": "Current Maximum Torque Vector [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "commandedTorqueMagnitude": {
      "title": "Current Commanded Torque [N\u2022m]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "inertia": {
      "title": "Wheel Inertia [kg\u2022m\u00b2]",
      "minimum": 0.0,
      "type": "number"
     },
     "ratedMomentum": {
      "title": "Maximum Stored Momentum [kg\u2022m/s]",
      "minimum": 0.0,
      "type": "number"
     },
     "ratedTorque": {
      "title": "Maximum Torque [N\u2022m]",
      "minimum": 0.0,
      "type": "number"
     },
     "efficiency": {
      "title": "Motor Efficiency",
      "maximum": 1.0,
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "frictionDissipation": {
      "title": "Friction Heat Dissipation [W]",
      "minimum": 0.0,
      "type": "number",
      "default": 0.0
     },
     "momentum": {
      "title": "Wheel Momentum [kg\u2022m/s]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "speed": {
      "title": "Wheel Speed [rad/s]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "torqueMargin": {
      "title": "Torque Margin [%]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "momentumMargin": {
      "title": "Momentum Margin [%]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "ReceiveInterface": {
    "title": "ReceiveInterface",
    "required": [
     "name",
     "onBitRate",
     "alwaysActive"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "onBitRate": {
      "title": "Maximum Bit Rate [bps]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "alwaysActive": {
      "title": "Always Active Toggle",
      "type": "boolean",
      "description": "Toggles the interface to be always active. If false, interface active status will be dictated by theassociated `OperationalMode`s (via `opModes`)."
     },
     "dataType": {
      "title": "ID of Associated DataType Block",
      "type": "string",
      "description": "Relationship to a single `DataType` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "opModes": {
      "title": "IDs of Associated OperationalMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `OperationalMode` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "source": {
      "title": "ID of Associated Component Block",
      "type": "string",
      "description": "Relationship to zero or one `Component` blocks. Inverse key: `Component.dataSinks`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "sink": {
      "title": "ID of Associated Modem Block",
      "type": "string",
      "description": "Relationship to a single `Modem` block. Inverse key: `Modem.dataSources`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "bitRate": {
      "title": "Bit Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0
     },
     "isActive": {
      "title": "Interface Activity Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this `DataInterface` is active (given `opModes` association), false otherwise.",
      "default": false
     },
     "targetInFov": {
      "title": "One-Way Field of View Access",
      "type": "boolean",
      "description": "True if the target is in the Field of View and not eclipsed by the Earth or moon. Otherwise, false.",
      "default": false
     },
     "linkLatency": {
      "title": "Point to Point Link Latency [s]",
      "type": "number",
      "description": "The link latency is the light time it takes to communicate with the target. This time elapses between the signal being sent and received."
     },
     "linkTarget": {
      "title": "ID of Associated Target Block",
      "type": "string",
      "description": "Relationship to zero or one `Target` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "modem": {
      "title": "ID of Associated Modem Block",
      "type": "string",
      "description": "Relationship to a single `Modem` block. Inverse key: `Modem.externalInterfaces`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "directedEnergyDevice": {
      "title": "ID of Associated DirectedEnergyDevice Block",
      "type": "string",
      "description": "Relationship to a single `DirectedEnergyDevice` block. Inverse key: `DirectedEnergyDevice.externalInterfaces`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "linkTargetGroup": {
      "title": "ID of Associated TargetGroup Block",
      "type": "string",
      "description": "Relationship to zero or one `TargetGroup` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "canLink": {
      "title": "Link Availability Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this `ExternalDataInterface` can link to its `linkTarget`, false otherwise.",
      "default": false
     },
     "activeLinkTarget": {
      "title": "ID of Associated Target Block",
      "type": "string",
      "description": "Relationship to zero or one `Target` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "RectangularFieldOfView": {
    "title": "RectangularFieldOfView",
    "required": [
     "name",
     "heightHalfAngle",
     "widthHalfAngle"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "boresightBodyFrameVector": {
      "title": "ID of Associated BodyFrameVector Block",
      "type": "string",
      "description": "Relationship to a single `BodyFrameVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "sensors": {
      "title": "IDs of Associated Sensor Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Sensor` blocks. Inverse key: `Sensor.fieldOfView`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "heightHalfAngle": {
      "title": "Height Half Angle",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleFieldOfView35"
       }
      ]
     },
     "widthHalfAngle": {
      "title": "Width Half Angle",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleFieldOfView36"
       }
      ]
     },
     "heightBodyFrameVector": {
      "title": "ID of Associated BodyFrameVector Block",
      "type": "string",
      "description": "Relationship to a single `BodyFrameVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "RepoCreateReq": {
    "title": "RepoCreateReq",
    "required": [
     "name",
     "workspace",
     "dataType"
    ],
    "type": "object",
    "properties": {
     "name": {
      "title": "Name",
      "maxLength": 64,
      "type": "string"
     },
     "description": {
      "title": "Description",
      "maxLength": 1000,
      "type": "string"
     },
     "workspace": {
      "title": "Workspace",
      "type": "string"
     },
     "dataType": {
      "title": "Datatype",
      "type": "string"
     }
    }
   },
   "RepoImportReq": {
    "title": "RepoImportReq",
    "required": [
     "workspace",
     "file"
    ],
    "type": "object",
    "properties": {
     "workspace": {
      "title": "Workspace",
      "type": "string"
     },
     "file": {
      "title": "File",
      "type": "string",
      "format": "binary"
     }
    }
   },
   "RepoRes": {
    "title": "RepoRes",
    "required": [
     "id",
     "name",
     "workspace",
     "dataType",
     "dateCreated",
     "dateModified",
     "branches"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "integer"
     },
     "name": {
      "title": "Name",
      "maxLength": 64,
      "type": "string"
     },
     "description": {
      "title": "Description",
      "maxLength": 1000,
      "type": "string"
     },
     "workspace": {
      "title": "Workspace",
      "type": "object"
     },
     "dataType": {
      "title": "Datatype",
      "type": "string"
     },
     "dateCreated": {
      "title": "Datecreated",
      "type": "string",
      "format": "date-time"
     },
     "dateModified": {
      "title": "Datemodified",
      "type": "string",
      "format": "date-time"
     },
     "branches": {
      "title": "Branches",
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/BranchRes"
      }
     }
    }
   },
   "RepoUpdateReq": {
    "title": "RepoUpdateReq",
    "required": [
     "name",
     "dataType"
    ],
    "type": "object",
    "properties": {
     "name": {
      "title": "Name",
      "maxLength": 64,
      "type": "string"
     },
     "description": {
      "title": "Description",
      "maxLength": 1000,
      "type": "string"
     },
     "dataType": {
      "title": "Datatype",
      "type": "string"
     }
    }
   },
   "ResistanceLoad": {
    "title": "ResistanceLoad",
    "required": [
     "name",
     "epsOutputType",
     "loadDefParams"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "epsOutputType": {
      "title": "Power Supply Bus",
      "allOf": [
       {
        "$ref": "#/components/schemas/EpsOutputTypes"
       }
      ],
      "description": "`CORE_OUTPUT` if connected to the regulated/unregulated Power Processor bus.  `BUS_REGULATOR` if connected to a constant voltage `BusRegulator` output."
     },
     "busRegulator": {
      "title": "ID of Associated BusRegulator Block",
      "type": "string",
      "description": "Relationship to zero or one `BusRegulator` blocks. Inverse key: `BusRegulator.loads`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "powerProcessor": {
      "title": "ID of Associated PowerProcessor Block",
      "type": "string",
      "description": "Relationship to zero or one `PowerProcessor` blocks. Inverse key: `PowerProcessor.loads`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "loadState": {
      "title": "ID of Associated LoadState Block",
      "type": "string",
      "description": "Relationship to a single `LoadState` block. Inverse key: `LoadState.loads`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "powerConsumed": {
      "title": "Current power consumption of the load [W].",
      "type": "number"
     },
     "isActive": {
      "title": "Active status of the load.",
      "type": "boolean"
     },
     "dutyCyclePeriod": {
      "title": "Duty Cycle Period",
      "allOf": [
       {
        "$ref": "#/components/schemas/DurationLoad69"
       }
      ]
     },
     "dutyCyclePercentage": {
      "title": "Duty Cycle Percentage",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number"
     },
     "loadDefParams": {
      "title": "Load Definition Parameters",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConstantResistanceParams"
       }
      ]
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "SameTargetMultiCondition": {
    "title": "SameTargetMultiCondition",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "terminator": {
      "title": "Termination Condition",
      "type": "boolean",
      "description": "If set to true, the simulation will be terminated when this condition evaluates to true.",
      "default": false
     },
     "compliance": {
      "title": "Compliance Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this condition is compliant, false otherwise."
     },
     "targetGroup": {
      "title": "ID of Associated TargetGroup Block",
      "type": "string",
      "description": "Relationship to a single `TargetGroup` block. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "isFilter": {
      "title": "ID of Associated TargetGroup Block",
      "type": "string",
      "description": "Relationship to zero or one `TargetGroup` blocks. Inverse key: `TargetGroup.filterConditions`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted).\n\nAdditional Details:\nThis relationship is set when the condition filters the related TargetGroup. Otherwise, set to None."
     },
     "targetCompliance": {
      "title": "Target Compliance Status",
      "type": "object",
      "additionalProperties": {
       "type": "boolean"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>A dictionary keyed by `Target` ID where each value is the compliance of the condition for the respective `Target`."
     },
     "conditions": {
      "title": "IDs of Associated Condition Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Condition` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "SatelliteParameters": {
    "title": "SatelliteParameters",
    "enum": [
     "SHADOW",
     "BETA",
     "MEAN_ANOM",
     "TRUE_ANOM",
     "LAT",
     "LON",
     "ALT",
     "LOCAL_SIDEREAL_TIME",
     "BATTERY_SOC"
    ],
    "description": "An enumeration."
   },
   "SatelliteToSatelliteCondition": {
    "title": "SatelliteToSatelliteCondition",
    "required": [
     "name",
     "relationship"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "terminator": {
      "title": "Termination Condition",
      "type": "boolean",
      "description": "If set to true, the simulation will be terminated when this condition evaluates to true.",
      "default": false
     },
     "compliance": {
      "title": "Compliance Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this condition is compliant, false otherwise."
     },
     "relationship": {
      "title": "Relationship",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConditionRelationship"
       }
      ],
      "description": "The relationship to use when comparing the assigned values."
     },
     "paramA": {
      "title": "Parameter A Selection",
      "allOf": [
       {
        "$ref": "#/components/schemas/SatelliteParameters"
       }
      ]
     },
     "paramB": {
      "title": "Parameter B Selection",
      "allOf": [
       {
        "$ref": "#/components/schemas/SatelliteParameters"
       }
      ]
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "SatelliteToScalarCondition": {
    "title": "SatelliteToScalarCondition",
    "required": [
     "name",
     "relationship",
     "scalar",
     "param"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "terminator": {
      "title": "Termination Condition",
      "type": "boolean",
      "description": "If set to true, the simulation will be terminated when this condition evaluates to true.",
      "default": false
     },
     "compliance": {
      "title": "Compliance Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this condition is compliant, false otherwise."
     },
     "relationship": {
      "title": "Relationship",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConditionRelationship"
       }
      ],
      "description": "The relationship to use when comparing the assigned values."
     },
     "scalar": {
      "title": "Constant value to compare to."
     },
     "param": {
      "title": "Parameter Selection",
      "allOf": [
       {
        "$ref": "#/components/schemas/SatelliteParameters"
       }
      ],
      "description": "Choose a satellite parameter to compare to the scalar value. The default units indicated in the description will be used."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "SatelliteToTargetCondition": {
    "title": "SatelliteToTargetCondition",
    "required": [
     "name",
     "relationship",
     "targetParam"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "terminator": {
      "title": "Termination Condition",
      "type": "boolean",
      "description": "If set to true, the simulation will be terminated when this condition evaluates to true.",
      "default": false
     },
     "compliance": {
      "title": "Compliance Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this condition is compliant, false otherwise."
     },
     "relationship": {
      "title": "Relationship",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConditionRelationship"
       }
      ],
      "description": "The relationship to use when comparing the assigned values."
     },
     "satParam": {
      "title": "Satellite Parameter Selection",
      "allOf": [
       {
        "$ref": "#/components/schemas/SatelliteParameters"
       }
      ]
     },
     "targetParam": {
      "title": "Target Parameter Selection",
      "allOf": [
       {
        "$ref": "#/components/schemas/TargetParameters"
       }
      ]
     },
     "targetA": {
      "title": "ID of Associated Target Block",
      "type": "string",
      "description": "Relationship to a single `Target` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "ScenarioTemplate": {
    "title": "ScenarioTemplate",
    "type": "object",
    "properties": {
     "blocks": {
      "title": "Blocks",
      "type": "object",
      "additionalProperties": {
       "type": "object"
      },
      "description": "Object that maps all `Block` `id`'s to respetive `Block`s in the `Metamodel` instance.",
      "default": {}
     },
     "index": {
      "title": "Index",
      "type": "object",
      "additionalProperties": {
       "type": "array",
       "items": {
        "type": "string"
       }
      },
      "description": "Object that maps `Block` class names to subclasses and to `Block` `id`s of the given class."
     },
     "clockConfig": {
      "title": "ID of Associated ClockConfig Block",
      "type": "string",
      "description": "Relationship to zero or one `ClockConfig` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "seed": {
      "title": "Pseudorandomness Seed",
      "type": "integer",
      "description": "This value is used as part of the seed for the random number generators used throughout the simulation for purposes such as simulated error injection. Simulations are deterministic for a given `seed`.",
      "default": 0
     }
    },
    "additionalProperties": false,
    "description": "Class to inherit when creating a `Metamodel`"
   },
   "ScenarioTemplateRes": {
    "title": "ScenarioTemplateRes",
    "type": "object",
    "properties": {
     "blocks": {
      "title": "Blocks",
      "type": "object",
      "additionalProperties": {
       "type": "object"
      },
      "description": "Object that maps all `Block` `id`'s to respetive `Block`s in the `Metamodel` instance.",
      "default": {}
     },
     "index": {
      "title": "Index",
      "type": "object",
      "additionalProperties": {
       "type": "array",
       "items": {
        "type": "string"
       }
      },
      "description": "Object that maps `Block` class names to subclasses and to `Block` `id`s of the given class."
     },
     "clockConfig": {
      "title": "ID of Associated ClockConfig Block",
      "type": "string",
      "description": "Relationship to zero or one `ClockConfig` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "seed": {
      "title": "Pseudorandomness Seed",
      "type": "integer",
      "description": "This value is used as part of the seed for the random number generators used throughout the simulation for purposes such as simulated error injection. Simulations are deterministic for a given `seed`.",
      "default": 0
     },
     "_quantityKinds": {
      "title": " Quantitykinds",
      "type": "object",
      "description": "Object mapping `Block` class names and `root` to the names of `QuantityKind` fields. The field\n    names then map to an object of descriptive information about the field."
     },
     "_relationships": {
      "title": " Relationships",
      "type": "object",
      "description": "Object mapping `Block` class names and `root` to the names of relationship fields. The field\n    names then map to an object of descriptive information about the field."
     },
     "_supers": {
      "title": " Supers",
      "type": "object",
      "description": "Object mapping `Block` class names to a list of names of their direct super classes."
     },
     "_blockNames": {
      "title": " Blocknames",
      "type": "array",
      "items": {},
      "description": "Names of all valid `Block`s for this `Metamodel` class"
     }
    },
    "additionalProperties": false,
    "description": "Class for ScenarioTemplate with meta attributes"
   },
   "ScenarioTemplateRoot": {
    "title": "ScenarioTemplateRoot",
    "type": "object",
    "properties": {
     "clockConfig": {
      "title": "ID of Associated ClockConfig Block",
      "type": "string",
      "description": "Relationship to zero or one `ClockConfig` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "seed": {
      "title": "Pseudorandomness Seed",
      "type": "integer",
      "description": "This value is used as part of the seed for the random number generators used throughout the simulation for purposes such as simulated error injection. Simulations are deterministic for a given `seed`.",
      "default": 0
     }
    },
    "additionalProperties": false,
    "description": "Scenario Root Attributes"
   },
   "ScenarioTemplateUpdateInterface": {
    "title": "ScenarioTemplateUpdateInterface",
    "required": [
     "root",
     "blocks",
     "delete"
    ],
    "type": "object",
    "properties": {
     "root": {
      "$ref": "#/components/schemas/ScenarioTemplateRoot"
     },
     "blocks": {
      "title": "Blocks",
      "type": "array",
      "items": {
       "anyOf": [
        {
         "$ref": "#/components/schemas/PerRoundExternalState"
        },
        {
         "$ref": "#/components/schemas/SpontaneousExternalState"
        },
        {
         "$ref": "#/components/schemas/ClockConfig"
        },
        {
         "$ref": "#/components/schemas/AgentGroup"
        },
        {
         "$ref": "#/components/schemas/Orbit"
        },
        {
         "$ref": "#/components/schemas/Agent"
        }
       ]
      }
     },
     "delete": {
      "title": "Delete",
      "type": "array",
      "items": {
       "type": "string"
      }
     }
    }
   },
   "SideCategories": {
    "title": "SideCategories",
    "enum": [
     "COMPONENT",
     "SURFACE",
     "COOLER"
    ],
    "description": "An enumeration."
   },
   "SimulationJob": {
    "title": "SimulationJob",
    "required": [
     "id",
     "status",
     "bedRef",
     "dataArray",
     "startTime",
     "stopTime"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "ID",
      "type": "string"
     },
     "status": {
      "title": "Simulation Status",
      "allOf": [
       {
        "$ref": "#/components/schemas/Statuses"
       }
      ],
      "description": "This value is used to determine the current state of the simulation, including its status upon exit."
     },
     "bedRef": {
      "title": "Simulation Bed Reference",
      "type": "string",
      "description": "A unique identifier for the Simulation Bed head node."
     },
     "dataArray": {
      "title": "Data Identifier",
      "type": "string",
      "description": "A unique identifier for the Data Service array that stores all of this simulation's data streams."
     },
     "startTime": {
      "title": "Simulation Start Time [MJD]",
      "type": "number"
     },
     "stopTime": {
      "title": "Simulation Stop Time [MJD]",
      "type": "number"
     },
     "realTime": {
      "title": "Real Time Flag",
      "type": "boolean",
      "description": "Coming soon.",
      "default": false
     },
     "progress": {
      "title": "Simulation Progress",
      "type": "object",
      "description": "This property is missing when simulation status is unknown."
     }
    }
   },
   "SingleConvHybridPowerProcessor": {
    "title": "SingleConvHybridPowerProcessor",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "availableSolarRootPower": {
      "title": "Available Solar Root Power [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "solarRootPower": {
      "title": "Solar Root Power [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ProcessorDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "topologyParams": {
      "title": "Topology Definition Parameters",
      "anyOf": [
       {
        "$ref": "#/components/schemas/FullyRegDetTopologyParams"
       },
       {
        "$ref": "#/components/schemas/SingleConvHybridTopologyParams"
       },
       {
        "$ref": "#/components/schemas/QuasiRegDetTopologyParams"
       },
       {
        "$ref": "#/components/schemas/TwoConvMpptTopologyParams"
       },
       {
        "$ref": "#/components/schemas/SingleConvMpptTopologyParams"
       }
      ],
      "description": "This field may only be undefined initially.  It is required on first update."
     },
     "loads": {
      "title": "IDs of Associated Load Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Load` blocks. Inverse key: `Load.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dynamicallyLoadedComponents": {
      "title": "IDs of Associated DynamicallyLoadedComponent Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DynamicallyLoadedComponent` blocks. Inverse key: `DynamicallyLoadedComponent.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "battery": {
      "title": "ID of Associated Battery Block",
      "type": "string",
      "description": "Relationship to a single `Battery` block. Inverse key: `Battery.powerProcessor`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "busRegulators": {
      "title": "IDs of Associated BusRegulator Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `BusRegulator` blocks. Inverse key: `BusRegulator.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "solarArrays": {
      "title": "IDs of Associated SolarArray Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `SolarArray` blocks. Inverse key: `SolarArray.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "SingleConvHybridTopologyParams": {
    "title": "SingleConvHybridTopologyParams",
    "required": [
     "bcrEfficiency",
     "outputPowerRating",
     "bypassBlockingDiodeDrop"
    ],
    "type": "object",
    "properties": {
     "bcrEfficiency": {
      "title": "Battery Charge Regulator (BCR) Efficiency",
      "maximum": 1.0,
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "outputPowerRating": {
      "title": "Output Power Rating [W]",
      "minimum": 0.0,
      "type": "number"
     },
     "bypassBlockingDiodeDrop": {
      "title": "Bypass Blocking Diode Drop [V]",
      "minimum": 0.0,
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "SingleConvMpptPowerProcessor": {
    "title": "SingleConvMpptPowerProcessor",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "availableSolarRootPower": {
      "title": "Available Solar Root Power [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "solarRootPower": {
      "title": "Solar Root Power [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ProcessorDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "topologyParams": {
      "title": "Topology Definition Parameters",
      "anyOf": [
       {
        "$ref": "#/components/schemas/FullyRegDetTopologyParams"
       },
       {
        "$ref": "#/components/schemas/SingleConvHybridTopologyParams"
       },
       {
        "$ref": "#/components/schemas/QuasiRegDetTopologyParams"
       },
       {
        "$ref": "#/components/schemas/TwoConvMpptTopologyParams"
       },
       {
        "$ref": "#/components/schemas/SingleConvMpptTopologyParams"
       }
      ],
      "description": "This field may only be undefined initially.  It is required on first update."
     },
     "loads": {
      "title": "IDs of Associated Load Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Load` blocks. Inverse key: `Load.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dynamicallyLoadedComponents": {
      "title": "IDs of Associated DynamicallyLoadedComponent Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DynamicallyLoadedComponent` blocks. Inverse key: `DynamicallyLoadedComponent.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "battery": {
      "title": "ID of Associated Battery Block",
      "type": "string",
      "description": "Relationship to a single `Battery` block. Inverse key: `Battery.powerProcessor`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "busRegulators": {
      "title": "IDs of Associated BusRegulator Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `BusRegulator` blocks. Inverse key: `BusRegulator.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "solarArrays": {
      "title": "IDs of Associated SolarArray Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `SolarArray` blocks. Inverse key: `SolarArray.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "SingleConvMpptTopologyParams": {
    "title": "SingleConvMpptTopologyParams",
    "required": [
     "bcrEfficiency",
     "outputPowerRating"
    ],
    "type": "object",
    "properties": {
     "bcrEfficiency": {
      "title": "Battery Charge Regulator (BCR) Efficiency",
      "maximum": 1.0,
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "outputPowerRating": {
      "title": "Output Power Rating [W]",
      "minimum": 0.0,
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "SlidingModeAlgorithm": {
    "title": "SlidingModeAlgorithm",
    "required": [
     "name",
     "gainK",
     "gainG",
     "gainC",
     "epsilon"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "rate": {
      "title": "Update Rate [Hz]",
      "type": "number",
      "description": "Update rate is not currently implemented but will be supported in a future release."
     },
     "actuators": {
      "title": "IDs of Associated Actuator Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Actuator` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "reactionWheelCommands": {
      "title": "Reaction Wheel Commanded Torques [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "magnetorquerCommands": {
      "title": "Magnetorquer Commanded Torques [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "gainK": {
      "title": "Gain K",
      "exclusiveMinimum": 0.0,
      "type": "number",
      "description": "Alters the relative weighting between angular rate error."
     },
     "gainG": {
      "title": "Gain G",
      "exclusiveMinimum": 0.0,
      "type": "number",
      "description": "Scales the overall speed of convergence."
     },
     "gainC": {
      "title": "Gain C",
      "exclusiveMinimum": 0.0,
      "type": "number",
      "description": "Dictates the strength of the magnetorquer desaturation torques."
     },
     "epsilon": {
      "title": "Epsilon",
      "exclusiveMinimum": 0.0,
      "type": "number",
      "description": "The sliding mode boundary layer. Higher values may produce more error, but less chattering."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "SolarArray": {
    "title": "SolarArray",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "powerProcessor": {
      "title": "ID of Associated PowerProcessor Block",
      "type": "string",
      "description": "Relationship to a single `PowerProcessor` block. Inverse key: `PowerProcessor.solarArrays`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "panels": {
      "title": "IDs of Associated SolarPanel Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `SolarPanel` blocks. Inverse key: `SolarPanel.array`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerCommand": {
      "title": "Processor-Commanded Power Parameters",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0,
       null
      ]
     },
     "idealOpenCircuitVoltage": {
      "title": "Open circuit voltage [V] based on VOC of the panels.",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "idealShortCircuitCurrent": {
      "title": "Short-circuit current [A] based on that of the panels.",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "current": {
      "title": "Array operating current [A]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "voltage": {
      "title": "Array operating voltage [V].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "maxPower": {
      "title": "Max panel power [W] at the given illumination.",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "maxPowerVoltage": {
      "title": "Max array voltage [V] at the given illumination.",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "maxPowerCurrent": {
      "title": "Max array current [A] at the given illumination.",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "openCircuitVoltage": {
      "title": "Left-shifted open circuit voltage [V] at given illumination.",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "power": {
      "title": "Overall operating solar panel power [W].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "utilization": {
      "title": "Array utilization.",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "SolarCell": {
    "title": "SolarCell",
    "required": [
     "openCircuitVoltage",
     "shortCircuitCurrent",
     "maxPowerVoltage",
     "maxPowerCurrent",
     "numJunctions"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "openCircuitVoltage": {
      "title": "Open Circuit Voltage [V]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "shortCircuitCurrent": {
      "title": "Short Circuit Current [A]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "maxPowerVoltage": {
      "title": "Max Power Voltage [V]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "maxPowerCurrent": {
      "title": "Max Power Current [A]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "numJunctions": {
      "title": "# of Junctions",
      "minimum": 1.0,
      "type": "integer"
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "SolarPanel": {
    "title": "SolarPanel",
    "required": [
     "name",
     "numSeries",
     "numParallel",
     "blockingDiodeDrop"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/PanelDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "numSeries": {
      "title": "# of Series Cells",
      "minimum": 1.0,
      "type": "integer"
     },
     "numParallel": {
      "title": "# of Parallel Cells",
      "minimum": 1.0,
      "type": "integer"
     },
     "blockingDiodeDrop": {
      "title": "Blocking Diode Drop [V]",
      "minimum": 0.0,
      "type": "number",
      "description": "Set to 0 to omit diode."
     },
     "cell": {
      "title": "ID of Associated SolarCell Block",
      "type": "string",
      "description": "Relationship to a single `SolarCell` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "surface": {
      "title": "ID of Associated Surface Block",
      "type": "string",
      "description": "Relationship to a single `Surface` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "array": {
      "title": "ID of Associated SolarArray Block",
      "type": "string",
      "description": "Relationship to zero or one `SolarArray` blocks. Inverse key: `SolarArray.panels`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "idealMaxPowerVoltage": {
      "title": "Ideal voltage at maximum power point [V].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "idealMaxPowerCurrent": {
      "title": "Current at maximum power point [A].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "idealOpenCircuitVoltage": {
      "title": "Open circuit voltage based on VOC of the cells [V].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "idealShortCircuitCurrent": {
      "title": "Short-circuit current based on that of the cells [A].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "equivSeriesResistance": {
      "title": "Series resistance of equivalent circuit model [ohms].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "equivShuntResistance": {
      "title": "Shunt resistance of equivalent circuit model [ohms].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "equivDarkCurrent": {
      "title": "Dark saturation current of equivalent circuit model [A].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "equivLightCurrent": {
      "title": "Light (photovoltaic) current of equivalent circuit model [A].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "current": {
      "title": "Panel operating current [A]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "voltage": {
      "title": "Panel operating voltage [V].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "maxPower": {
      "title": "Max panel power at the given illumination [W].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "maxPowerVoltage": {
      "title": "Max panel voltage at the given illumination [V].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "maxPowerCurrent": {
      "title": "Max panel current at the given illumination [A].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "openCircuitVoltage": {
      "title": "Left-shifted open circuit voltage at given illumination [V].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "power": {
      "title": "Overall operating power [W].",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "utilization": {
      "title": "Panel utilization.",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "SpaceTarget": {
    "title": "SpaceTarget",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "agentId": {
      "title": "Agentid",
      "type": "string",
      "description": "**For internal use only**"
     },
     "position": {
      "title": "Position",
      "allOf": [
       {
        "$ref": "#/components/schemas/PositionBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "range": {
      "title": "Range to Agent [km]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "lineOfSight": {
      "title": "Line of Sight Between Target and Agent",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True if the line of sight to the target is not eclipsed by the Earth or moon."
     },
     "relativePosition": {
      "title": "Relative Position [km, km, km]",
      "maxItems": 3,
      "minItems": 3,
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "targetAzimuth": {
      "title": "Azimuth from Agent to Target",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "targetElevation": {
      "title": "Elevation from Agent to Target",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "lat": {
      "title": "Latitude",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "lon": {
      "title": "Longitude",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "alt": {
      "title": "Altitude",
      "allOf": [
       {
        "$ref": "#/components/schemas/DistanceBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "shadow": {
      "title": "In Shadow Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True indicates that the Target is currently in shadow."
     },
     "lst": {
      "title": "Local Sidereal Time",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "agentAzimuth": {
      "title": "Azimuth from Target to Agent",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "agentElevation": {
      "title": "Elevation from Target to Agent",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "beta": {
      "title": "Beta Angle",
      "allOf": [
       {
        "$ref": "#/components/schemas/AngleBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "SphericalAngles": {
    "title": "SphericalAngles",
    "required": [
     "theta",
     "phi"
    ],
    "type": "object",
    "properties": {
     "theta": {
      "title": "Theta [deg]",
      "maximum": 360.0,
      "minimum": -360.0,
      "type": "number"
     },
     "phi": {
      "title": "Phi [deg]",
      "maximum": 360.0,
      "minimum": -360.0,
      "type": "number"
     }
    }
   },
   "SphericalFuelTank": {
    "title": "SphericalFuelTank",
    "required": [
     "name",
     "capacity",
     "priority",
     "location",
     "wetMass",
     "diameter"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ComponentDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "capacity": {
      "title": "Tank Capacity [kg]",
      "minimum": 0.0,
      "type": "number"
     },
     "priority": {
      "title": "Tank Priority",
      "type": "integer",
      "description": "Fuel is drawn from higher priority (greater value) tanks first. Tanks with identical priorities are drained in parallel."
     },
     "location": {
      "title": "Tank Location [Vector3[m]]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "Tank location relative to the origin of the spacecraft body frame."
     },
     "reservoir": {
      "title": "ID of Associated FuelReservoir Block",
      "type": "string",
      "description": "Relationship to a single `FuelReservoir` block. Inverse key: `FuelReservoir.fuelTanks`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "wetMass": {
      "title": "Current Fuel Mass [kg]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "flowRate": {
      "title": "Current Flow Rate [kg/s]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "inertia": {
      "title": "Current Inertia Matrix [kg\u2022m^2]",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>Inertia matrix assuming homogeneous distribution of current fuel."
     },
     "diameter": {
      "title": "Tank Diameter [m]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "SpherocylinderFuelTank": {
    "title": "SpherocylinderFuelTank",
    "required": [
     "name",
     "capacity",
     "priority",
     "location",
     "wetMass",
     "capDiameter",
     "cylinderLength"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ComponentDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "capacity": {
      "title": "Tank Capacity [kg]",
      "minimum": 0.0,
      "type": "number"
     },
     "priority": {
      "title": "Tank Priority",
      "type": "integer",
      "description": "Fuel is drawn from higher priority (greater value) tanks first. Tanks with identical priorities are drained in parallel."
     },
     "location": {
      "title": "Tank Location [Vector3[m]]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "Tank location relative to the origin of the spacecraft body frame."
     },
     "reservoir": {
      "title": "ID of Associated FuelReservoir Block",
      "type": "string",
      "description": "Relationship to a single `FuelReservoir` block. Inverse key: `FuelReservoir.fuelTanks`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "wetMass": {
      "title": "Current Fuel Mass [kg]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "flowRate": {
      "title": "Current Flow Rate [kg/s]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "inertia": {
      "title": "Current Inertia Matrix [kg\u2022m^2]",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>Inertia matrix assuming homogeneous distribution of current fuel."
     },
     "capDiameter": {
      "title": "Tank Diameter [m]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "cylinderLength": {
      "title": "Tank Length [m]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "orientationVector": {
      "title": "ID of Associated BodyFrameVector Block",
      "type": "string",
      "description": "Relationship to a single `BodyFrameVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted).\n\nAdditional Details:\nThis vector defines the longitudinal axis of the cylindrical portion of the tank relative to the spacecraft body frame. It is used in conjunction with `location` to fully locate and orient the tank."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "SpontaneousExternalState": {
    "title": "SpontaneousExternalState",
    "required": [
     "engineIndex"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "consumed": {
      "title": "Consumed State Variable Query",
      "type": "array",
      "items": {
       "anyOf": [
        {
         "type": "string"
        },
        {
         "type": "object"
        }
       ]
      },
      "default": []
     },
     "produced": {
      "title": "Produced State Variable Query",
      "type": "array",
      "items": {
       "anyOf": [
        {
         "type": "string"
        },
        {
         "type": "object"
        }
       ]
      },
      "default": []
     },
     "engineIndex": {
      "title": "Engine Index",
      "type": "integer",
      "description": "The index of the Engine to interface to.  This defines the `timeStep` at which these values are propagated. `0`: GNC, `1`: C&DH, `2`: Power, `3`: Thermal"
     },
     "agents": {
      "title": "IDs of Associated Agent Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Agent` blocks. Inverse key: `Agent.externalState`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "StateVector": {
    "title": "StateVector",
    "required": [
     "stateEci"
    ],
    "type": "object",
    "properties": {
     "stateEci": {
      "title": "ECI State Vector [km, km, km, km/s, km/s, km/s]",
      "type": "array",
      "items": {
       "type": "number"
      }
     }
    }
   },
   "StaticThrustControlAlgorithm": {
    "title": "StaticThrustControlAlgorithm",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "rate": {
      "title": "Update Rate [Hz]",
      "type": "number",
      "description": "Update rate is not currently implemented but will be supported in a future release."
     },
     "thrusters": {
      "title": "IDs of Associated Thruster Blocks",
      "type": "object",
      "description": "Relationship with data to one or more `Thruster` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": {}
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "Statuses": {
    "title": "Statuses",
    "enum": [
     "PENDING",
     "RUNNING",
     "PAUSED",
     "TERMINATED",
     "FAILED",
     "SUCCEEDED",
     "ERROR"
    ],
    "description": "An enumeration."
   },
   "Subsystem": {
    "title": "Subsystem",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "category": {
      "allOf": [
       {
        "$ref": "#/components/schemas/Categories"
       }
      ],
      "default": "CUSTOM"
     },
     "components": {
      "title": "IDs of Associated Component Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Component` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/BaseDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "SunSynchronousCircularOrbit": {
    "title": "SunSynchronousCircularOrbit",
    "required": [
     "initialRefOrbit",
     "mltAscNode",
     "nu",
     "alt"
    ],
    "type": "object",
    "properties": {
     "initialRefOrbit": {
      "title": "Initialreforbit",
      "enum": [
       "SUN_SYNC_CIRC"
      ],
      "type": "string"
     },
     "mltAscNode": {
      "title": "Mean Local Time of the Ascending Node [day]",
      "type": "number"
     },
     "nu": {
      "title": "Nu [deg]",
      "maximum": 360.0,
      "minimum": -360.0,
      "type": "number"
     },
     "alt": {
      "title": "Altitude [km]",
      "minimum": 100.0,
      "type": "number"
     }
    }
   },
   "SunTrackingSurface": {
    "title": "SunTrackingSurface",
    "required": [
     "name",
     "area",
     "surfaceCentroid"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "area": {
      "title": "Area [m^2]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "surfaceCentroid": {
      "title": "Centroid [Vector3[m]]"
     },
     "bodyFrameVector": {
      "title": "ID of Associated BodyFrameVector Block",
      "type": "string",
      "description": "Relationship to a single `BodyFrameVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "surfaceMaterial": {
      "title": "ID of Associated SurfaceMaterial Block",
      "type": "string",
      "description": "Relationship to a single `SurfaceMaterial` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "geocenterAngle": {
      "title": "Geocenter Angle [rad]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "earthAlbedoViewFactor": {
      "title": "Earth Albedo View Factor [%]",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "earthIrViewFactor": {
      "title": "Earth IR View Factor [%]",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "solarViewFactor": {
      "title": "Solar View Factor [%]",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "surfaceNormalVector": {
      "title": "Surface Normal Vector",
      "allOf": [
       {
        "$ref": "#/components/schemas/FrameVectorBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "sat2Sun": {
      "title": "Sat to Sun Relative Vector [km]",
      "allOf": [
       {
        "$ref": "#/components/schemas/FrameVectorBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "earthIrHeatFlowRate": {
      "title": "Earth Infrared Heat Flow Rate [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "earthAlbedoHeatFlowRate": {
      "title": "Earth Albedo Heat Flow Rate [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "solarHeatFlowRate": {
      "title": "Solar Heat Flow Rate [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "spaceHeatFlowRate": {
      "title": "Space Heat Flow Rate [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "heatFlowRate": {
      "title": "Heat Flow Rate [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "antiTrack": {
      "title": "Set this option true if you want the surface to minimize alignment with the tracked vector. For example, the back side of a sun tracking solar panel.",
      "type": "boolean",
      "default": false
     },
     "refVector1": {
      "title": "Surface Plane Vector 1",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "refVector2": {
      "title": "Surface Plane Vector 2",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "vectorProjection": {
      "title": "Surface Plane Vector Projection",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "articulationAngle": {
      "title": "Articulation Angle [rad]",
      "maximum": 360.0,
      "minimum": -360.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "SurfaceMaterial": {
    "title": "SurfaceMaterial",
    "required": [
     "irEmissivity",
     "solarAbsorptivity",
     "diffuseSolarReflectivity",
     "specularSolarReflectivity"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "irEmissivity": {
      "title": "IR Emissivity [%]",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number"
     },
     "solarAbsorptivity": {
      "title": "Solar Absorptance [%]",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number"
     },
     "diffuseSolarReflectivity": {
      "title": "Diffuse Solar Reflectance [%]",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number"
     },
     "specularSolarReflectivity": {
      "title": "Specular Solar Reflectance [%]",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number"
     },
     "hotTempRating": {
      "title": "Maximum Rated Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Rated Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "TargetGroup": {
    "title": "TargetGroup",
    "required": [
     "name",
     "targetType"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "targetType": {
      "title": "Target Type",
      "allOf": [
       {
        "$ref": "#/components/schemas/Types"
       }
      ],
      "description": "The type of targets grouped by this Target Group."
     },
     "targetAssociations": {
      "title": "IDs of Associated Target Blocks",
      "type": "object",
      "description": "Relationship with data to one or more `Target` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": {}
     },
     "targets": {
      "title": "IDs of Associated Target Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Target` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "filterConditions": {
      "title": "IDs of Associated TargetGroupCondition Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `TargetGroupCondition` blocks. Inverse key: `TargetGroupCondition.isFilter`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "activeTarget": {
      "title": "ID of Associated Target Block",
      "type": "string",
      "description": "Relationship to zero or one `Target` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "TargetGroupInFovCondition": {
    "title": "TargetGroupInFovCondition",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "terminator": {
      "title": "Termination Condition",
      "type": "boolean",
      "description": "If set to true, the simulation will be terminated when this condition evaluates to true.",
      "default": false
     },
     "compliance": {
      "title": "Compliance Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this condition is compliant, false otherwise."
     },
     "targetGroup": {
      "title": "ID of Associated TargetGroup Block",
      "type": "string",
      "description": "Relationship to a single `TargetGroup` block. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "isFilter": {
      "title": "ID of Associated TargetGroup Block",
      "type": "string",
      "description": "Relationship to zero or one `TargetGroup` blocks. Inverse key: `TargetGroup.filterConditions`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted).\n\nAdditional Details:\nThis relationship is set when the condition filters the related TargetGroup. Otherwise, set to None."
     },
     "targetCompliance": {
      "title": "Target Compliance Status",
      "type": "object",
      "additionalProperties": {
       "type": "boolean"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>A dictionary keyed by `Target` ID where each value is the compliance of the condition for the respective `Target`."
     },
     "fieldOfView": {
      "title": "ID of Associated FieldOfView Block",
      "type": "string",
      "description": "Relationship to a single `FieldOfView` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "countValue": {
      "title": "Count Value",
      "type": "integer",
      "description": "Number of `Target`s in the `FieldOfView` to compare to.",
      "default": 1
     },
     "countRelationship": {
      "title": "Count Relationship",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConditionRelationship"
       }
      ],
      "description": "Used to compare the number of `Target`s in the associated `FieldOfView` to the `countValue`.",
      "default": "GREATER_EQUAL"
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "TargetGroupToSatelliteCondition": {
    "title": "TargetGroupToSatelliteCondition",
    "required": [
     "name",
     "relationship",
     "tgParam"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "terminator": {
      "title": "Termination Condition",
      "type": "boolean",
      "description": "If set to true, the simulation will be terminated when this condition evaluates to true.",
      "default": false
     },
     "compliance": {
      "title": "Compliance Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this condition is compliant, false otherwise."
     },
     "relationship": {
      "title": "Relationship",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConditionRelationship"
       }
      ],
      "description": "The relationship to use when comparing the assigned values."
     },
     "targetGroup": {
      "title": "ID of Associated TargetGroup Block",
      "type": "string",
      "description": "Relationship to a single `TargetGroup` block. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "isFilter": {
      "title": "ID of Associated TargetGroup Block",
      "type": "string",
      "description": "Relationship to zero or one `TargetGroup` blocks. Inverse key: `TargetGroup.filterConditions`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted).\n\nAdditional Details:\nThis relationship is set when the condition filters the related TargetGroup. Otherwise, set to None."
     },
     "targetCompliance": {
      "title": "Target Compliance Status",
      "type": "object",
      "additionalProperties": {
       "type": "boolean"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>A dictionary keyed by `Target` ID where each value is the compliance of the condition for the respective `Target`."
     },
     "countRelationship": {
      "title": "Count Relationship",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConditionRelationship"
       }
      ],
      "description": "Set if `groupRoller` == `COUNT` to define the way to compare number of compliant targets to the `countValue`."
     },
     "countValue": {
      "title": "Count Value",
      "type": "integer",
      "description": "Set if `groupRoller` == `COUNT` as a number to which to compare the number of compliant targets."
     },
     "tgParam": {
      "title": "Parameter selection.",
      "allOf": [
       {
        "$ref": "#/components/schemas/TargetParameters"
       }
      ]
     },
     "groupRoller": {
      "title": "Group Roller Selection",
      "allOf": [
       {
        "$ref": "#/components/schemas/GroupRollers"
       }
      ],
      "description": "The method to use to combine the target values into a single compliance.",
      "default": "ANY"
     },
     "satParam": {
      "title": "Satellite Parameter Selection",
      "allOf": [
       {
        "$ref": "#/components/schemas/SatelliteParameters"
       }
      ]
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "TargetGroupToScalarCondition": {
    "title": "TargetGroupToScalarCondition",
    "required": [
     "name",
     "relationship",
     "scalar",
     "tgParam"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "terminator": {
      "title": "Termination Condition",
      "type": "boolean",
      "description": "If set to true, the simulation will be terminated when this condition evaluates to true.",
      "default": false
     },
     "compliance": {
      "title": "Compliance Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this condition is compliant, false otherwise."
     },
     "relationship": {
      "title": "Relationship",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConditionRelationship"
       }
      ],
      "description": "The relationship to use when comparing the assigned values."
     },
     "scalar": {
      "title": "Constant value to compare to."
     },
     "targetGroup": {
      "title": "ID of Associated TargetGroup Block",
      "type": "string",
      "description": "Relationship to a single `TargetGroup` block. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "isFilter": {
      "title": "ID of Associated TargetGroup Block",
      "type": "string",
      "description": "Relationship to zero or one `TargetGroup` blocks. Inverse key: `TargetGroup.filterConditions`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted).\n\nAdditional Details:\nThis relationship is set when the condition filters the related TargetGroup. Otherwise, set to None."
     },
     "targetCompliance": {
      "title": "Target Compliance Status",
      "type": "object",
      "additionalProperties": {
       "type": "boolean"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>A dictionary keyed by `Target` ID where each value is the compliance of the condition for the respective `Target`."
     },
     "countRelationship": {
      "title": "Count Relationship",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConditionRelationship"
       }
      ],
      "description": "Set if `groupRoller` == `COUNT` to define the way to compare number of compliant targets to the `countValue`."
     },
     "countValue": {
      "title": "Count Value",
      "type": "integer",
      "description": "Set if `groupRoller` == `COUNT` as a number to which to compare the number of compliant targets."
     },
     "tgParam": {
      "title": "Parameter selection.",
      "allOf": [
       {
        "$ref": "#/components/schemas/TargetParameters"
       }
      ]
     },
     "groupRoller": {
      "title": "Group Roller Selection",
      "allOf": [
       {
        "$ref": "#/components/schemas/GroupRollers"
       }
      ],
      "description": "The method to use to combine the target values into a single compliance.",
      "default": "ANY"
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "TargetGroupToTargetCondition": {
    "title": "TargetGroupToTargetCondition",
    "required": [
     "name",
     "relationship",
     "tgParam",
     "targetParam"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "terminator": {
      "title": "Termination Condition",
      "type": "boolean",
      "description": "If set to true, the simulation will be terminated when this condition evaluates to true.",
      "default": false
     },
     "compliance": {
      "title": "Compliance Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this condition is compliant, false otherwise."
     },
     "relationship": {
      "title": "Relationship",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConditionRelationship"
       }
      ],
      "description": "The relationship to use when comparing the assigned values."
     },
     "targetGroup": {
      "title": "ID of Associated TargetGroup Block",
      "type": "string",
      "description": "Relationship to a single `TargetGroup` block. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "isFilter": {
      "title": "ID of Associated TargetGroup Block",
      "type": "string",
      "description": "Relationship to zero or one `TargetGroup` blocks. Inverse key: `TargetGroup.filterConditions`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted).\n\nAdditional Details:\nThis relationship is set when the condition filters the related TargetGroup. Otherwise, set to None."
     },
     "targetCompliance": {
      "title": "Target Compliance Status",
      "type": "object",
      "additionalProperties": {
       "type": "boolean"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>A dictionary keyed by `Target` ID where each value is the compliance of the condition for the respective `Target`."
     },
     "countRelationship": {
      "title": "Count Relationship",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConditionRelationship"
       }
      ],
      "description": "Set if `groupRoller` == `COUNT` to define the way to compare number of compliant targets to the `countValue`."
     },
     "countValue": {
      "title": "Count Value",
      "type": "integer",
      "description": "Set if `groupRoller` == `COUNT` as a number to which to compare the number of compliant targets."
     },
     "tgParam": {
      "title": "Parameter selection.",
      "allOf": [
       {
        "$ref": "#/components/schemas/TargetParameters"
       }
      ]
     },
     "groupRoller": {
      "title": "Group Roller Selection",
      "allOf": [
       {
        "$ref": "#/components/schemas/GroupRollers"
       }
      ],
      "description": "The method to use to combine the target values into a single compliance.",
      "default": "ANY"
     },
     "targetParam": {
      "title": "Target Parameter Selection",
      "allOf": [
       {
        "$ref": "#/components/schemas/TargetParameters"
       }
      ]
     },
     "targetA": {
      "title": "ID of Associated Target Block",
      "type": "string",
      "description": "Relationship to a single `Target` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "TargetGroupVector": {
    "title": "TargetGroupVector",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "type": "string"
     },
     "truth": {
      "title": "Truth Vector",
      "allOf": [
       {
        "$ref": "#/components/schemas/FrameVectorBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "estimate": {
      "title": "Estimated Vector",
      "allOf": [
       {
        "$ref": "#/components/schemas/FrameVectorBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "eclipsed": {
      "title": "Eclipsed Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": false
     },
     "targetGroup": {
      "title": "ID of Associated TargetGroup Block",
      "type": "string",
      "description": "Relationship to a single `TargetGroup` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "TargetInFovCondition": {
    "title": "TargetInFovCondition",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "terminator": {
      "title": "Termination Condition",
      "type": "boolean",
      "description": "If set to true, the simulation will be terminated when this condition evaluates to true.",
      "default": false
     },
     "compliance": {
      "title": "Compliance Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this condition is compliant, false otherwise."
     },
     "fieldOfView": {
      "title": "ID of Associated FieldOfView Block",
      "type": "string",
      "description": "Relationship to a single `FieldOfView` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "negate": {
      "title": "Negate the condition so that it is True if the Target is outside of the Field of View or eclipsed by the Earth or moon.",
      "type": "boolean",
      "default": false
     },
     "targetA": {
      "title": "ID of Associated Target Block",
      "type": "string",
      "description": "Relationship to a single `Target` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted).\n\nAdditional Details:\nThe condition will be compliant if this Target is in the field of view and not eclipsed by the Earth or moon."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "TargetParameters": {
    "title": "TargetParameters",
    "enum": [
     "SHADOW",
     "BETA",
     "MEAN_ANOM",
     "TRUE_ANOM",
     "LAT",
     "LON",
     "ALT",
     "LO_SIGHT",
     "RANGE",
     "SOLAR_AZ",
     "SOLAR_EL",
     "SAT_AZ",
     "SAT_EL",
     "LOCAL_SIDEREAL_TIME"
    ],
    "description": "An enumeration."
   },
   "TargetToScalarCondition": {
    "title": "TargetToScalarCondition",
    "required": [
     "name",
     "relationship",
     "scalar",
     "targetParam"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "terminator": {
      "title": "Termination Condition",
      "type": "boolean",
      "description": "If set to true, the simulation will be terminated when this condition evaluates to true.",
      "default": false
     },
     "compliance": {
      "title": "Compliance Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this condition is compliant, false otherwise."
     },
     "relationship": {
      "title": "Relationship",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConditionRelationship"
       }
      ],
      "description": "The relationship to use when comparing the assigned values."
     },
     "scalar": {
      "title": "Constant value to compare to."
     },
     "targetParam": {
      "title": "Parameter Selection",
      "allOf": [
       {
        "$ref": "#/components/schemas/TargetParameters"
       }
      ],
      "description": "Choose a target parameter to compare to the scalar value. The default units indicated in the description will be used."
     },
     "targetA": {
      "title": "ID of Associated Target Block",
      "type": "string",
      "description": "Relationship to a single `Target` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "TargetToTargetCondition": {
    "title": "TargetToTargetCondition",
    "required": [
     "name",
     "relationship",
     "targetAParam",
     "targetBParam"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "terminator": {
      "title": "Termination Condition",
      "type": "boolean",
      "description": "If set to true, the simulation will be terminated when this condition evaluates to true.",
      "default": false
     },
     "compliance": {
      "title": "Compliance Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this condition is compliant, false otherwise."
     },
     "relationship": {
      "title": "Relationship",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConditionRelationship"
       }
      ],
      "description": "The relationship to use when comparing the assigned values."
     },
     "targetAParam": {
      "title": "Target Parameter A Selection",
      "allOf": [
       {
        "$ref": "#/components/schemas/TargetParameters"
       }
      ]
     },
     "targetBParam": {
      "title": "Target Parameter B Selection",
      "allOf": [
       {
        "$ref": "#/components/schemas/TargetParameters"
       }
      ]
     },
     "targetA": {
      "title": "ID of Associated Target Block",
      "type": "string",
      "description": "Relationship to a single `Target` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "targetB": {
      "title": "ID of Associated Target Block",
      "type": "string",
      "description": "Relationship to a single `Target` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "TargetVector": {
    "title": "TargetVector",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "type": "string"
     },
     "truth": {
      "title": "Truth Vector",
      "allOf": [
       {
        "$ref": "#/components/schemas/FrameVectorBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "estimate": {
      "title": "Estimated Vector",
      "allOf": [
       {
        "$ref": "#/components/schemas/FrameVectorBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "eclipsed": {
      "title": "Eclipsed Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": false
     },
     "referenceTarget": {
      "title": "ID of Associated Target Block",
      "type": "string",
      "description": "Relationship to a single `Target` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "TempControllerState": {
    "title": "TempControllerState",
    "required": [
     "name",
     "constantTemperature"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "constantTemperature": {
      "title": "Temperature Set Point [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ]
     },
     "tempController": {
      "title": "ID of Associated TempController Block",
      "type": "string",
      "description": "Relationship to a single `TempController` block. Inverse key: `TempController.tempControllerStates`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "operationalModes": {
      "title": "IDs of Associated OperationalMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `OperationalMode` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "active": {
      "title": "Controller Active Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this `TempControllerState` is active (given `operationalModes` association), false otherwise.",
      "default": false
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "TemperatureBase306": {
    "title": "TemperatureBase306",
    "type": "object",
    "properties": {
     "degF": {
      "title": "Degf",
      "type": "number"
     },
     "degC": {
      "title": "Degc",
      "type": "number"
     },
     "degK": {
      "title": "Degk",
      "minimum": 0.0,
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "TemplateCrudRes": {
    "title": "TemplateCrudRes",
    "required": [
     "crud",
     "branch"
    ],
    "type": "object",
    "properties": {
     "crud": {
      "$ref": "#/components/schemas/CrudRes"
     },
     "branch": {
      "$ref": "#/components/schemas/BranchRes"
     }
    }
   },
   "ThermalInterface": {
    "title": "ThermalInterface",
    "required": [
     "name",
     "sideA",
     "sideB"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "type": "string"
     },
     "area": {
      "title": "Interface Area [m\u00b2]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "sideA": {
      "title": "Side A Item Category",
      "allOf": [
       {
        "$ref": "#/components/schemas/SideCategories"
       }
      ],
      "description": "\nIf value is:\n- `COMPONENT`: `componentA` must be defined\n- `SURFACE`: `surfaceA` must be defined\n- `COOLER`: `coolerA` must be defined\n        "
     },
     "sideB": {
      "title": "Side B Item Category",
      "allOf": [
       {
        "$ref": "#/components/schemas/SideCategories"
       }
      ],
      "description": "\nIf value is:\n- `COMPONENT`: `componentB` must be defined\n- `SURFACE`: `surfaceB` must be defined\n- `COOLER`: `coolerB` must be defined\n        "
     },
     "material": {
      "title": "ID of Associated ThermalInterfaceMaterial Block",
      "type": "string",
      "description": "Relationship to zero or one `ThermalInterfaceMaterial` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "componentA": {
      "title": "ID of Associated Component Block",
      "type": "string",
      "description": "Relationship to zero or one `Component` blocks. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "componentB": {
      "title": "ID of Associated Component Block",
      "type": "string",
      "description": "Relationship to zero or one `Component` blocks. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "surfaceA": {
      "title": "ID of Associated Surface Block",
      "type": "string",
      "description": "Relationship to zero or one `Surface` blocks. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "surfaceB": {
      "title": "ID of Associated Surface Block",
      "type": "string",
      "description": "Relationship to zero or one `Surface` blocks. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "coolerA": {
      "title": "ID of Associated Cooler Block",
      "type": "string",
      "description": "Relationship to zero or one `Cooler` blocks. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "coolerB": {
      "title": "ID of Associated Cooler Block",
      "type": "string",
      "description": "Relationship to zero or one `Cooler` blocks. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "resistance": {
      "title": "Thermal Resistance [K/W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "tempDelta": {
      "title": "Temperature Delta [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "heatFlowRate": {
      "title": "Heat Flow Rate [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "hotTemp": {
      "title": "Hot Side Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldTemp": {
      "title": "Cold Side Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "Maximum Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Minimum Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "ThermalInterfaceMaterial": {
    "title": "ThermalInterfaceMaterial",
    "required": [
     "name",
     "resistivity",
     "thickness",
     "hotTempRating",
     "coldTempRating"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "resistivity": {
      "title": "Thermal Resistivity [K\u2022m/W]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "thickness": {
      "title": "Interface Thickness [m]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "hotTempRating": {
      "title": "Maximum Rated Interface Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ]
     },
     "coldTempRating": {
      "title": "Minimum Rated Interface Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ]
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "Thruster": {
    "title": "Thruster",
    "required": [
     "name",
     "isp",
     "minThrust",
     "maxThrust",
     "location"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ComponentDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "busRegulator": {
      "title": "ID of Associated BusRegulator Block",
      "type": "string",
      "description": "Relationship to zero or one `BusRegulator` blocks. Inverse key: `BusRegulator.dynamicallyLoadedComponents`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "powerProcessor": {
      "title": "ID of Associated PowerProcessor Block",
      "type": "string",
      "description": "Relationship to zero or one `PowerProcessor` blocks. Inverse key: `PowerProcessor.dynamicallyLoadedComponents`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "isFail": {
      "title": "Isfail",
      "type": "boolean",
      "description": "**Warning:** Use of this field is deprecated.",
      "default": false
     },
     "isp": {
      "title": "Specific Impulse [s]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "minThrust": {
      "title": "Minimum Thrust [N]",
      "minimum": 0.0,
      "type": "number"
     },
     "maxThrust": {
      "title": "Maximum Thrust [N]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "location": {
      "title": "Thruster Location [m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "Location relative to the origin of the spacecraft body frame."
     },
     "orientation": {
      "title": "ID of Associated BodyFrameVector Block",
      "type": "string",
      "description": "Relationship to a single `BodyFrameVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "fuelReservoir": {
      "title": "ID of Associated FuelReservoir Block",
      "type": "string",
      "description": "Relationship to a single `FuelReservoir` block. Inverse key: `FuelReservoir.thrusters`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "thrust": {
      "title": "Thrust [N]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "TimeCondition": {
    "title": "TimeCondition",
    "required": [
     "name",
     "relationship",
     "scalar"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "terminator": {
      "title": "Termination Condition",
      "type": "boolean",
      "description": "If set to true, the simulation will be terminated when this condition evaluates to true.",
      "default": false
     },
     "compliance": {
      "title": "Compliance Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this condition is compliant, false otherwise."
     },
     "relationship": {
      "title": "Relationship",
      "allOf": [
       {
        "$ref": "#/components/schemas/ConditionRelationship"
       }
      ],
      "description": "The relationship to use when comparing the assigned values."
     },
     "scalar": {
      "title": "Constant value to compare to."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "Tle": {
    "title": "Tle",
    "required": [
     "tle"
    ],
    "type": "object",
    "properties": {
     "tle": {
      "title": "TLE",
      "type": "string"
     }
    }
   },
   "TriadAlgorithm": {
    "title": "TriadAlgorithm",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "rate": {
      "title": "Update Rate [Hz]",
      "type": "number",
      "description": "Update rate is not currently implemented but will be supported in a future release."
     },
     "attitudeSolution": {
      "title": "Attitude Solution Quaternion",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "angularVelocitySolution": {
      "title": "Angular Velocity Solution [rad/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "vectorSensors": {
      "title": "IDs of Associated Sensor Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Sensor` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "angularVelocitySensors": {
      "title": "IDs of Associated AngularVelocitySensor Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `AngularVelocitySensor` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "TwoConvMpptPowerProcessor": {
    "title": "TwoConvMpptPowerProcessor",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "availableSolarRootPower": {
      "title": "Available Solar Root Power [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "solarRootPower": {
      "title": "Solar Root Power [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ProcessorDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "topologyParams": {
      "title": "Topology Definition Parameters",
      "anyOf": [
       {
        "$ref": "#/components/schemas/FullyRegDetTopologyParams"
       },
       {
        "$ref": "#/components/schemas/SingleConvHybridTopologyParams"
       },
       {
        "$ref": "#/components/schemas/QuasiRegDetTopologyParams"
       },
       {
        "$ref": "#/components/schemas/TwoConvMpptTopologyParams"
       },
       {
        "$ref": "#/components/schemas/SingleConvMpptTopologyParams"
       }
      ],
      "description": "This field may only be undefined initially.  It is required on first update."
     },
     "loads": {
      "title": "IDs of Associated Load Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Load` blocks. Inverse key: `Load.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dynamicallyLoadedComponents": {
      "title": "IDs of Associated DynamicallyLoadedComponent Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DynamicallyLoadedComponent` blocks. Inverse key: `DynamicallyLoadedComponent.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "battery": {
      "title": "ID of Associated Battery Block",
      "type": "string",
      "description": "Relationship to a single `Battery` block. Inverse key: `Battery.powerProcessor`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "busRegulators": {
      "title": "IDs of Associated BusRegulator Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `BusRegulator` blocks. Inverse key: `BusRegulator.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "solarArrays": {
      "title": "IDs of Associated SolarArray Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `SolarArray` blocks. Inverse key: `SolarArray.powerProcessor`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "TwoConvMpptTopologyParams": {
    "title": "TwoConvMpptTopologyParams",
    "required": [
     "bcrEfficiency",
     "outputPowerRating",
     "dischargeDiodeDrop",
     "chargeControllerBusVoltage",
     "pptEfficiency"
    ],
    "type": "object",
    "properties": {
     "bcrEfficiency": {
      "title": "Battery Charge Regulator (BCR) Efficiency",
      "maximum": 1.0,
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "outputPowerRating": {
      "title": "Output Power Rating [W]",
      "minimum": 0.0,
      "type": "number"
     },
     "dischargeDiodeDrop": {
      "title": "Discharge Diode Drop [V]",
      "minimum": 0.0,
      "type": "number"
     },
     "chargeControllerBusVoltage": {
      "title": "Charge Controller Bus Voltage [V]",
      "minimum": 0.0,
      "type": "number"
     },
     "pptEfficiency": {
      "title": "Peak Power Tracking (PPT) Converter Efficiency",
      "maximum": 1.0,
      "exclusiveMinimum": 0.0,
      "type": "number"
     }
    },
    "additionalProperties": false
   },
   "Types": {
    "title": "Types",
    "enum": [
     "SpaceTarget",
     "CelestialTarget",
     "GroundTarget"
    ],
    "description": "An enumeration."
   },
   "ValidationError": {
    "title": "ValidationError",
    "required": [
     "loc",
     "msg",
     "type"
    ],
    "type": "object",
    "properties": {
     "loc": {
      "title": "Location",
      "type": "array",
      "items": {
       "anyOf": [
        {
         "type": "string"
        },
        {
         "type": "integer"
        }
       ]
      }
     },
     "msg": {
      "title": "Message",
      "type": "string"
     },
     "type": {
      "title": "Error Type",
      "type": "string"
     }
    }
   },
   "Vector": {
    "title": "Vector",
    "required": [
     "vector"
    ],
    "type": "object",
    "properties": {
     "vector": {
      "title": "Vector",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "This vector is normalized to derive `unitVector`."
     }
    }
   },
   "VectorInFovCondition": {
    "title": "VectorInFovCondition",
    "required": [
     "name"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "terminator": {
      "title": "Termination Condition",
      "type": "boolean",
      "description": "If set to true, the simulation will be terminated when this condition evaluates to true.",
      "default": false
     },
     "compliance": {
      "title": "Compliance Status",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>True when this condition is compliant, false otherwise."
     },
     "fieldOfView": {
      "title": "ID of Associated FieldOfView Block",
      "type": "string",
      "description": "Relationship to a single `FieldOfView` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "negate": {
      "title": "Negate the condition so that it is compliant if the vector lies outside of the Field of View.",
      "type": "boolean",
      "default": false
     },
     "referenceVector": {
      "title": "ID of Associated ReferenceVector Block",
      "type": "string",
      "description": "Relationship to a single `ReferenceVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted).\n\nAdditional Details:\nThe condition will be compliant if this vector lies within the Field of View. This does not check for eclipsing. (See TargetInFovCondition, which does.)"
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "VectorSensor": {
    "title": "VectorSensor",
    "required": [
     "name",
     "oneSigmaPerAxisError"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "partNumber": {
      "title": "Part Number",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "manufacturer": {
      "title": "Manufacturer",
      "maxLength": 32,
      "type": "string",
      "default": ""
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "hotTempRating": {
      "title": "Maximum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": 100.0
      }
     },
     "coldTempRating": {
      "title": "Minimum Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "default": {
       "degC": -40.0
      }
     },
     "thermalCapacitance": {
      "title": "Thermal Capacitance [J/K]",
      "minimum": 0.0,
      "type": "number",
      "default": 1000
     },
     "cotsTemplate": {
      "title": "COTS Template Name",
      "maxLength": 64,
      "type": "string",
      "description": "Read-only",
      "default": ""
     },
     "subsystem": {
      "title": "ID of Associated Subsystem Block",
      "type": "string",
      "description": "Relationship to a single `Subsystem` block. Inverse key: `Subsystem.components`. On delete: `cascade` (delete this block when referenced block is deleted)."
     },
     "loadStates": {
      "title": "IDs of Associated LoadState Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `LoadState` blocks. Inverse key: `LoadState.component`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSinks": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.source`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataSources": {
      "title": "IDs of Associated DataInterface Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataInterface` blocks. Inverse key: `DataInterface.sink`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "dataStorage": {
      "title": "ID of Associated DataStorage Block",
      "type": "string",
      "description": "Relationship to zero or one `DataStorage` blocks. Inverse key: `DataStorage.component`. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dataModes": {
      "title": "IDs of Associated DataMode Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `DataMode` blocks. Inverse key: `DataMode.components`. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "powerConsumed": {
      "title": "Power Consumption",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "dissipations": {
      "title": "Power Dissipation Breakdown",
      "allOf": [
       {
        "$ref": "#/components/schemas/ComponentDissipations"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "storage": {
      "title": "Data Usage Breakdown",
      "type": "object",
      "additionalProperties": {
       "type": "object",
       "additionalProperties": {
        "minimum": 0.0,
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "readRate": {
      "title": "Data Storage Read Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "writeRate": {
      "title": "Data Storage Write Rate [bps]",
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "conditions": {
      "title": "IDs of Associated Condition Blocks",
      "type": "array",
      "items": {},
      "description": "Relationship to one or more `Condition` blocks. On delete: `set-none` (remove ID of referenced block from this relationship field).",
      "default": []
     },
     "fieldOfView": {
      "title": "ID of Associated FieldOfView Block",
      "type": "string",
      "description": "Relationship to zero or one `FieldOfView` blocks. Inverse key: `FieldOfView.sensors`. On delete: `restrict` (prevent referenced block from being deleted while relationship to this one exists)."
     },
     "oneSigmaPerAxisError": {
      "title": "Measurment Per-Axis Error",
      "minimum": 0.0,
      "type": "number",
      "description": "Standard deviation of normally-distributed noise added to all elements of the measured vector."
     },
     "referenceVector": {
      "title": "ID of Associated ReferenceVector Block",
      "type": "string",
      "description": "Relationship to a single `ReferenceVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "measurement": {
      "title": "Measurement Vector",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "VectorTrackingSurface": {
    "title": "VectorTrackingSurface",
    "required": [
     "name",
     "area",
     "surfaceCentroid"
    ],
    "type": "object",
    "properties": {
     "id": {
      "title": "Id",
      "type": "string"
     },
     "name": {
      "title": "Name",
      "maxLength": 100,
      "type": "string"
     },
     "area": {
      "title": "Area [m^2]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "surfaceCentroid": {
      "title": "Centroid [Vector3[m]]"
     },
     "bodyFrameVector": {
      "title": "ID of Associated BodyFrameVector Block",
      "type": "string",
      "description": "Relationship to a single `BodyFrameVector` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "surfaceMaterial": {
      "title": "ID of Associated SurfaceMaterial Block",
      "type": "string",
      "description": "Relationship to a single `SurfaceMaterial` block. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "geocenterAngle": {
      "title": "Geocenter Angle [rad]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "earthAlbedoViewFactor": {
      "title": "Earth Albedo View Factor [%]",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "earthIrViewFactor": {
      "title": "Earth IR View Factor [%]",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "solarViewFactor": {
      "title": "Solar View Factor [%]",
      "maximum": 1.0,
      "minimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "surfaceNormalVector": {
      "title": "Surface Normal Vector",
      "allOf": [
       {
        "$ref": "#/components/schemas/FrameVectorBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "sat2Sun": {
      "title": "Sat to Sun Relative Vector [km]",
      "allOf": [
       {
        "$ref": "#/components/schemas/FrameVectorBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "earthIrHeatFlowRate": {
      "title": "Earth Infrared Heat Flow Rate [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "earthAlbedoHeatFlowRate": {
      "title": "Earth Albedo Heat Flow Rate [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "solarHeatFlowRate": {
      "title": "Solar Heat Flow Rate [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "spaceHeatFlowRate": {
      "title": "Space Heat Flow Rate [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "heatFlowRate": {
      "title": "Heat Flow Rate [W]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "temperature": {
      "title": "Temperature [C]",
      "allOf": [
       {
        "$ref": "#/components/schemas/TemperatureBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "degC": 20.0
      }
     },
     "hotMargin": {
      "title": "High Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "coldMargin": {
      "title": "Low Temperature Margin [C]",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "antiTrack": {
      "title": "Set this option true if you want the surface to minimize alignment with the tracked vector. For example, the back side of a sun tracking solar panel.",
      "type": "boolean",
      "default": false
     },
     "refVector1": {
      "title": "Surface Plane Vector 1",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "refVector2": {
      "title": "Surface Plane Vector 2",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "vectorProjection": {
      "title": "Surface Plane Vector Projection",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "articulationAngle": {
      "title": "Articulation Angle [rad]",
      "maximum": 360.0,
      "minimum": -360.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": 0.0
     },
     "trackedVector": {
      "title": "ID of Associated ReferenceVector Block",
      "type": "string",
      "description": "Relationship to zero or one `ReferenceVector` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     }
    },
    "additionalProperties": false,
    "description": "Class to be used internally and inherited by `Metamodel` and `Block`. Adds helper methods and properties."
   },
   "VehicleTemplate": {
    "title": "VehicleTemplate",
    "required": [
     "cadKey",
     "cadSignedUrl",
     "cadScaleFactor",
     "mass",
     "inertia"
    ],
    "type": "object",
    "properties": {
     "blocks": {
      "title": "Blocks",
      "type": "object",
      "additionalProperties": {
       "type": "object"
      },
      "description": "Object that maps all `Block` `id`'s to respetive `Block`s in the `Metamodel` instance.",
      "default": {}
     },
     "index": {
      "title": "Index",
      "type": "object",
      "additionalProperties": {
       "type": "array",
       "items": {
        "type": "string"
       }
      },
      "description": "Object that maps `Block` class names to subclasses and to `Block` `id`s of the given class."
     },
     "cadFileName": {
      "title": "Vehicle CAD Model Filename",
      "maxLength": 100,
      "type": "string",
      "default": ""
     },
     "cadKey": {
      "title": "Vehicle CAD Model Key",
      "maxLength": 48,
      "type": "string"
     },
     "cadSignedUrl": {
      "title": "Vehicle CAD Model URL",
      "maxLength": 1024,
      "type": "string"
     },
     "cadScaleFactor": {
      "title": "Vehicle CAD Model Scale Factor",
      "exclusiveMaximum": 100000000.0,
      "exclusiveMinimum": 0.0,
      "type": "number",
      "description": "A normalizing factor that scales the model such that its largest bounding dimension is `1`."
     },
     "enabledModules": {
      "title": "Enabled Simulation Modules",
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "Enable/disable specific simulation modules. GNC and CDH must always be enabled.",
      "default": [
       "GNC",
       "CDH",
       "Power",
       "Thermal"
      ]
     },
     "mass": {
      "title": "Dry Mass [kg]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "inertia": {
      "title": "Inertia Matrix [Matrix3[kg-m^2]]",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      }
     },
     "missionOrbit": {
      "title": "ID of Associated Orbit Block",
      "type": "string",
      "description": "Relationship to zero or one `Orbit` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "activeOpMode": {
      "title": "ID of Associated OperationalMode Block",
      "type": "string",
      "description": "Relationship to zero or one `OperationalMode` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "powerProcessor": {
      "title": "ID of Associated PowerProcessor Block",
      "type": "string",
      "description": "Relationship to zero or one `PowerProcessor` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dynamicMass": {
      "title": "Dynamic Mass [kg]",
      "exclusiveMinimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "dynamicInertia": {
      "title": "Dynamic Inertia Matrix [Matrix3[kg-m^2]]",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "position": {
      "title": "Agent Position",
      "allOf": [
       {
        "$ref": "#/components/schemas/PositionBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>This value is set based on the `Orbit` associated to this `Agent` in a `Scenario`."
     },
     "velocity": {
      "title": "Agent Velocity",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>This value is set based on the `Orbit` associated to this `Agent` in a `Scenario`."
     },
     "attitude": {
      "title": "Attitude Quaternion",
      "allOf": [
       {
        "$ref": "#/components/schemas/QuaternionBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "body_eci": [
        0.0,
        0.0,
        0.0,
        1.0
       ]
      }
     },
     "angularVelocity": {
      "title": "Angular Velocity [rad/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0.0,
       0.0,
       0.0
      ]
     },
     "torque": {
      "title": "Total Torque [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0.0,
       0.0,
       0.0
      ]
     },
     "srpTorque": {
      "title": "SRP Torque [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0.0,
       0.0,
       0.0
      ]
     },
     "dragTorque": {
      "title": "Drag Torque [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0.0,
       0.0,
       0.0
      ]
     },
     "gravityGradientTorque": {
      "title": "Gravity Gradient Torque [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0.0,
       0.0,
       0.0
      ]
     },
     "positionSolution": {
      "title": "Active Position Solution [m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "positionSolutionError": {
      "title": "Active Position Solution Error [m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "positionCovariance": {
      "title": "Active Position Solution Covariance",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "velocitySolution": {
      "title": "Active Velocity Solution [km/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "velocitySolutionError": {
      "title": "Active Velocity Solution Error [km/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "velocityCovariance": {
      "title": "Active Velocity Solution Error [km/s]",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "attitudeSolution": {
      "title": "Attitude Solution Quaternion",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "attitudeSolutionError": {
      "title": "Attitude Error YPR [rad]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "angularVelocitySolution": {
      "title": "Angular Velocity Solution [rad/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "angularVelocitySolutionError": {
      "title": "Angular Velocity Error [rad/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "commandedAttitude": {
      "title": "Commanded Attitude Quaternion",
      "type": "array",
      "items": {
       "type": "number"
      }
     },
     "commandedAngularRates": {
      "title": "Commanded Angular Velocity [rad/s]",
      "type": "array",
      "items": {
       "type": "number"
      }
     },
     "lvlhAxes": {
      "title": "LVLH Axes",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "enuAxes": {
      "title": "ENU Axes",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "beta": {
      "title": "Beta Angle",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "orbitalElements": {
      "title": "Orbital Elements",
      "allOf": [
       {
        "$ref": "#/components/schemas/OrbitalElementsData"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "shadow": {
      "title": "Eclipse State",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "activeCommInterfaces": {
      "title": "Active Data Handling Interfaces",
      "type": "array",
      "items": {
       "type": "array",
       "items": {
        "anyOf": [
         {
          "type": "boolean"
         },
         {
          "type": "string"
         },
         {
          "type": "integer"
         }
        ]
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>List of currently active interfaces on this Agent. Each entry contains a tuple of `transmitStatus`, `agentId`, `bitRate`, and `canLink`.",
      "default": []
     },
     "selfId": {
      "title": "Self ID",
      "type": "string",
      "description": "**This field is for internal use only**"
     }
    },
    "additionalProperties": false,
    "description": "Class to inherit when creating a `Metamodel`"
   },
   "VehicleTemplateRes": {
    "title": "VehicleTemplateRes",
    "required": [
     "cadKey",
     "cadSignedUrl",
     "cadScaleFactor",
     "mass",
     "inertia"
    ],
    "type": "object",
    "properties": {
     "blocks": {
      "title": "Blocks",
      "type": "object",
      "additionalProperties": {
       "type": "object"
      },
      "description": "Object that maps all `Block` `id`'s to respetive `Block`s in the `Metamodel` instance.",
      "default": {}
     },
     "index": {
      "title": "Index",
      "type": "object",
      "additionalProperties": {
       "type": "array",
       "items": {
        "type": "string"
       }
      },
      "description": "Object that maps `Block` class names to subclasses and to `Block` `id`s of the given class."
     },
     "cadFileName": {
      "title": "Vehicle CAD Model Filename",
      "maxLength": 100,
      "type": "string",
      "default": ""
     },
     "cadKey": {
      "title": "Vehicle CAD Model Key",
      "maxLength": 48,
      "type": "string"
     },
     "cadSignedUrl": {
      "title": "Vehicle CAD Model URL",
      "maxLength": 1024,
      "type": "string"
     },
     "cadScaleFactor": {
      "title": "Vehicle CAD Model Scale Factor",
      "exclusiveMaximum": 100000000.0,
      "exclusiveMinimum": 0.0,
      "type": "number",
      "description": "A normalizing factor that scales the model such that its largest bounding dimension is `1`."
     },
     "enabledModules": {
      "title": "Enabled Simulation Modules",
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "Enable/disable specific simulation modules. GNC and CDH must always be enabled.",
      "default": [
       "GNC",
       "CDH",
       "Power",
       "Thermal"
      ]
     },
     "mass": {
      "title": "Dry Mass [kg]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "inertia": {
      "title": "Inertia Matrix [Matrix3[kg-m^2]]",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      }
     },
     "missionOrbit": {
      "title": "ID of Associated Orbit Block",
      "type": "string",
      "description": "Relationship to zero or one `Orbit` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "activeOpMode": {
      "title": "ID of Associated OperationalMode Block",
      "type": "string",
      "description": "Relationship to zero or one `OperationalMode` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "powerProcessor": {
      "title": "ID of Associated PowerProcessor Block",
      "type": "string",
      "description": "Relationship to zero or one `PowerProcessor` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dynamicMass": {
      "title": "Dynamic Mass [kg]",
      "exclusiveMinimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "dynamicInertia": {
      "title": "Dynamic Inertia Matrix [Matrix3[kg-m^2]]",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "position": {
      "title": "Agent Position",
      "allOf": [
       {
        "$ref": "#/components/schemas/PositionBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>This value is set based on the `Orbit` associated to this `Agent` in a `Scenario`."
     },
     "velocity": {
      "title": "Agent Velocity",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>This value is set based on the `Orbit` associated to this `Agent` in a `Scenario`."
     },
     "attitude": {
      "title": "Attitude Quaternion",
      "allOf": [
       {
        "$ref": "#/components/schemas/QuaternionBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "body_eci": [
        0.0,
        0.0,
        0.0,
        1.0
       ]
      }
     },
     "angularVelocity": {
      "title": "Angular Velocity [rad/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0.0,
       0.0,
       0.0
      ]
     },
     "torque": {
      "title": "Total Torque [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0.0,
       0.0,
       0.0
      ]
     },
     "srpTorque": {
      "title": "SRP Torque [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0.0,
       0.0,
       0.0
      ]
     },
     "dragTorque": {
      "title": "Drag Torque [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0.0,
       0.0,
       0.0
      ]
     },
     "gravityGradientTorque": {
      "title": "Gravity Gradient Torque [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0.0,
       0.0,
       0.0
      ]
     },
     "positionSolution": {
      "title": "Active Position Solution [m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "positionSolutionError": {
      "title": "Active Position Solution Error [m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "positionCovariance": {
      "title": "Active Position Solution Covariance",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "velocitySolution": {
      "title": "Active Velocity Solution [km/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "velocitySolutionError": {
      "title": "Active Velocity Solution Error [km/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "velocityCovariance": {
      "title": "Active Velocity Solution Error [km/s]",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "attitudeSolution": {
      "title": "Attitude Solution Quaternion",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "attitudeSolutionError": {
      "title": "Attitude Error YPR [rad]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "angularVelocitySolution": {
      "title": "Angular Velocity Solution [rad/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "angularVelocitySolutionError": {
      "title": "Angular Velocity Error [rad/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "commandedAttitude": {
      "title": "Commanded Attitude Quaternion",
      "type": "array",
      "items": {
       "type": "number"
      }
     },
     "commandedAngularRates": {
      "title": "Commanded Angular Velocity [rad/s]",
      "type": "array",
      "items": {
       "type": "number"
      }
     },
     "lvlhAxes": {
      "title": "LVLH Axes",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "enuAxes": {
      "title": "ENU Axes",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "beta": {
      "title": "Beta Angle",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "orbitalElements": {
      "title": "Orbital Elements",
      "allOf": [
       {
        "$ref": "#/components/schemas/OrbitalElementsData"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "shadow": {
      "title": "Eclipse State",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "activeCommInterfaces": {
      "title": "Active Data Handling Interfaces",
      "type": "array",
      "items": {
       "type": "array",
       "items": {
        "anyOf": [
         {
          "type": "boolean"
         },
         {
          "type": "string"
         },
         {
          "type": "integer"
         }
        ]
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>List of currently active interfaces on this Agent. Each entry contains a tuple of `transmitStatus`, `agentId`, `bitRate`, and `canLink`.",
      "default": []
     },
     "selfId": {
      "title": "Self ID",
      "type": "string",
      "description": "**This field is for internal use only**"
     },
     "_quantityKinds": {
      "title": " Quantitykinds",
      "type": "object",
      "description": "Object mapping `Block` class names and `root` to the names of `QuantityKind` fields. The field\n    names then map to an object of descriptive information about the field."
     },
     "_relationships": {
      "title": " Relationships",
      "type": "object",
      "description": "Object mapping `Block` class names and `root` to the names of relationship fields. The field\n    names then map to an object of descriptive information about the field."
     },
     "_supers": {
      "title": " Supers",
      "type": "object",
      "description": "Object mapping `Block` class names to a list of names of their direct super classes."
     },
     "_blockNames": {
      "title": " Blocknames",
      "type": "array",
      "items": {},
      "description": "Names of all valid `Block`s for this `Metamodel` class"
     }
    },
    "additionalProperties": false,
    "description": "Class for VehicleTemplate with meta attributes"
   },
   "VehicleTemplateRoot": {
    "title": "VehicleTemplateRoot",
    "required": [
     "cadKey",
     "cadSignedUrl",
     "cadScaleFactor",
     "mass",
     "inertia"
    ],
    "type": "object",
    "properties": {
     "cadFileName": {
      "title": "Vehicle CAD Model Filename",
      "maxLength": 100,
      "type": "string",
      "default": ""
     },
     "cadKey": {
      "title": "Vehicle CAD Model Key",
      "maxLength": 48,
      "type": "string"
     },
     "cadSignedUrl": {
      "title": "Vehicle CAD Model URL",
      "maxLength": 1024,
      "type": "string"
     },
     "cadScaleFactor": {
      "title": "Vehicle CAD Model Scale Factor",
      "exclusiveMaximum": 100000000.0,
      "exclusiveMinimum": 0.0,
      "type": "number",
      "description": "A normalizing factor that scales the model such that its largest bounding dimension is `1`."
     },
     "enabledModules": {
      "title": "Enabled Simulation Modules",
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "Enable/disable specific simulation modules. GNC and CDH must always be enabled.",
      "default": [
       "GNC",
       "CDH",
       "Power",
       "Thermal"
      ]
     },
     "mass": {
      "title": "Dry Mass [kg]",
      "exclusiveMinimum": 0.0,
      "type": "number"
     },
     "inertia": {
      "title": "Inertia Matrix [Matrix3[kg-m^2]]",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      }
     },
     "missionOrbit": {
      "title": "ID of Associated Orbit Block",
      "type": "string",
      "description": "Relationship to zero or one `Orbit` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "activeOpMode": {
      "title": "ID of Associated OperationalMode Block",
      "type": "string",
      "description": "Relationship to zero or one `OperationalMode` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "powerProcessor": {
      "title": "ID of Associated PowerProcessor Block",
      "type": "string",
      "description": "Relationship to zero or one `PowerProcessor` blocks. On delete: `set-none` (set relationship field to `None` when referenced block is deleted)."
     },
     "dynamicMass": {
      "title": "Dynamic Mass [kg]",
      "exclusiveMinimum": 0.0,
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "dynamicInertia": {
      "title": "Dynamic Inertia Matrix [Matrix3[kg-m^2]]",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "position": {
      "title": "Agent Position",
      "allOf": [
       {
        "$ref": "#/components/schemas/PositionBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>This value is set based on the `Orbit` associated to this `Agent` in a `Scenario`."
     },
     "velocity": {
      "title": "Agent Velocity",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>This value is set based on the `Orbit` associated to this `Agent` in a `Scenario`."
     },
     "attitude": {
      "title": "Attitude Quaternion",
      "allOf": [
       {
        "$ref": "#/components/schemas/QuaternionBase306"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": {
       "body_eci": [
        0.0,
        0.0,
        0.0,
        1.0
       ]
      }
     },
     "angularVelocity": {
      "title": "Angular Velocity [rad/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0.0,
       0.0,
       0.0
      ]
     },
     "torque": {
      "title": "Total Torque [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0.0,
       0.0,
       0.0
      ]
     },
     "srpTorque": {
      "title": "SRP Torque [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0.0,
       0.0,
       0.0
      ]
     },
     "dragTorque": {
      "title": "Drag Torque [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0.0,
       0.0,
       0.0
      ]
     },
     "gravityGradientTorque": {
      "title": "Gravity Gradient Torque [N\u2022m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.",
      "default": [
       0.0,
       0.0,
       0.0
      ]
     },
     "positionSolution": {
      "title": "Active Position Solution [m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "positionSolutionError": {
      "title": "Active Position Solution Error [m]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "positionCovariance": {
      "title": "Active Position Solution Covariance",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "velocitySolution": {
      "title": "Active Velocity Solution [km/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "velocitySolutionError": {
      "title": "Active Velocity Solution Error [km/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "velocityCovariance": {
      "title": "Active Velocity Solution Error [km/s]",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "attitudeSolution": {
      "title": "Attitude Solution Quaternion",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "attitudeSolutionError": {
      "title": "Attitude Error YPR [rad]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "angularVelocitySolution": {
      "title": "Angular Velocity Solution [rad/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "angularVelocitySolutionError": {
      "title": "Angular Velocity Error [rad/s]",
      "type": "array",
      "items": {
       "type": "number"
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "commandedAttitude": {
      "title": "Commanded Attitude Quaternion",
      "type": "array",
      "items": {
       "type": "number"
      }
     },
     "commandedAngularRates": {
      "title": "Commanded Angular Velocity [rad/s]",
      "type": "array",
      "items": {
       "type": "number"
      }
     },
     "lvlhAxes": {
      "title": "LVLH Axes",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "enuAxes": {
      "title": "ENU Axes",
      "type": "array",
      "items": {
       "maxItems": 3,
       "minItems": 3,
       "type": "array",
       "items": {
        "type": "number"
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "beta": {
      "title": "Beta Angle",
      "type": "number",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "orbitalElements": {
      "title": "Orbital Elements",
      "allOf": [
       {
        "$ref": "#/components/schemas/OrbitalElementsData"
       }
      ],
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "shadow": {
      "title": "Eclipse State",
      "type": "boolean",
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model."
     },
     "activeCommInterfaces": {
      "title": "Active Data Handling Interfaces",
      "type": "array",
      "items": {
       "type": "array",
       "items": {
        "anyOf": [
         {
          "type": "boolean"
         },
         {
          "type": "string"
         },
         {
          "type": "integer"
         }
        ]
       }
      },
      "description": "**Time-Variable Attribute:** Set this field to overwrite the initial state of the model.<br/>List of currently active interfaces on this Agent. Each entry contains a tuple of `transmitStatus`, `agentId`, `bitRate`, and `canLink`.",
      "default": []
     },
     "selfId": {
      "title": "Self ID",
      "type": "string",
      "description": "**This field is for internal use only**"
     }
    },
    "additionalProperties": false,
    "description": "Vehicle Template Root Attributes"
   },
   "VehicleTemplateUpdateInterface": {
    "title": "VehicleTemplateUpdateInterface",
    "required": [
     "root",
     "blocks",
     "delete"
    ],
    "type": "object",
    "properties": {
     "root": {
      "$ref": "#/components/schemas/VehicleTemplateRoot"
     },
     "blocks": {
      "title": "Blocks",
      "type": "array",
      "items": {
       "anyOf": [
        {
         "$ref": "#/components/schemas/Antenna"
        },
        {
         "$ref": "#/components/schemas/ResistanceLoad"
        },
        {
         "$ref": "#/components/schemas/PowerLoad"
        },
        {
         "$ref": "#/components/schemas/DataInterface"
        },
        {
         "$ref": "#/components/schemas/InternalDataInterface"
        },
        {
         "$ref": "#/components/schemas/ReceiveInterface"
        },
        {
         "$ref": "#/components/schemas/ThermalInterface"
        },
        {
         "$ref": "#/components/schemas/PassiveTransmitInterface"
        },
        {
         "$ref": "#/components/schemas/CooperativeTransmitInterface"
        },
        {
         "$ref": "#/components/schemas/FixedSurface"
        },
        {
         "$ref": "#/components/schemas/SunTrackingSurface"
        },
        {
         "$ref": "#/components/schemas/VectorTrackingSurface"
        },
        {
         "$ref": "#/components/schemas/DataMode"
        },
        {
         "$ref": "#/components/schemas/PassivePointingMode"
        },
        {
         "$ref": "#/components/schemas/LockPointingMode"
        },
        {
         "$ref": "#/components/schemas/MaxAlignPointingMode"
        },
        {
         "$ref": "#/components/schemas/OperationalMode"
        },
        {
         "$ref": "#/components/schemas/DataStorage"
        },
        {
         "$ref": "#/components/schemas/LaserCommModule"
        },
        {
         "$ref": "#/components/schemas/DataType"
        },
        {
         "$ref": "#/components/schemas/LoadState"
        },
        {
         "$ref": "#/components/schemas/TempControllerState"
        },
        {
         "$ref": "#/components/schemas/BatteryPack"
        },
        {
         "$ref": "#/components/schemas/SphericalFuelTank"
        },
        {
         "$ref": "#/components/schemas/SpherocylinderFuelTank"
        },
        {
         "$ref": "#/components/schemas/ThermalInterfaceMaterial"
        },
        {
         "$ref": "#/components/schemas/SurfaceMaterial"
        },
        {
         "$ref": "#/components/schemas/ReactionWheel"
        },
        {
         "$ref": "#/components/schemas/SolarPanel"
        },
        {
         "$ref": "#/components/schemas/SolarCell"
        },
        {
         "$ref": "#/components/schemas/BatteryCell"
        },
        {
         "$ref": "#/components/schemas/Modem"
        },
        {
         "$ref": "#/components/schemas/Subsystem"
        },
        {
         "$ref": "#/components/schemas/TriadAlgorithm"
        },
        {
         "$ref": "#/components/schemas/PidAlgorithm"
        },
        {
         "$ref": "#/components/schemas/SlidingModeAlgorithm"
        },
        {
         "$ref": "#/components/schemas/EkfAlgorithm"
        },
        {
         "$ref": "#/components/schemas/MekfAlgorithm"
        },
        {
         "$ref": "#/components/schemas/AveragingAlgorithm"
        },
        {
         "$ref": "#/components/schemas/StaticThrustControlAlgorithm"
        },
        {
         "$ref": "#/components/schemas/GpsAlgorithm"
        },
        {
         "$ref": "#/components/schemas/CompoundCondition"
        },
        {
         "$ref": "#/components/schemas/TimeCondition"
        },
        {
         "$ref": "#/components/schemas/SatelliteToSatelliteCondition"
        },
        {
         "$ref": "#/components/schemas/TargetGroupToSatelliteCondition"
        },
        {
         "$ref": "#/components/schemas/SameTargetMultiCondition"
        },
        {
         "$ref": "#/components/schemas/SatelliteToScalarCondition"
        },
        {
         "$ref": "#/components/schemas/TargetGroupToScalarCondition"
        },
        {
         "$ref": "#/components/schemas/TargetToScalarCondition"
        },
        {
         "$ref": "#/components/schemas/ComponentToScalarCondition"
        },
        {
         "$ref": "#/components/schemas/SatelliteToTargetCondition"
        },
        {
         "$ref": "#/components/schemas/TargetGroupToTargetCondition"
        },
        {
         "$ref": "#/components/schemas/TargetToTargetCondition"
        },
        {
         "$ref": "#/components/schemas/TargetGroupInFovCondition"
        },
        {
         "$ref": "#/components/schemas/VectorInFovCondition"
        },
        {
         "$ref": "#/components/schemas/TargetInFovCondition"
        },
        {
         "$ref": "#/components/schemas/BodyInFovCondition"
        },
        {
         "$ref": "#/components/schemas/TargetGroup"
        },
        {
         "$ref": "#/components/schemas/Cooler"
        },
        {
         "$ref": "#/components/schemas/Heater"
        },
        {
         "$ref": "#/components/schemas/Thruster"
        },
        {
         "$ref": "#/components/schemas/Magnetorquer"
        },
        {
         "$ref": "#/components/schemas/FuelReservoir"
        },
        {
         "$ref": "#/components/schemas/OpticalAttitudeSensor"
        },
        {
         "$ref": "#/components/schemas/DirectionSensor"
        },
        {
         "$ref": "#/components/schemas/PositionSensor"
        },
        {
         "$ref": "#/components/schemas/VectorSensor"
        },
        {
         "$ref": "#/components/schemas/AngularVelocitySensor"
        },
        {
         "$ref": "#/components/schemas/PowerProcessor"
        },
        {
         "$ref": "#/components/schemas/SingleConvHybridPowerProcessor"
        },
        {
         "$ref": "#/components/schemas/QuasiRegDetPowerProcessor"
        },
        {
         "$ref": "#/components/schemas/FullyRegDetPowerProcessor"
        },
        {
         "$ref": "#/components/schemas/SingleConvMpptPowerProcessor"
        },
        {
         "$ref": "#/components/schemas/TwoConvMpptPowerProcessor"
        },
        {
         "$ref": "#/components/schemas/BusRegulator"
        },
        {
         "$ref": "#/components/schemas/BodyFrameVector"
        },
        {
         "$ref": "#/components/schemas/LocalVector"
        },
        {
         "$ref": "#/components/schemas/CelestialVector"
        },
        {
         "$ref": "#/components/schemas/TargetGroupVector"
        },
        {
         "$ref": "#/components/schemas/TargetVector"
        },
        {
         "$ref": "#/components/schemas/DataBus"
        },
        {
         "$ref": "#/components/schemas/GroundTarget"
        },
        {
         "$ref": "#/components/schemas/SpaceTarget"
        },
        {
         "$ref": "#/components/schemas/CelestialTarget"
        },
        {
         "$ref": "#/components/schemas/Orbit"
        },
        {
         "$ref": "#/components/schemas/Component"
        },
        {
         "$ref": "#/components/schemas/CircularFieldOfView"
        },
        {
         "$ref": "#/components/schemas/RectangularFieldOfView"
        },
        {
         "$ref": "#/components/schemas/SolarArray"
        },
        {
         "$ref": "#/components/schemas/Battery"
        }
       ]
      }
     },
     "delete": {
      "title": "Delete",
      "type": "array",
      "items": {
       "type": "string"
      }
     }
    }
   }
  }
 },
 "tags": [
  {
   "name": "Branches",
   "description": ""
  },
  {
   "name": "Data",
   "description": "\n### Queries\n\nData is queried via 6 URL query parameters:\n\n- `id`: The ID of the data set to query.  This ID is defined on a [Simulation Job](#tag/Jobs).\n- `start`: The start time of the window in MJD. If omitted, defaults to the minimum timestamp in the dataset.\n- `stop`: The stop time of the window in MJD. If omitted, defaults to the maximum timestamp in the dataset.\n- `binWidth`: (optional) The bin width to use to down-sample the data.  If omitted, data will be full resolution.\n- `axisOrder`: (optional) The shape of each series in the response. Options: `TIME_MAJOR` (default) and `TIME_MINOR`.\n- `streams`: (optional) The specific agents and engines for which to fetch data. If omitted, all streams are fetched.\n    This argument takes the form of a list of requests separated by commas.\n    A request can have either one or two elements. The first element is always the ID of the Agent (str).\n    The second element (optional) is the name of an engine (str). This must be one of the following: 'GNC', 'CDH', 'Power', 'Thermal'.\n    If the second element is not provided, all data from all engines of the given Agent are fetched. If a request has two elements, they are\n    separated by a period. Here is an example:\n\n    ...&streams=NT06aqHUT5djI1_JPAsck.CDH,NT06aqHUT5djI1_JPAsck.Power,NT0Ln1gS8elWEK4Y-l7m-\n\n    This will fetch the Power and CDH data for Agent(id='NT06aqHUT5djI1_JPAsck'), and all data for\n    Agent(id='NT0Ln1gS8elWEK4Y-l7m-').\n\nExample request: `GET: /data/<id>?start=<start>&stop=<stop>&binWidth=<binWidth>`\n\n#### Response\n\nData is returned from a query in the following format:\n\n```jsonc\n{\n    \"series\": {\n        <streamId>: [\n            [<timestamp1::MJD>, <timestamp2::MJD>, ...],\n            {\n                <agentId>: {\n                    <blockId>: {\n                        <stateVariableA>: [<valueA1>, <valueA2>, ...],\n                        <stateVariableB>: [<valueB1>, <valueB2>, ...],\n                        ...\n                    },\n                    <stateVariableC>: [<valueC1>, <valueC2>, ...]\n                },\n                ...\n            }\n        ],\n        ...\n    }\n}\n```\n\nNote that a \"Stream\" is a set of state variables that share the same timestamps.  Specifically, the values in a Stream\ncorrespond to a modsim Engine of a particular Agent.  The `series` object contains a key for each stream in the data set.\nThe value of each stream key is a 2-element array.  The first element is an array of timestamps - the X-axis for all variables\nin the stream.  The second element is an object containing the state variables that compose the stream.  The state variables\nare grouped under an Agent ID and then a Block ID (if applicable).  The value of each entry is an array of values that aligns\nwith the timestamp vector.\n\n#### Axis Order (`axisOrder`)\n\nAxis order defines the shape of each multi-dimensional series in the Data Service query response.  In the following example,\n`n` is the time dimension, `position` is a notional State Variable of shape `(3,)`, and `matrix` is a notional State Variable\nof shape `(3, 4)`.\n\n**`TIME_MAJOR`**\n- `position.shape == (n, 3)`\n- `matrix.shape == (n, 3, 4)`\n\n**`TIME_MINOR`**\n- `position.shape == (3, n)`\n- `matrix.shape == (3, 4, n)`\n"
  },
  {
   "name": "Templates",
   "description": "\n#### Introduction to Modeling in Sedaro\n\nSedaro uses **SedaroML** (Sedaro Modeling Language) to define models and systems of models. SedaroML defines system\nproperties and structure as normalized, interrelated, and hierarchical blocks of attributes. SedaroML is JSON-based and\nis designed to be easily human and machine readable/writeable. This includes model interpretation, traversal, etc. Each\nSedaroML model class defining the structure and properties of a system is called a `Metamodel`.\n\n`Metamodel` classes are instantiated to create instances of the system. `Metamodel` instances consist of a set of\n`Block`s and `attributes` (described below) and can be either **Agent Templates** or **Scenarios**.\n\n- Agent Templates: define the model for a system.\n- Scenarios: define the instantiation of a system and the configuration of the simulation.\n\nWhen a Scenario configures a simulation, it instantiates Agent Templates to create **Agents**.  The Agents are then\nconnected to each other to form a system of systems.  This system is then simulated according to the Scenario's configuration.\n\nTo help with organization and other functionality, each instantiated `Metamodel` is associated with a `Branch` that is apart\nof a `Repository`. This allows for versioning, branching, merging, and tracking of changes to the `Metamodel` and the\nsystem it defines. The `Metamodel` is stored in the `data` key of the `Branch` JSON object.\n\n#### Other key concepts\n\nThere are some specific concepts in SedaroML that are important to understand:\n  - **Attributes:** Individual properties of a `Block` (e.g., `mass`, `voltage`, etc.) captured as a key-value pair.\n\n  - **Root:** The `root` refers to the highest level key/value pairs of the JSON-object of SedaroML. The keys are\n    attributes, just like on `Block`s, but `root` is not a `Block` itself. All `Metamodel`s contain `blocks` and `index`\n    attributes in `root` which store and help with querying for all `Block`s in the `Metamodel`.\n\n  - **Blocks:** A `Block` is a set of attributes, including a `type` which defines the type of the `Block` (e.g.,\n    `ReactionWheel`, `Battery`, etc.). All `Block`s are located under the `blocks` attribute of the model.\n\n  - **Hierarchy:** The `Block`s in a SedaroML model have hierarchy such that a `Block` `type` can extend one or more\n    `Block` `type`s (e.g., a `ReactionWheel` is a specialized `Actuator` and an `Actuator` is a specialized\n    `Component`). The hierarchy of a model can be interpreted using the `index` and `_supers` meta attributes of a\n    `Metamodel`.  `index` provides a lookup to traverse from a `Block` `type` to its sub-`Block` `type`s, ultimately\n    down to the individual `Block` instances in the model. `_supers` provides a lookup to traverse from a `Block` `type`\n    to its super-`Block` `type`s.\n\n  - **Relationships:** The model `root` and its `Block`s can be related to one another using relationship attributes.\n    The `_relationships` meta attribute provides a lookup from `Block` `type` to that `type`'s relationships attributes.\n\n  - **Quantity Kinds:** In SedaroML, an attribute that has a value and a unit is called a \"Quantity\". Quantities may be\n    composed of other Quantities, called Compound Quantities. A category of Quantities that share the same unit system\n    is called a \"Quantity Kind\".  If a model attribute is an explicit Quantity, it will be included in the\n    `_quantityKinds` meta attribute lookup. Attributes that are Explicit Quantity Kinds may be defined in any of the\n    supported units for the Quantity Kind. For example, all angle attributes in SedaroML may be defined in either\n    degrees or radians. If the unit isn't provided, the default unit for the given Quantity Kind is assumed.\n\nSedaroML is used to define both Agent Templates and Scenario models, with Scenario models referencing Agent Template    Branches (and therefore their models) via the `templateRef` attribute of an `Agent` Block.\n\nExample of a mock `Metamodel` instance in a `Branch` `data` key, demonstrating some of the meta attributes:\n```json\n{\n    \"type\": \"Spacecraft\",\n    \"blocks\": {\n        \"N05o9ixRguGxORKXZ_123\": {\n        \"id\": \"N05o9ixRguGxORKXZ_123\",\n            \"type\": \"Battery\",\n            \"packs\": [\"N05oGhcT-9k9vSTAGn456\"]\n        },\n        \"N05oGhcT-9k9vSTAGn456\": {\n            \"id\": \"N05oGhcT-9k9vSTAGn456\",\n            \"type\": \"BatteryPack\",\n            \"battery\": \"N05o9ixRguGxORKXZ_123\"\n        }\n        \"N05o79yULy9NUw1zTk789\": {\n        \"id\": \"N05o79yULy9NUw1zTk789\",\n            \"type\": \"ReactionWheel\",\n            \"inertia\": 0.1\n        },\n    },\n    \"index\": {\n        \"Actuator\": [\"ReactionWheel\"],\n        \"Component\": [\"Battery\", \"BatteryPack\", \"Actuator\"],\n        \"Battery\": [\"N05o9ixRguGxORKXZ_123\"],\n        \"BatteryPack\": [\"N05oGhcT-9k9vSTAGn456\"],\n        \"ReactionWheel\": [\"N05o79yULy9NUw1zTk789\"]\n    },\n    \"_relationships\": {\n        \"Battery\": {\n            \"packs\": {\n                \"inverse\": \"battery\",\n                \"onDelete\": \"set-none\",\n                \"optional\": true,\n                \"target\": \"BatteryPack\",\n                \"type\": \"ManySide\"\n            },\n        },\n        \"BatteryPack\": {\n            \"battery\": {\n                \"inverse\": \"packs\",\n                \"onDelete\": \"set-none\",\n                \"optional\": false,\n                \"target\": \"Battery\",\n                \"type\": \"OneSide\"\n            },\n        },\n    },\n}\n```\n"
  },
  {
   "name": "Externals",
   "description": "\n### Introduction\n\"Cosimulation\" refers to multiple simulators working in conjunction to simulate something. Cosimulation in Sedaro is\nachieved via the definition of `ExternalState` `Block`s within a Scenario model.  `ExternalState` `Block`s are related to\none or more `Agent` `Block`s in the Scenario model and they define the external cosimulation interfaces.  Interfaces can\nbe uni- or bi-directional and support two different modes: `Per-Round` and `Spontaneous`.\n\n### Cosimulation Modes\nIn `Per-Round` cosimulation, the external simulator is expected to produce and/or consume state at each \"round\" or\nsimulation Engine time-step. In `Spontaneous` cosimulation, the external simulator may produce and/or consume state at\nany time. This method of cosimulation is recommended for real-time simulations (`ClockConfig.realTime == true`) and\nis important for use-cases such as commanding a system or part of a system to a new state (i.e., human/software-in-the-loop).\n\n`Spontaneous` state is timestamped and interpreted such that it impacts the simulation during the round at or immediately\nfollowing the `timestamp`. Spontaneous state production is also unique in that it is not required to ever provide a\nvalue and can remain optionally unused during a simulation. In this case, the simulation will continue to consume the\ninitial value for the state until a new value is provided.\n\nEach cosimulation interface is independent meaning some may be `Per Round` while others are `Spontaneous`.  This also\nmeans that individual cosimulators can consume/produce state simulataneously over different interfaces.\n\n### Blocking vs Non-Blocking\n#### Per-Round\nIf simulation state depends on `produced` external state, the simulation will block (or wait) until this state is provided\nvia the following `PATCH` endpoint.  Once provided, the simulation will continue until it is blocked again. Anything that\nis not dependent on the external state will continue to run during the blocking period.\n\n#### Spontaneous\nSpontaneous external state will never block the simulation but will take effect upon arrival.\n\n#### Consume\nCalling `consume` with a `time` value that the simulation hasn't reached yet will block until the simulation catches up.\nThis is currently subject to a **10 minute timeout**. If the request fails after 10 minutes, it is recommended that it\nbe reattempted.\n\nSimilarly, calling `consume` with a `time` that too far lags the current simulation might result in an error as the\nvalue has been garbage collected from the simulation caches and is no longer available for retrieval. If this is the\ncase, please fetch the data from the Data Service (via the Results API) instead.\n\n### Numpy Array Serialization/Deserialization\nBecause all requests and responses of this API must be JSON serializable, numpy arrays are represented in the following\nway in both API requests and responses (as a representation of the value `np.array([x, y, z])`):\n\n```jsonc\n{\n    \"ndarray\": [x, y, z]\n}\n```\n\n### Configuring Cosimulation\nCosimulation interfaces are configured via the definition of `ExternalState` Blocks on the [Scenario model](#tag/Templates) before the simulation\nis started. The currently supported Blocks are `PerRoundExternalState` and `SpontaneousExternalState`.\n\nSee the [Templates](#tag/Templates) section for details on defining Blocks and their individual attributes.\n\nExample Blocks:\n\n```jsonc\n// Per Round External State Block\n{\n    \"id\": \"NZ2SGPWRnmdJhwUT4GD5k\",\n    \"type\": \"PerRoundExternalState\",\n    \"produced\": [{\"root\": \"velocity\"}], // Implicit QuantityKind\n    \"consumed\": [{\"prev.root.position.as\": \"Position.eci\"}], // Explicit QuantityKind\n    \"engineIndex\": 0, // 0: GNC, 1: C&DH, 2: Power, 3: Thermal\n    \"agents\": [\"NSghFfVT8ieam0ydeZGX-\"]\n}\n\n// Spontaneous External State Block\n{\n    \"id\": \"NZ2SHUkS95z1GtmMZ0CTk\",\n    \"type\": \"SpontaneousExternalState\",\n    \"produced\": [{\"root\": \"activeOpMode\"}],\n    \"consumed\": [{\"prev.root.position.as\": \"Position.eci\"}],\n    \"engineIndex\": 0, // 0: GNC, 1: C&DH, 2: Power, 3: Thermal\n    \"agents\": [\"NSghFfVT8ieam0ydeZGX-\"]\n}\n```\n\nOnce the simulation is running, the following endpoints are used to interact with any cosimulation interfaces.\n"
  }
 ],
 "x-tagGroups": [
  {
   "name": "Templates",
   "tags": [
    "Templates"
   ]
  },
  {
   "name": "Simulation",
   "tags": [
    "Jobs"
   ]
  },
  {
   "name": "Data",
   "tags": [
    "Data"
   ]
  },
  {
   "name": "Repositories",
   "tags": [
    "Repositories",
    "Branches"
   ]
  },
  {
   "name": "Cosimulation",
   "tags": [
    "Externals"
   ]
  }
 ]
}