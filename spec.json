{
  "openapi": "3.0.2",
  "info": {
    "title": "Sedaro Satellite API",
    "description": "\nAllows for consumption of Sedaro Satellite services.\nRead more about Sedaro Satellite at [satellite.sedaro.com](https://satellite.sedaro.com).\n",
    "version": "3.0.0",
    "x-logo": {
      "url": "https://api.sedaro.com/static/multimedia/logo_secondary_02242022.png",
      "backgroundColor": "#FAFAFA",
      "altText": "Sedaro Satellite API Docs"
    }
  },
  "paths": {
    "/branches/{branchId}/system/satellite/{blockId}": {
      "patch": {
        "tags": ["Satellite"],
        "summary": "Update Satellite",
        "operationId": "update_satellite",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SatelliteUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Satellite" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/geometry/body-frame-vectors/": {
      "post": {
        "tags": ["Body Frame Vector"],
        "summary": "Create Body Frame Vector",
        "operationId": "create_body_frame_vector",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BodyFrameVectorCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BodyFrameVector" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/geometry/body-frame-vectors/{blockId}": {
      "delete": {
        "tags": ["Body Frame Vector"],
        "summary": "Delete Body Frame Vector",
        "operationId": "delete_body_frame_vector",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Body Frame Vector"],
        "summary": "Update Body Frame Vector",
        "operationId": "update_body_frame_vector",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BodyFrameVectorUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BodyFrameVector" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/geometry/surfaces/": {
      "post": {
        "tags": ["Surface"],
        "summary": "Create Surface",
        "operationId": "create_surface",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SurfaceCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Surface" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/geometry/surfaces/{blockId}": {
      "delete": {
        "tags": ["Surface"],
        "summary": "Delete Surface",
        "operationId": "delete_surface",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Surface"],
        "summary": "Update Surface",
        "operationId": "update_surface",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SurfaceUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Surface" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/geometry/surfaces/materials/": {
      "post": {
        "tags": ["Surface Material"],
        "summary": "Create Surface Material",
        "operationId": "create_surface_material",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SurfaceMaterialCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SurfaceMaterial" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/geometry/surfaces/materials/{blockId}": {
      "delete": {
        "tags": ["Surface Material"],
        "summary": "Delete Surface Material",
        "operationId": "delete_surface_material",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Surface Material"],
        "summary": "Update Surface Material",
        "operationId": "update_surface_material",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SurfaceMaterialUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SurfaceMaterial" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/subsystems/": {
      "post": {
        "tags": ["Subsystem"],
        "summary": "Create Subsystem",
        "operationId": "create_subsystem",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SubsystemCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Subsystem" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/subsystems/{blockId}": {
      "delete": {
        "tags": ["Subsystem"],
        "summary": "Delete Subsystem",
        "operationId": "delete_subsystem",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Subsystem"],
        "summary": "Update Subsystem",
        "operationId": "update_subsystem",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SubsystemUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Subsystem" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/subsystems/components/": {
      "post": {
        "tags": ["Component"],
        "summary": "Create Component",
        "operationId": "create_component",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ComponentCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Component" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/subsystems/components/{blockId}": {
      "delete": {
        "tags": ["Component"],
        "summary": "Delete Component",
        "operationId": "delete_component",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Component"],
        "summary": "Update Component",
        "operationId": "update_component",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ComponentUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Component" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/loads/": {
      "post": {
        "tags": ["Load"],
        "summary": "Create Constant Load",
        "operationId": "create_constant_load",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ConstantLoadCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConstantLoad" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/loads/{blockId}": {
      "delete": {
        "tags": ["Load"],
        "summary": "Delete Constant Load",
        "operationId": "delete_constant_load",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Load"],
        "summary": "Update Constant Load",
        "operationId": "update_constant_load",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ConstantLoadUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConstantLoad" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/loads/actuator-loads/": {
      "post": {
        "tags": ["Load"],
        "summary": "Create Actuator Load",
        "operationId": "create_actuator_load",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ActuatorLoadCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ActuatorLoad" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/loads/actuator-loads/{blockId}": {
      "delete": {
        "tags": ["Load"],
        "summary": "Delete Actuator Load",
        "operationId": "delete_actuator_load",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Load"],
        "summary": "Update Actuator Load",
        "operationId": "update_actuator_load",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ActuatorLoadUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ActuatorLoad" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/loads/temp-control-loads/": {
      "post": {
        "tags": ["Load"],
        "summary": "Create Temperature Controller Load",
        "operationId": "create_temperature_controller_load",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TempControlLoadCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TempControlLoad" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/loads/temp-control-loads/{blockId}": {
      "delete": {
        "tags": ["Load"],
        "summary": "Delete Temperature Controller Load",
        "operationId": "delete_temperature_controller_load",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Load"],
        "summary": "Update Temperature Controller Load",
        "operationId": "update_temperature_controller_load",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TempControlLoadUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TempControlLoad" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/loads/states/": {
      "post": {
        "tags": ["Load State"],
        "summary": "Create Load State",
        "operationId": "create_load_state",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/LoadStateCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/LoadState" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/system/loads/states/{blockId}": {
      "delete": {
        "tags": ["Load State"],
        "summary": "Delete Load State",
        "operationId": "delete_load_state",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Load State"],
        "summary": "Update Load State",
        "operationId": "update_load_state",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/LoadStateUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/LoadState" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/cdh/conops/operational-modes/": {
      "post": {
        "tags": ["Operational Mode"],
        "summary": "Create Operational Mode",
        "operationId": "create_operational_mode",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OperationalModeCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationalMode" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/cdh/conops/operational-modes/{blockId}": {
      "delete": {
        "tags": ["Operational Mode"],
        "summary": "Delete Operational Mode",
        "operationId": "delete_operational_mode",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Operational Mode"],
        "summary": "Update Operational Mode",
        "operationId": "update_operational_mode",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OperationalModeUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationalMode" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/cdh/conops/conditions/": {
      "post": {
        "tags": ["Condition"],
        "summary": "Create Condition",
        "operationId": "create_condition",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ConditionCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Condition" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/cdh/conops/conditions/{blockId}": {
      "delete": {
        "tags": ["Condition"],
        "summary": "Delete Condition",
        "operationId": "delete_condition",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Condition"],
        "summary": "Update Condition",
        "operationId": "update_condition",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ConditionUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Condition" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/cdh/conops/space-targets/": {
      "post": {
        "tags": ["Target"],
        "summary": "Create Space Target",
        "operationId": "create_space_target",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SpaceTargetCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SpaceTarget" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/cdh/conops/space-targets/{blockId}": {
      "delete": {
        "tags": ["Target"],
        "summary": "Delete Space Target",
        "operationId": "delete_space_target",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Target"],
        "summary": "Update Space Target",
        "operationId": "update_space_target",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SpaceTargetUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SpaceTarget" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/cdh/conops/celestial-targets/": {
      "post": {
        "tags": ["Target"],
        "summary": "Create Celestial Target",
        "operationId": "create_celestial_target",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CelestialTargetCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CelestialTarget" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/cdh/conops/celestial-targets/{blockId}": {
      "delete": {
        "tags": ["Target"],
        "summary": "Delete Celestial Target",
        "operationId": "delete_celestial_target",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Target"],
        "summary": "Update Celestial Target",
        "operationId": "update_celestial_target",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CelestialTargetUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CelestialTarget" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/cdh/conops/ground-targets/": {
      "post": {
        "tags": ["Target"],
        "summary": "Create Ground Target",
        "operationId": "create_ground_target",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GroundTargetCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GroundTarget" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/cdh/conops/ground-targets/{blockId}": {
      "delete": {
        "tags": ["Target"],
        "summary": "Delete Ground Target",
        "operationId": "delete_ground_target",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Target"],
        "summary": "Update Ground Target",
        "operationId": "update_ground_target",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GroundTargetUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GroundTarget" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/cdh/conops/target-groups/": {
      "post": {
        "tags": ["Target Group"],
        "summary": "Create Target Group",
        "operationId": "create_target_group",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/TargetGroupCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TargetGroup" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/cdh/conops/target-groups/{blockId}": {
      "delete": {
        "tags": ["Target Group"],
        "summary": "Delete Target Group",
        "operationId": "delete_target_group",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Target Group"],
        "summary": "Update Target Group",
        "operationId": "update_target_group",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/TargetGroupUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TargetGroup" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/power/solar-arrays/": {
      "post": {
        "tags": ["Solar Array"],
        "summary": "Create Solar Array",
        "operationId": "create_solar_array",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SolarArrayCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SolarArray" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/power/solar-arrays/{blockId}": {
      "delete": {
        "tags": ["Solar Array"],
        "summary": "Delete Solar Array",
        "operationId": "delete_solar_array",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Solar Array"],
        "summary": "Update Solar Array",
        "operationId": "update_solar_array",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SolarArrayUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SolarArray" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/power/solar-arrays/panels/": {
      "post": {
        "tags": ["Component"],
        "summary": "Create Solar Panel",
        "operationId": "create_solar_panel",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SolarPanelCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SolarPanel" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/power/solar-arrays/panels/{blockId}": {
      "delete": {
        "tags": ["Component"],
        "summary": "Delete Solar Panel",
        "operationId": "delete_solar_panel",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Component"],
        "summary": "Update Solar Panel",
        "operationId": "update_solar_panel",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SolarPanelUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SolarPanel" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/power/solar-arrays/cells/": {
      "post": {
        "tags": ["Solar Cell"],
        "summary": "Create Solar Cell",
        "operationId": "create_solar_cell",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SolarCellCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SolarCell" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/power/solar-arrays/cells/{blockId}": {
      "delete": {
        "tags": ["Solar Cell"],
        "summary": "Delete Solar Cell",
        "operationId": "delete_solar_cell",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Solar Cell"],
        "summary": "Update Solar Cell",
        "operationId": "update_solar_cell",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SolarCellUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SolarCell" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/power/batteries/{blockId}": {
      "patch": {
        "tags": ["Battery"],
        "summary": "Update Battery",
        "operationId": "update_battery",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BatteryUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Battery" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/power/batteries/packs/": {
      "post": {
        "tags": ["Component"],
        "summary": "Create Battery Pack",
        "operationId": "create_battery_pack",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BatteryPackCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BatteryPack" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/power/batteries/packs/{blockId}": {
      "delete": {
        "tags": ["Component"],
        "summary": "Delete Battery Pack",
        "operationId": "delete_battery_pack",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Component"],
        "summary": "Update Battery Pack",
        "operationId": "update_battery_pack",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BatteryPackUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BatteryPack" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/power/batteries/cells/": {
      "post": {
        "tags": ["Battery Cell"],
        "summary": "Create Battery Cell",
        "operationId": "create_battery_cell",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BatteryCellCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BatteryCell" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/power/batteries/cells/{blockId}": {
      "delete": {
        "tags": ["Battery Cell"],
        "summary": "Delete Battery Cell",
        "operationId": "delete_battery_cell",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Battery Cell"],
        "summary": "Update Battery Cell",
        "operationId": "update_battery_cell",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BatteryCellUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BatteryCell" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/power/eps/topology/{blockId}": {
      "patch": {
        "tags": ["Component"],
        "summary": "Update Topology",
        "operationId": "update_topology",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/TopologyUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Topology" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/power/eps/bus-regulators/": {
      "post": {
        "tags": ["Bus Regulator"],
        "summary": "Create Bus Regulator",
        "operationId": "create_bus_regulator",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BusRegulatorCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BusRegulator" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/power/eps/bus-regulators/{blockId}": {
      "delete": {
        "tags": ["Bus Regulator"],
        "summary": "Delete Bus Regulator",
        "operationId": "delete_bus_regulator",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Bus Regulator"],
        "summary": "Update Bus Regulator",
        "operationId": "update_bus_regulator",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BusRegulatorUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BusRegulator" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/thermal/temp-controllers/heaters/": {
      "post": {
        "tags": ["Temperature Controller"],
        "summary": "Create Heater",
        "operationId": "create_heater",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/HeaterCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Heater" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/thermal/temp-controllers/heaters/{blockId}": {
      "delete": {
        "tags": ["Temperature Controller"],
        "summary": "Delete Heater",
        "operationId": "delete_heater",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Temperature Controller"],
        "summary": "Update Heater",
        "operationId": "update_heater",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/HeaterUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Heater" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/thermal/temp-controllers/coolers/": {
      "post": {
        "tags": ["Temperature Controller"],
        "summary": "Create Cooler",
        "operationId": "create_cooler",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CoolerCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Cooler" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/thermal/temp-controllers/coolers/{blockId}": {
      "delete": {
        "tags": ["Temperature Controller"],
        "summary": "Delete Cooler",
        "operationId": "delete_cooler",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Temperature Controller"],
        "summary": "Update Cooler",
        "operationId": "update_cooler",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CoolerUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Cooler" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/thermal/temp-controllers/states/": {
      "post": {
        "tags": ["Temperature Controller State"],
        "summary": "Create Temperature Controller State",
        "operationId": "create_temperature_controller_state",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TempControllerStateCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TempControllerState" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/thermal/temp-controllers/states/{blockId}": {
      "delete": {
        "tags": ["Temperature Controller State"],
        "summary": "Delete Temperature Controller State",
        "operationId": "delete_temperature_controller_state",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Temperature Controller State"],
        "summary": "Update Temperature Controller State",
        "operationId": "update_temperature_controller_state",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TempControllerStateUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TempControllerState" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/thermal/thermal-interfaces/": {
      "post": {
        "tags": ["Thermal Interface"],
        "summary": "Create Thermal Interface",
        "operationId": "create_thermal_interface",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ThermalInterfaceCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ThermalInterface" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/thermal/thermal-interfaces/{blockId}": {
      "delete": {
        "tags": ["Thermal Interface"],
        "summary": "Delete Thermal Interface",
        "operationId": "delete_thermal_interface",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Thermal Interface"],
        "summary": "Update Thermal Interface",
        "operationId": "update_thermal_interface",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ThermalInterfaceUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ThermalInterface" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/thermal/thermal-interface-materials/": {
      "post": {
        "tags": ["Thermal Interface Material"],
        "summary": "Create Thermal Interface Material",
        "operationId": "create_thermal_interface_material",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ThermalInterfaceMaterialCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ThermalInterfaceMaterial" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/thermal/thermal-interface-materials/{blockId}": {
      "delete": {
        "tags": ["Thermal Interface Material"],
        "summary": "Delete Thermal Interface Material",
        "operationId": "delete_thermal_interface_material",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Thermal Interface Material"],
        "summary": "Update Thermal Interface Material",
        "operationId": "update_thermal_interface_material",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ThermalInterfaceMaterialUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ThermalInterfaceMaterial" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/orbits/{blockId}": {
      "patch": {
        "tags": ["Orbit"],
        "summary": "Update Orbit",
        "operationId": "update_orbit",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/OrbitUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Orbit" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/pointing-modes/": {
      "post": {
        "tags": ["Pointing Mode"],
        "summary": "Create Pointing Mode",
        "operationId": "create_pointing_mode",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Data",
                "anyOf": [
                  { "$ref": "#/components/schemas/PassivePointingModeCreate" },
                  { "$ref": "#/components/schemas/LockPointingModeCreate" },
                  { "$ref": "#/components/schemas/MaxAlignPointingModeCreate" }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PointingMode" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/pointing-modes/{blockId}": {
      "delete": {
        "tags": ["Pointing Mode"],
        "summary": "Delete Pointing Mode",
        "operationId": "delete_pointing_mode",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Pointing Mode"],
        "summary": "Update Pointing Mode",
        "operationId": "update_pointing_mode",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Data",
                "anyOf": [
                  { "$ref": "#/components/schemas/PassivePointingModeUpdate" },
                  { "$ref": "#/components/schemas/LockPointingModeUpdate" },
                  { "$ref": "#/components/schemas/MaxAlignPointingModeUpdate" }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PointingMode" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/vectors/local-vectors/": {
      "post": {
        "tags": ["Vector"],
        "summary": "Create Local Vector",
        "operationId": "create_local_vector",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/LocalVectorCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/LocalVector" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/vectors/local-vectors/{blockId}": {
      "delete": {
        "tags": ["Vector"],
        "summary": "Delete Local Vector",
        "operationId": "delete_local_vector",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Vector"],
        "summary": "Update Local Vector",
        "operationId": "update_local_vector",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/LocalVectorUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/LocalVector" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/vectors/celestial-vectors/": {
      "post": {
        "tags": ["Vector"],
        "summary": "Create Celestial Vector",
        "operationId": "create_celestial_vector",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CelestialVectorCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CelestialVector" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/vectors/celestial-vectors/{blockId}": {
      "delete": {
        "tags": ["Vector"],
        "summary": "Delete Celestial Vector",
        "operationId": "delete_celestial_vector",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Vector"],
        "summary": "Update Celestial Vector",
        "operationId": "update_celestial_vector",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CelestialVectorUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CelestialVector" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/vectors/target-vectors/": {
      "post": {
        "tags": ["Vector"],
        "summary": "Create Target Vector",
        "operationId": "create_target_vector",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/TargetVectorCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TargetVector" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/vectors/target-vectors/{blockId}": {
      "delete": {
        "tags": ["Vector"],
        "summary": "Delete Target Vector",
        "operationId": "delete_target_vector",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Vector"],
        "summary": "Update Target Vector",
        "operationId": "update_target_vector",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/TargetVectorUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TargetVector" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/sensors/direction-sensors/": {
      "post": {
        "tags": ["Sensor"],
        "summary": "Create Direction Sensor",
        "operationId": "create_direction_sensor",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DirectionSensorCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectionSensor" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/sensors/direction-sensors/{blockId}": {
      "delete": {
        "tags": ["Sensor"],
        "summary": "Delete Direction Sensor",
        "operationId": "delete_direction_sensor",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Sensor"],
        "summary": "Update Direction Sensor",
        "operationId": "update_direction_sensor",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DirectionSensorUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectionSensor" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/sensors/vector-sensors/": {
      "post": {
        "tags": ["Sensor"],
        "summary": "Create Vector Sensor",
        "operationId": "create_vector_sensor",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/VectorSensorCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/VectorSensor" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/sensors/vector-sensors/{blockId}": {
      "delete": {
        "tags": ["Sensor"],
        "summary": "Delete Vector Sensor",
        "operationId": "delete_vector_sensor",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Sensor"],
        "summary": "Update Vector Sensor",
        "operationId": "update_vector_sensor",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/VectorSensorUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/VectorSensor" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/sensors/optical-attitude-sensors/": {
      "post": {
        "tags": ["Sensor"],
        "summary": "Create Optical Attitude Sensor",
        "operationId": "create_optical_attitude_sensor",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OpticalAttitudeSensorCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OpticalAttitudeSensor" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/sensors/optical-attitude-sensors/{blockId}": {
      "delete": {
        "tags": ["Sensor"],
        "summary": "Delete Optical Attitude Sensor",
        "operationId": "delete_optical_attitude_sensor",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Sensor"],
        "summary": "Update Optical Attitude Sensor",
        "operationId": "update_optical_attitude_sensor",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OpticalAttitudeSensorUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OpticalAttitudeSensor" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/sensors/position-sensors/": {
      "post": {
        "tags": ["Sensor"],
        "summary": "Create PositionSensor",
        "operationId": "create_positionsensor",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PositionSensorCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PositionSensor" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/sensors/position-sensors/{blockId}": {
      "delete": {
        "tags": ["Sensor"],
        "summary": "Delete PositionSensor",
        "operationId": "delete_positionsensor",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Sensor"],
        "summary": "Update PositionSensor",
        "operationId": "update_positionsensor",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PositionSensorUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PositionSensor" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/sensors/angular-rate-sensors/": {
      "post": {
        "tags": ["Sensor"],
        "summary": "Create AngularVelocitySensor",
        "operationId": "create_angularvelocitysensor",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AngularVelocitySensorCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AngularVelocitySensor" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/sensors/angular-rate-sensors/{blockId}": {
      "delete": {
        "tags": ["Sensor"],
        "summary": "Delete AngularVelocitySensor",
        "operationId": "delete_angularvelocitysensor",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Sensor"],
        "summary": "Update AngularVelocitySensor",
        "operationId": "update_angularvelocitysensor",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AngularVelocitySensorUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AngularVelocitySensor" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/sensors/fields-of-view/": {
      "post": {
        "tags": ["Field of View"],
        "summary": "Create Field of View",
        "operationId": "create_field_of_view",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/FieldOfViewCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FieldOfView" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/sensors/fields-of-view/{blockId}": {
      "delete": {
        "tags": ["Field of View"],
        "summary": "Delete Field of View",
        "operationId": "delete_field_of_view",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Field of View"],
        "summary": "Update Field of View",
        "operationId": "update_field_of_view",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/FieldOfViewUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FieldOfView" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/sensors/fields-of-view/constraints/": {
      "post": {
        "tags": ["Field of View Constraint"],
        "summary": "Create Field of View Constraint",
        "operationId": "create_field_of_view_constraint",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/FOVConstraintCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FOVConstraint" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/sensors/fields-of-view/constraints/{blockId}": {
      "delete": {
        "tags": ["Field of View Constraint"],
        "summary": "Delete Field of View Constraint",
        "operationId": "delete_field_of_view_constraint",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Field of View Constraint"],
        "summary": "Update Field of View Constraint",
        "operationId": "update_field_of_view_constraint",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/FOVConstraintUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FOVConstraint" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/actuators/magnetorquers/": {
      "post": {
        "tags": ["Actuator"],
        "summary": "Create Magnetorquer",
        "operationId": "create_magnetorquer",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/MagnetorquerCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Magnetorquer" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/actuators/magnetorquers/{blockId}": {
      "delete": {
        "tags": ["Actuator"],
        "summary": "Delete Magnetorquer",
        "operationId": "delete_magnetorquer",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Actuator"],
        "summary": "Update Magnetorquer",
        "operationId": "update_magnetorquer",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/MagnetorquerUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Magnetorquer" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/actuators/reaction-wheels/": {
      "post": {
        "tags": ["Actuator"],
        "summary": "Create Reaction Wheel",
        "operationId": "create_reaction_wheel",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ReactionWheelCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ReactionWheel" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/actuators/reaction-wheels/{blockId}": {
      "delete": {
        "tags": ["Actuator"],
        "summary": "Delete Reaction Wheel",
        "operationId": "delete_reaction_wheel",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Actuator"],
        "summary": "Update Reaction Wheel",
        "operationId": "update_reaction_wheel",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ReactionWheelUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ReactionWheel" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/algorithms/attitude-determination/triad/": {
      "post": {
        "tags": ["Algorithm"],
        "summary": "Create Triad Algorithm",
        "operationId": "create_triad_algorithm",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/TriadAlgorithm" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TriadAlgorithm" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/algorithms/attitude-determination/triad/{blockId}": {
      "delete": {
        "tags": ["Algorithm"],
        "summary": "Delete Triad Algorithm",
        "operationId": "delete_triad_algorithm",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Algorithm"],
        "summary": "Update Triad Algorithm",
        "operationId": "update_triad_algorithm",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/TriadAlgorithm" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TriadAlgorithm" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/algorithms/attitude-determination/mekf/": {
      "post": {
        "tags": ["Algorithm"],
        "summary": "Create MEKF Algorithm",
        "operationId": "create_mekf_algorithm",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/MEKFAlgorithm" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MEKFAlgorithm" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/algorithms/attitude-determination/mekf/{blockId}": {
      "delete": {
        "tags": ["Algorithm"],
        "summary": "Delete MEKF Algorithm",
        "operationId": "delete_mekf_algorithm",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Algorithm"],
        "summary": "Update MEKF Algorithm",
        "operationId": "update_mekf_algorithm",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/MEKFAlgorithm" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MEKFAlgorithm" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/algorithms/orbit-determination/ekf/": {
      "post": {
        "tags": ["Algorithm"],
        "summary": "Create EKF Algorithm",
        "operationId": "create_ekf_algorithm",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/EKFAlgorithm" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EKFAlgorithm" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/algorithms/orbit-determination/ekf/{blockId}": {
      "delete": {
        "tags": ["Algorithm"],
        "summary": "Delete EKF Algorithm",
        "operationId": "delete_ekf_algorithm",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Algorithm"],
        "summary": "Update EKF Algorithm",
        "operationId": "update_ekf_algorithm",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/EKFAlgorithm" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EKFAlgorithm" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/algorithms/orbit-determination/gps/": {
      "post": {
        "tags": ["Algorithm"],
        "summary": "Create GPS Algorithm",
        "operationId": "create_gps_algorithm",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GPSAlgorithm" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GPSAlgorithm" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/algorithms/orbit-determination/gps/{blockId}": {
      "delete": {
        "tags": ["Algorithm"],
        "summary": "Delete GPS Algorithm",
        "operationId": "delete_gps_algorithm",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Algorithm"],
        "summary": "Update GPS Algorithm",
        "operationId": "update_gps_algorithm",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GPSAlgorithm" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GPSAlgorithm" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/algorithms/attitude-control/sliding-mode/": {
      "post": {
        "tags": ["Algorithm"],
        "summary": "Create Sliding Mode 3x3 Algorithm",
        "operationId": "create_sliding_mode_3x3_algorithm",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SlidingModeAlgorithm" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SlidingModeAlgorithm" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/branches/{branchId}/gnc/algorithms/attitude-control/sliding-mode/{blockId}": {
      "delete": {
        "tags": ["Algorithm"],
        "summary": "Delete Sliding Mode 3x3 Algorithm",
        "operationId": "delete_sliding_mode_3x3_algorithm",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Algorithm"],
        "summary": "Update Sliding Mode 3x3 Algorithm",
        "operationId": "update_sliding_mode_3x3_algorithm",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Blockid", "type": "integer" },
            "name": "blockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SlidingModeAlgorithm" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SlidingModeAlgorithm" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/simulation/{branchId}/control/": {
      "post": {
        "tags": ["Jobs"],
        "summary": "Start a simulation",
        "operationId": "start_simulation",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Job" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/simulation/{branchId}/control/{jobId}": {
      "get": {
        "tags": ["Jobs"],
        "summary": "Get simulation status",
        "operationId": "get_simulation_status",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Jobid", "type": "integer" },
            "name": "jobId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/JobGet" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Jobs"],
        "summary": "Terminate running simulation",
        "operationId": "terminate_simulation",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Jobid", "type": "integer" },
            "name": "jobId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Job" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Jobs"],
        "summary": "Pause/resume running simulation",
        "operationId": "pause_resume_simulation",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Jobid", "type": "integer" },
            "name": "jobId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Action", "enum": ["PAUSE", "RESUME"], "type": "string" },
            "name": "action",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Job" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/mission-design/missions/versions/{branchId}/": {
      "get": {
        "tags": ["Branches"],
        "summary": "Get a branch",
        "description": "Retrieves the branch with the provided `id`.",
        "operationId": "get_branch",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Branch",
                  "anyOf": [
                    { "$ref": "#/components/schemas/BranchVehicleTemplateRes" },
                    { "$ref": "#/components/schemas/BranchScenarioTemplateRes" }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Branches"],
        "summary": "Branch off existing branch",
        "description": "Creates a new branch based on and in the same repository as the branch associated with the provided `id`.",
        "operationId": "create_branch",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BranchCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Create Branch",
                  "anyOf": [
                    { "$ref": "#/components/schemas/BranchVehicleTemplateRes" },
                    { "$ref": "#/components/schemas/BranchScenarioTemplateRes" }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Branches"],
        "summary": "Delete a branch",
        "description": "Deletes the branch with the provided `id`.",
        "operationId": "delete_branch",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchDeleteRes" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Branches"],
        "summary": "Update a branch",
        "description": "Updates updateable fields on the branch with the provided `id`. Note:\n- `shareable` indicates whether shareable links are valid for this branch.\n- `password` indicates whether the shareable link requires a password.",
        "operationId": "update_branch",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BranchUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Update Branch",
                  "anyOf": [
                    { "$ref": "#/components/schemas/BranchVehicleTemplateRes" },
                    { "$ref": "#/components/schemas/BranchScenarioTemplateRes" }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/mission-design/missions/versions/{branchId}/share-auth/": {
      "post": {
        "tags": ["Branches"],
        "summary": "Verify branch bassword",
        "description": "Route to verify password when a user tries to access a branch with the provided `id` via a password protected shareable link.\nIf successful, returns a success message with a set-cookie. The cookie stores a `jwt` that allows for non-owner collaborators to send `GET` requests to the corresponding branch.",
        "operationId": "verify_branch_password",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BranchVerifyPassword" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MessageRes" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/mission-design/missions/versions/{branchId}/commits/": {
      "post": {
        "tags": ["Branches"],
        "summary": "Commit changes to a branch",
        "description": "Takes all changes to the blocks on the branch with the provided `id` and commits them to the corresponding version-controlled branch.",
        "operationId": "commit_to_branch",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Commitmessage", "type": "string" },
            "name": "commitMessage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MessageRes" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/mission-design/missions/versions/{currentBranchId}/merge/{incomingBranchId}": {
      "post": {
        "tags": ["Branches"],
        "summary": "Merge branch into another branch",
        "description": "Merges branch with `incomingBranchId` into branch with `currentBranchId`. This route has two functions:\n- To initiate the merge, send the request with no body. If there are no conflicts, it will successfully complete the merge and send back the resulting branch.\n- If there are conflicts, the response body will have a key of `conflicts` with a list of conflict objects outlining the \"current\" and \"incoming\" changes. Review the list, and send a second request to the same route including a list of resulutions (see optional `resultions` param in the request body schema below) indicating where you would like to keep the \"current\" or \"incoming\" changes. The indices in the `resultions` list should correspond with the indices of the `conflicts` list.",
        "operationId": "merge_branches",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Currentbranchid", "type": "integer" },
            "name": "currentBranchId",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Incomingbranchid", "type": "integer" },
            "name": "incomingBranchId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BranchMerge" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Merge Branches",
                  "anyOf": [
                    { "$ref": "#/components/schemas/BranchVehicleTemplateRes" },
                    { "$ref": "#/components/schemas/BranchScenarioTemplateRes" },
                    { "$ref": "#/components/schemas/BranchMergeConflictsRes" }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/mission-design/missions/versions/{branchId}/committed/": {
      "get": {
        "tags": ["Branches"],
        "summary": "Get saved branch data",
        "description": "Retrieves all **committed** branch `data` (object with all the blocks) from the branch with the given `id`.",
        "operationId": "get_committed_branch_data",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Committed Branch Data",
                  "anyOf": [
                    { "$ref": "#/components/schemas/VehicleTemplate" },
                    { "$ref": "#/components/schemas/ScenarioTemplate" }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/mission-design/missions/versions/{branchId}/saved/": {
      "get": {
        "tags": ["Branches"],
        "summary": "Get committed branch data",
        "description": "Retrieves all **saved** branch `data` (object with all the blocks) from the branch with the given `id`.",
        "operationId": "get_saved_branch_data",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Branchid", "type": "integer" },
            "name": "branchId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Saved Branch Data",
                  "anyOf": [
                    { "$ref": "#/components/schemas/VehicleTemplate" },
                    { "$ref": "#/components/schemas/ScenarioTemplate" }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActuatorLoad": {
        "title": "ActuatorLoad",
        "required": ["name", "epsOutputType", "loadState"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "epsOutputType": {
            "title": "Power Supply Bus",
            "allOf": [{ "$ref": "#/components/schemas/EpsOutputTypes" }],
            "description": "`CORE_OUTPUT` if connected to the regulated/unregulated Power Processor bus.  `BUS_REGULATOR` if connected to a constant voltage `BusRegulator` output."
          },
          "busRegulator": {
            "title": "ID of Associated BusRegulator Block",
            "type": "integer",
            "description": "Relationship to zero or one `BusRegulator` blocks. Reverse key: `BusRegulator.loads`."
          },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to zero or one `Topology` blocks. Reverse key: `Topology.loads`."
          },
          "loadState": {
            "title": "ID of Associated LoadState Block",
            "type": "integer",
            "description": "Relationship to a `LoadState` block. Reverse key: `LoadState.loads`."
          }
        }
      },
      "ActuatorLoadCreate": {
        "title": "ActuatorLoadCreate",
        "required": ["name", "epsOutputType", "loadState"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "epsOutputType": {
            "title": "Power Supply Bus",
            "allOf": [{ "$ref": "#/components/schemas/EpsOutputTypes" }],
            "description": "`CORE_OUTPUT` if connected to the regulated/unregulated Power Processor bus.  `BUS_REGULATOR` if connected to a constant voltage `BusRegulator` output."
          },
          "busRegulator": {
            "title": "ID of Associated BusRegulator Block",
            "type": "integer",
            "description": "Relationship to zero or one `BusRegulator` blocks. Reverse key: `BusRegulator.loads`."
          },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to zero or one `Topology` blocks. Reverse key: `Topology.loads`."
          },
          "loadState": {
            "title": "ID of Associated LoadState Block",
            "type": "integer",
            "description": "Relationship to a `LoadState` block. Reverse key: `LoadState.loads`."
          }
        }
      },
      "ActuatorLoadUpdate": {
        "title": "ActuatorLoadUpdate",
        "required": ["name", "epsOutputType"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "epsOutputType": {
            "title": "Power Supply Bus",
            "allOf": [{ "$ref": "#/components/schemas/EpsOutputTypes" }],
            "description": "`CORE_OUTPUT` if connected to the regulated/unregulated Power Processor bus.  `BUS_REGULATOR` if connected to a constant voltage `BusRegulator` output."
          },
          "busRegulator": {
            "title": "ID of Associated BusRegulator Block",
            "type": "integer",
            "description": "Relationship to zero or one `BusRegulator` blocks. Reverse key: `BusRegulator.loads`."
          },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to zero or one `Topology` blocks. Reverse key: `Topology.loads`."
          }
        }
      },
      "Agent": {
        "title": "Agent",
        "required": ["name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "templateRef": {
            "title": "ID of Associated TemplateRef Block",
            "type": "integer",
            "description": "Relationship to zero or one `TemplateRef` blocks. Reverse key: `TemplateRef.agents`."
          },
          "differentiatingState": {
            "title": "Differentiatingstate",
            "type": "object",
            "default": {}
          },
          "peripheral": { "title": "Peripheral", "type": "boolean", "default": false },
          "targetMapping": {
            "title": "Targetmapping",
            "type": "object",
            "additionalProperties": { "type": "integer" },
            "default": {}
          }
        }
      },
      "AgentBG": {
        "title": "AgentBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/Agent" },
            "default": {}
          }
        }
      },
      "AlgorithmBG": {
        "title": "AlgorithmBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                { "$ref": "#/components/schemas/TriadAlgorithm" },
                { "$ref": "#/components/schemas/MEKFAlgorithm" },
                { "$ref": "#/components/schemas/EKFAlgorithm" },
                { "$ref": "#/components/schemas/GPSAlgorithm" },
                { "$ref": "#/components/schemas/SlidingModeAlgorithm" }
              ]
            },
            "default": {}
          }
        }
      },
      "AngularVelocitySensor": {
        "title": "AngularVelocitySensor",
        "required": ["name", "subsystem", "componentType", "oneSigmaPerAxisError"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": {
            "title": "Componenttype",
            "enum": ["ANGULAR_VELOCITY_SENSOR"],
            "type": "string"
          },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to zero or one `FieldOfView` blocks. Reverse key: `FieldOfView.sensor`."
          },
          "oneSigmaPerAxisError": { "title": "Onesigmaperaxiserror", "type": "number" },
          "measurement": { "title": "Measurement", "type": "array", "items": { "type": "number" } }
        }
      },
      "AngularVelocitySensorCreate": {
        "title": "AngularVelocitySensorCreate",
        "required": ["name", "oneSigmaPerAxisError"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to zero or one `FieldOfView` blocks. Reverse key: `FieldOfView.sensor`."
          },
          "oneSigmaPerAxisError": { "title": "Onesigmaperaxiserror", "type": "number" }
        }
      },
      "AngularVelocitySensorUpdate": {
        "title": "AngularVelocitySensorUpdate",
        "required": ["name", "oneSigmaPerAxisError"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to zero or one `FieldOfView` blocks. Reverse key: `FieldOfView.sensor`."
          },
          "oneSigmaPerAxisError": { "title": "Onesigmaperaxiserror", "type": "number" }
        }
      },
      "AsyncConOps": {
        "title": "AsyncConOps",
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "conditions": {
            "title": "IDs of Associated Condition Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Condition` blocks. Reverse key: `Condition.conOps`.",
            "default": []
          },
          "targets": {
            "title": "IDs of Associated Target Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Target` blocks. Reverse key: `Target.conOps`.",
            "default": []
          },
          "operationalModes": {
            "title": "IDs of Associated OperationalMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `OperationalMode` blocks. Reverse key: `OperationalMode.conOps`.",
            "default": []
          },
          "activeOpMode": {
            "title": "ID of Associated OperationalMode Block",
            "type": "integer",
            "description": "Relationship to zero or one `OperationalMode` blocks. "
          },
          "attitude": { "title": "Attitude", "type": "array", "items": { "type": "number" } }
        }
      },
      "AsyncOrbit": {
        "title": "AsyncOrbit",
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "initialStateDefType": {
            "title": "Initial State Definition Type",
            "allOf": [{ "$ref": "#/components/schemas/InitialStateDefType" }],
            "default": ""
          },
          "initialStateDefParams": {
            "title": "Initial State Definition Parameters",
            "anyOf": [
              { "$ref": "#/components/schemas/ISDPOrbitalElements" },
              { "$ref": "#/components/schemas/ISDPTle" },
              { "$ref": "#/components/schemas/ISDPEci" },
              { "$ref": "#/components/schemas/IROIss" },
              { "$ref": "#/components/schemas/IROGeostat" },
              { "$ref": "#/components/schemas/IROGeostatTransfer" },
              { "$ref": "#/components/schemas/IROPolarCirc" },
              { "$ref": "#/components/schemas/IROEquatorialCirc" },
              { "$ref": "#/components/schemas/IROSunSyncCirc" }
            ],
            "description": "May only be null initially."
          }
        }
      },
      "Battery": {
        "title": "Battery",
        "required": [
          "configurationType",
          "initialSoc",
          "maxChargeCurrentOverride",
          "maxDischargeCurrentOverride",
          "minSocOverride",
          "topology"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "configurationType": {
            "title": "Cell Configuration Type",
            "anyOf": [
              { "enum": [""], "type": "string" },
              { "$ref": "#/components/schemas/ConfigurationTypes" }
            ]
          },
          "initialSoc": {
            "title": "Initial SoC",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number",
            "description": "This field may only be null when first created."
          },
          "maxChargeCurrentOverride": {
            "title": "Max Charge Current Override",
            "minimum": 0.0,
            "type": "number",
            "description": "If null, the max charge current will be computed from the cell-pack composition."
          },
          "maxDischargeCurrentOverride": {
            "title": "Max Discharge Current Override",
            "minimum": 0.0,
            "type": "number",
            "description": "If null, the max discharge current will be computed from the cell-pack composition."
          },
          "minSocOverride": {
            "title": "Min SoC Override",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number",
            "description": "If null, the min state of charge will be computed from the cell-pack composition."
          },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to a `Topology` block. Reverse key: `Topology.battery`."
          },
          "packs": {
            "title": "IDs of Associated BatteryPack Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `BatteryPack` blocks. Reverse key: `BatteryPack.battery`.",
            "default": []
          }
        }
      },
      "BatteryBG": {
        "title": "BatteryBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/Battery" },
            "default": {}
          }
        }
      },
      "BatteryCell": {
        "title": "BatteryCell",
        "required": [
          "partNumber",
          "esr",
          "maxChargeCurrent",
          "maxDischargeCurrent",
          "minSoc",
          "curve",
          "capacity",
          "topology"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": { "title": "Partnumber", "maxLength": 32, "type": "string" },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "esr": { "title": "ESR [ohms])", "minimum": 0.0, "type": "number" },
          "maxChargeCurrent": {
            "title": "Max Charge Current [A]",
            "minimum": 0.0,
            "type": "number"
          },
          "maxDischargeCurrent": {
            "title": "Max Discharge Current [A]",
            "minimum": 0.0,
            "type": "number"
          },
          "minSoc": {
            "title": "Min State of Charge",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "curve": {
            "title": "SoC vs. Voc Curve",
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
            "items": { "type": "array", "items": { "minimum": 0.0, "type": "number" } },
            "description": "Cell state of charge vs. open-circuit voltage curve. The first list should contain all SoC values in increasing order and the second should contain all Voc values [V].  Each Voc value must be greater than or equal to the prior value."
          },
          "capacity": { "title": "Capacity [A-hr]", "minimum": 0.0, "type": "number" },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to a `Topology` block. Reverse key: `Topology.batteryCells`."
          },
          "packs": {
            "title": "IDs of Associated BatteryPack Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `BatteryPack` blocks. Reverse key: `BatteryPack.cell`.",
            "default": []
          }
        }
      },
      "BatteryCellBG": {
        "title": "BatteryCellBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/BatteryCell" },
            "default": {}
          }
        }
      },
      "BatteryCellCreate": {
        "title": "BatteryCellCreate",
        "required": [
          "partNumber",
          "esr",
          "maxChargeCurrent",
          "maxDischargeCurrent",
          "minSoc",
          "curve",
          "capacity",
          "topology"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": { "title": "Partnumber", "maxLength": 32, "type": "string" },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "esr": { "title": "ESR [ohms])", "minimum": 0.0, "type": "number" },
          "maxChargeCurrent": {
            "title": "Max Charge Current [A]",
            "minimum": 0.0,
            "type": "number"
          },
          "maxDischargeCurrent": {
            "title": "Max Discharge Current [A]",
            "minimum": 0.0,
            "type": "number"
          },
          "minSoc": {
            "title": "Min State of Charge",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "curve": {
            "title": "SoC vs. Voc Curve",
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
            "items": { "type": "array", "items": { "minimum": 0.0, "type": "number" } },
            "description": "Cell state of charge vs. open-circuit voltage curve. The first list should contain all SoC values in increasing order and the second should contain all Voc values [V].  Each Voc value must be greater than or equal to the prior value."
          },
          "capacity": { "title": "Capacity [A-hr]", "minimum": 0.0, "type": "number" },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to a `Topology` block. Reverse key: `Topology.batteryCells`."
          }
        }
      },
      "BatteryCellUpdate": {
        "title": "BatteryCellUpdate",
        "required": [
          "partNumber",
          "esr",
          "maxChargeCurrent",
          "maxDischargeCurrent",
          "minSoc",
          "curve",
          "capacity"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": { "title": "Partnumber", "maxLength": 32, "type": "string" },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "esr": { "title": "ESR [ohms])", "minimum": 0.0, "type": "number" },
          "maxChargeCurrent": {
            "title": "Max Charge Current [A]",
            "minimum": 0.0,
            "type": "number"
          },
          "maxDischargeCurrent": {
            "title": "Max Discharge Current [A]",
            "minimum": 0.0,
            "type": "number"
          },
          "minSoc": {
            "title": "Min State of Charge",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "curve": {
            "title": "SoC vs. Voc Curve",
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
            "items": { "type": "array", "items": { "minimum": 0.0, "type": "number" } },
            "description": "Cell state of charge vs. open-circuit voltage curve. The first list should contain all SoC values in increasing order and the second should contain all Voc values [V].  Each Voc value must be greater than or equal to the prior value."
          },
          "capacity": { "title": "Capacity [A-hr]", "minimum": 0.0, "type": "number" }
        }
      },
      "BatteryPack": {
        "title": "BatteryPack",
        "required": ["name", "subsystem", "numSeries", "numParallel", "cell", "battery"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": {
            "title": "Componenttype",
            "enum": ["BATTERY_PACK"],
            "type": "string",
            "default": "BATTERY_PACK"
          },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "numSeries": { "title": "# of Series Cells", "minimum": 1.0, "type": "integer" },
          "numParallel": { "title": "# of Parallel Cells", "minimum": 1.0, "type": "integer" },
          "cell": {
            "title": "ID of Associated BatteryCell Block",
            "type": "integer",
            "description": "Relationship to a `BatteryCell` block. Reverse key: `BatteryCell.packs`."
          },
          "battery": {
            "title": "ID of Associated Battery Block",
            "type": "integer",
            "description": "Relationship to a `Battery` block. Reverse key: `Battery.packs`."
          }
        }
      },
      "BatteryPackCreate": {
        "title": "BatteryPackCreate",
        "required": ["name", "subsystem", "numSeries", "numParallel", "cell", "battery"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "numSeries": { "title": "# of Series Cells", "minimum": 1.0, "type": "integer" },
          "numParallel": { "title": "# of Parallel Cells", "minimum": 1.0, "type": "integer" },
          "cell": {
            "title": "ID of Associated BatteryCell Block",
            "type": "integer",
            "description": "Relationship to a `BatteryCell` block. Reverse key: `BatteryCell.packs`."
          },
          "battery": {
            "title": "ID of Associated Battery Block",
            "type": "integer",
            "description": "Relationship to a `Battery` block. Reverse key: `Battery.packs`."
          }
        }
      },
      "BatteryPackUpdate": {
        "title": "BatteryPackUpdate",
        "required": ["name", "numSeries", "numParallel", "cell"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "numSeries": { "title": "# of Series Cells", "minimum": 1.0, "type": "integer" },
          "numParallel": { "title": "# of Parallel Cells", "minimum": 1.0, "type": "integer" },
          "cell": {
            "title": "ID of Associated BatteryCell Block",
            "type": "integer",
            "description": "Relationship to a `BatteryCell` block. Reverse key: `BatteryCell.packs`."
          }
        }
      },
      "BatteryUpdate": {
        "title": "BatteryUpdate",
        "required": [
          "configurationType",
          "initialSoc",
          "maxChargeCurrentOverride",
          "maxDischargeCurrentOverride",
          "minSocOverride"
        ],
        "type": "object",
        "properties": {
          "configurationType": {
            "title": "Cell Configuration Type",
            "anyOf": [
              { "enum": [""], "type": "string" },
              { "$ref": "#/components/schemas/ConfigurationTypes" }
            ]
          },
          "initialSoc": {
            "title": "Initial SoC",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number",
            "description": "This field may only be null when first created."
          },
          "maxChargeCurrentOverride": {
            "title": "Max Charge Current Override",
            "minimum": 0.0,
            "type": "number",
            "description": "If null, the max charge current will be computed from the cell-pack composition."
          },
          "maxDischargeCurrentOverride": {
            "title": "Max Discharge Current Override",
            "minimum": 0.0,
            "type": "number",
            "description": "If null, the max discharge current will be computed from the cell-pack composition."
          },
          "minSocOverride": {
            "title": "Min SoC Override",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number",
            "description": "If null, the min state of charge will be computed from the cell-pack composition."
          }
        }
      },
      "BodyFrameVector": {
        "title": "BodyFrameVector",
        "required": ["name", "definitionType", "definitionParams", "satellite"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "definitionType": {
            "title": "Definition Type",
            "allOf": [{ "$ref": "#/components/schemas/BodyFrameVectorTypes" }]
          },
          "definitionParams": {
            "title": "Definition Parameters",
            "anyOf": [
              { "$ref": "#/components/schemas/SphericalAngles" },
              { "$ref": "#/components/schemas/Vector" }
            ]
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to a `Satellite` block. Reverse key: `Satellite.bodyFrameVectors`."
          },
          "unitVector": { "title": "Unit Vector" },
          "surfaces": {
            "title": "IDs of Associated Surface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Surface` blocks. Reverse key: `Surface.bodyFrameVector`.",
            "default": []
          },
          "geocenterAngle": {
            "title": "Geocenterangle",
            "maximum": 360.0,
            "minimum": 0.0,
            "type": "number"
          },
          "heliocenterAngle": {
            "title": "Heliocenterangle",
            "maximum": 360.0,
            "minimum": 0.0,
            "type": "number",
            "default": 0
          },
          "ramAngle": { "title": "Ramangle", "maximum": 360.0, "minimum": 0.0, "type": "number" }
        }
      },
      "BodyFrameVectorBG": {
        "title": "BodyFrameVectorBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/BodyFrameVector" },
            "default": {}
          }
        }
      },
      "BodyFrameVectorCreate": {
        "title": "BodyFrameVectorCreate",
        "required": ["name", "definitionType", "definitionParams", "satellite"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "definitionType": {
            "title": "Definition Type",
            "allOf": [{ "$ref": "#/components/schemas/BodyFrameVectorTypes" }]
          },
          "definitionParams": {
            "title": "Definition Parameters",
            "anyOf": [
              { "$ref": "#/components/schemas/SphericalAngles" },
              { "$ref": "#/components/schemas/Vector" }
            ]
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to a `Satellite` block. Reverse key: `Satellite.bodyFrameVectors`."
          }
        }
      },
      "BodyFrameVectorTypes": {
        "title": "BodyFrameVectorTypes",
        "enum": ["SPHERICAL_ANGLES", "VECTOR"],
        "description": "An enumeration."
      },
      "BodyFrameVectorUpdate": {
        "title": "BodyFrameVectorUpdate",
        "required": ["name", "definitionType", "definitionParams"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "definitionType": {
            "title": "Definition Type",
            "allOf": [{ "$ref": "#/components/schemas/BodyFrameVectorTypes" }]
          },
          "definitionParams": {
            "title": "Definition Parameters",
            "anyOf": [
              { "$ref": "#/components/schemas/SphericalAngles" },
              { "$ref": "#/components/schemas/Vector" }
            ]
          }
        }
      },
      "BranchCreate": {
        "title": "BranchCreate",
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "description": { "title": "Description", "maxLength": 300, "type": "string" }
        }
      },
      "BranchDeleteRes": {
        "title": "BranchDeleteRes",
        "required": ["message", "deletedEntities"],
        "type": "object",
        "properties": {
          "message": { "title": "Message", "type": "string" },
          "deletedEntities": {
            "title": "Deletedentities",
            "type": "array",
            "items": { "$ref": "#/components/schemas/DeletedEntity" }
          }
        }
      },
      "BranchMerge": {
        "title": "BranchMerge",
        "type": "object",
        "properties": {
          "resolutions": {
            "title": "Resolutions",
            "type": "array",
            "items": { "enum": ["current", "incoming"], "type": "string" }
          }
        }
      },
      "BranchMergeConflictsRes": {
        "title": "BranchMergeConflictsRes",
        "required": ["conflicts"],
        "type": "object",
        "properties": {
          "conflicts": {
            "title": "Conflicts",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ConflictsObj" }
          }
        }
      },
      "BranchScenarioTemplateRes": {
        "title": "BranchScenarioTemplateRes",
        "required": [
          "name",
          "id",
          "dateCreated",
          "dateModified",
          "simulationRequired",
          "repository",
          "user",
          "uuid",
          "shareable",
          "sharePwRqd",
          "numSimulations",
          "dataSchema",
          "data"
        ],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "description": { "title": "Description", "maxLength": 300, "type": "string" },
          "id": { "title": "Id", "type": "integer" },
          "dateCreated": { "title": "Datecreated", "type": "string", "format": "date-time" },
          "dateModified": { "title": "Datemodified", "type": "string", "format": "date-time" },
          "simulationRequired": { "title": "Simulationrequired", "type": "boolean" },
          "repository": { "title": "Repository", "type": "integer" },
          "user": { "title": "User", "type": "integer" },
          "uuid": { "title": "Uuid", "type": "string", "format": "uuid" },
          "shareable": { "title": "Shareable", "type": "boolean" },
          "sharePwRqd": { "title": "Sharepwrqd", "type": "boolean" },
          "numSimulations": { "title": "Numsimulations", "type": "integer" },
          "dataSchema": { "title": "Dataschema", "type": "object" },
          "data": { "$ref": "#/components/schemas/ScenarioTemplate" }
        }
      },
      "BranchUpdate": {
        "title": "BranchUpdate",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "description": { "title": "Description", "maxLength": 300, "type": "string" },
          "shareable": { "title": "Shareable", "type": "boolean" },
          "password": { "title": "Password", "maxLength": 128, "minLength": 8, "type": "string" }
        }
      },
      "BranchVehicleTemplateRes": {
        "title": "BranchVehicleTemplateRes",
        "required": [
          "name",
          "id",
          "dateCreated",
          "dateModified",
          "simulationRequired",
          "repository",
          "user",
          "uuid",
          "shareable",
          "sharePwRqd",
          "numSimulations",
          "dataSchema",
          "data"
        ],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "description": { "title": "Description", "maxLength": 300, "type": "string" },
          "id": { "title": "Id", "type": "integer" },
          "dateCreated": { "title": "Datecreated", "type": "string", "format": "date-time" },
          "dateModified": { "title": "Datemodified", "type": "string", "format": "date-time" },
          "simulationRequired": { "title": "Simulationrequired", "type": "boolean" },
          "repository": { "title": "Repository", "type": "integer" },
          "user": { "title": "User", "type": "integer" },
          "uuid": { "title": "Uuid", "type": "string", "format": "uuid" },
          "shareable": { "title": "Shareable", "type": "boolean" },
          "sharePwRqd": { "title": "Sharepwrqd", "type": "boolean" },
          "numSimulations": { "title": "Numsimulations", "type": "integer" },
          "dataSchema": { "title": "Dataschema", "type": "object" },
          "data": { "$ref": "#/components/schemas/VehicleTemplate" }
        }
      },
      "BranchVerifyPassword": {
        "title": "BranchVerifyPassword",
        "required": ["password"],
        "type": "object",
        "properties": { "password": { "title": "Password", "type": "string" } }
      },
      "BusRegulator": {
        "title": "BusRegulator",
        "required": ["name", "inputType", "voltage", "maxOutputPower", "efficiency", "topology"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "inputType": {
            "title": "Input Type",
            "allOf": [{ "$ref": "#/components/schemas/InputTypes" }],
            "description": "The input source to the regulator. If `BUS_REGULATOR`, `inRegulator` must be defined."
          },
          "voltage": { "title": "Output Voltage [V]", "type": "number" },
          "maxOutputPower": { "title": "Max Output Power [W]", "minimum": 0.0, "type": "number" },
          "efficiency": { "title": "Efficiency", "maximum": 1.0, "minimum": 0.0, "type": "number" },
          "inRegulator": {
            "title": "ID of Associated BusRegulator Block",
            "type": "integer",
            "description": "Relationship to zero or one `BusRegulator` blocks. Reverse key: `BusRegulator.outRegulators`."
          },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to a `Topology` block. Reverse key: `Topology.busRegulators`."
          },
          "outRegulators": {
            "title": "IDs of Associated BusRegulator Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `BusRegulator` blocks. Reverse key: `BusRegulator.inRegulator`.",
            "default": []
          },
          "loads": {
            "title": "IDs of Associated Load Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Load` blocks. Reverse key: `Load.busRegulator`.",
            "default": []
          }
        }
      },
      "BusRegulatorBG": {
        "title": "BusRegulatorBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/BusRegulator" },
            "default": {}
          }
        }
      },
      "BusRegulatorCreate": {
        "title": "BusRegulatorCreate",
        "required": ["name", "inputType", "voltage", "maxOutputPower", "efficiency", "topology"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "inputType": {
            "title": "Input Type",
            "allOf": [{ "$ref": "#/components/schemas/InputTypes" }],
            "description": "The input source to the regulator. If `BUS_REGULATOR`, `inRegulator` must be defined."
          },
          "voltage": { "title": "Output Voltage [V]", "type": "number" },
          "maxOutputPower": { "title": "Max Output Power [W]", "minimum": 0.0, "type": "number" },
          "efficiency": { "title": "Efficiency", "maximum": 1.0, "minimum": 0.0, "type": "number" },
          "inRegulator": {
            "title": "ID of Associated BusRegulator Block",
            "type": "integer",
            "description": "Relationship to zero or one `BusRegulator` blocks. Reverse key: `BusRegulator.outRegulators`."
          },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to a `Topology` block. Reverse key: `Topology.busRegulators`."
          }
        }
      },
      "BusRegulatorUpdate": {
        "title": "BusRegulatorUpdate",
        "required": ["name", "inputType", "voltage", "maxOutputPower", "efficiency"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "inputType": {
            "title": "Input Type",
            "allOf": [{ "$ref": "#/components/schemas/InputTypes" }],
            "description": "The input source to the regulator. If `BUS_REGULATOR`, `inRegulator` must be defined."
          },
          "voltage": { "title": "Output Voltage [V]", "type": "number" },
          "maxOutputPower": { "title": "Max Output Power [W]", "minimum": 0.0, "type": "number" },
          "efficiency": { "title": "Efficiency", "maximum": 1.0, "minimum": 0.0, "type": "number" },
          "inRegulator": {
            "title": "ID of Associated BusRegulator Block",
            "type": "integer",
            "description": "Relationship to zero or one `BusRegulator` blocks. Reverse key: `BusRegulator.outRegulators`."
          }
        }
      },
      "Categories": {
        "title": "Categories",
        "enum": [
          "POWER",
          "CCDH",
          "COMMS",
          "ATTITUDE",
          "NAVIGATION",
          "THERMAL",
          "PROP",
          "PAYLOAD",
          "CUSTOM"
        ],
        "description": "An enumeration."
      },
      "CelestialPointingDirections": {
        "title": "CelestialPointingDirections",
        "enum": ["SUN", "MOON", "EARTH"],
        "description": "An enumeration."
      },
      "CelestialTarget": {
        "title": "CelestialTarget",
        "required": ["name", "conOps", "polynomialEphemerisBody"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.targets`."
          },
          "targetType": {
            "title": "Targettype",
            "enum": ["CELESTIAL_TARGET"],
            "type": "string",
            "default": "CELESTIAL_TARGET"
          },
          "conditions_A": {
            "title": "IDs of Associated Condition Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Condition` blocks. Reverse key: `Condition.targetA`.",
            "default": []
          },
          "conditions_B": {
            "title": "IDs of Associated Condition Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Condition` blocks. Reverse key: `Condition.targetB`.",
            "default": []
          },
          "targetGroups": {
            "title": "IDs of Associated TargetGroup Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `TargetGroup` blocks. Reverse key: `TargetGroup.targets`.",
            "default": []
          },
          "pointingModes_A": {
            "title": "IDs of Associated PointingMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `PointingMode` blocks. Reverse key: `PointingMode.targetA`.",
            "default": []
          },
          "pointingModes_B": {
            "title": "IDs of Associated PointingMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `PointingMode` blocks. Reverse key: `PointingMode.targetB`.",
            "default": []
          },
          "targetGroupAssociations": {
            "title": "IDs of Associated TargetGroupAssociation Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `TargetGroupAssociation` blocks. Reverse key: `TargetGroupAssociation.target`.",
            "default": []
          },
          "polynomialEphemerisBody": {
            "title": "Polynomial Ephemeris Body",
            "allOf": [{ "$ref": "#/components/schemas/PolynomialEphemerisBody" }],
            "description": "The celestial body to target."
          }
        }
      },
      "CelestialTargetCreate": {
        "title": "CelestialTargetCreate",
        "required": ["name", "polynomialEphemerisBody", "conOps"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "targetType": {
            "title": "Targettype",
            "enum": ["CELESTIAL_TARGET"],
            "type": "string",
            "default": "CELESTIAL_TARGET"
          },
          "polynomialEphemerisBody": {
            "title": "Polynomial Ephemeris Body",
            "allOf": [{ "$ref": "#/components/schemas/PolynomialEphemerisBody" }],
            "description": "The celestial body to target."
          },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.targets`."
          }
        }
      },
      "CelestialTargetUpdate": {
        "title": "CelestialTargetUpdate",
        "required": ["name", "polynomialEphemerisBody"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "targetType": {
            "title": "Targettype",
            "enum": ["CELESTIAL_TARGET"],
            "type": "string",
            "default": "CELESTIAL_TARGET"
          },
          "polynomialEphemerisBody": {
            "title": "Polynomial Ephemeris Body",
            "allOf": [{ "$ref": "#/components/schemas/PolynomialEphemerisBody" }],
            "description": "The celestial body to target."
          }
        }
      },
      "CelestialVector": {
        "title": "CelestialVector",
        "required": ["name", "satellite", "celestialPointingDirection"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "truth": { "title": "Truth", "type": "array", "items": { "type": "number" } },
          "estimate": { "title": "Estimate", "type": "array", "items": { "type": "number" } },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to a `Satellite` block. Reverse key: `Satellite.vectors`."
          },
          "pointingModes_A": {
            "title": "IDs of Associated PointingMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `PointingMode` blocks. Reverse key: `PointingMode.lockVector`.",
            "default": []
          },
          "pointingModes_B": {
            "title": "IDs of Associated PointingMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `PointingMode` blocks. Reverse key: `PointingMode.maxAlignVector`.",
            "default": []
          },
          "FOVConstraints": {
            "title": "IDs of Associated Vector Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Vector` blocks. Reverse key: `Vector.vector`.",
            "default": []
          },
          "directionSensors": {
            "title": "IDs of Associated DirectionSensor Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `DirectionSensor` blocks. Reverse key: `DirectionSensor.vector`.",
            "default": []
          },
          "vectorSensors": {
            "title": "IDs of Associated VectorSensor Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `VectorSensor` blocks. Reverse key: `VectorSensor.vector`.",
            "default": []
          },
          "celestialPointingDirection": {
            "$ref": "#/components/schemas/CelestialPointingDirections"
          }
        }
      },
      "CelestialVectorBG": {
        "title": "CelestialVectorBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/CelestialVector" },
            "default": {}
          }
        }
      },
      "CelestialVectorCreate": {
        "title": "CelestialVectorCreate",
        "required": ["name", "celestialPointingDirection"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "celestialPointingDirection": {
            "$ref": "#/components/schemas/CelestialPointingDirections"
          }
        }
      },
      "CelestialVectorUpdate": {
        "title": "CelestialVectorUpdate",
        "required": ["name", "celestialPointingDirection"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "celestialPointingDirection": {
            "$ref": "#/components/schemas/CelestialPointingDirections"
          }
        }
      },
      "CircularFieldOfView": {
        "title": "CircularFieldOfView",
        "required": ["name", "fieldOfViewType", "boresightBodyFrameVector", "sensor", "halfAngle"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "fieldOfViewType": {
            "title": "Fieldofviewtype",
            "enum": ["CIRC_FIELD_OF_VIEW"],
            "type": "string"
          },
          "boresightBodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. Reverse key: `BodyFrameVector.fieldsOfView`."
          },
          "sensor": {
            "title": "ID of Associated Sensor Block",
            "type": "integer",
            "description": "Relationship to a `Sensor` block. Reverse key: `Sensor.fieldOfView`."
          },
          "constraints": {
            "title": "IDs of Associated FOVConstraint Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `FOVConstraint` blocks. Reverse key: `FOVConstraint.fieldOfView`.",
            "default": []
          },
          "halfAngle": { "title": "Halfangle", "maximum": 180.0, "minimum": 0.0, "type": "number" }
        }
      },
      "ClockConfig": {
        "title": "ClockConfig",
        "required": ["startTime", "stopTime"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "startTime": { "title": "Starttime", "type": "number" },
          "stopTime": { "title": "Stoptime", "type": "number" },
          "realTime": { "title": "Realtime", "type": "boolean", "default": false }
        }
      },
      "ClockConfigBG": {
        "title": "ClockConfigBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/ClockConfig" },
            "default": {}
          }
        }
      },
      "Collection": {
        "title": "Collection",
        "required": ["latestPrimeId"],
        "type": "object",
        "properties": {
          "latestPrimeId": { "title": "Latestprimeid", "type": "integer" },
          "blockToBlockGroupMap": {
            "title": "Blocktoblockgroupmap",
            "type": "object",
            "additionalProperties": { "type": "string" },
            "default": {}
          }
        }
      },
      "Component": {
        "title": "Component",
        "required": ["name", "subsystem"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": {
            "title": "Componenttype",
            "enum": ["GENERIC"],
            "type": "string",
            "default": "GENERIC"
          },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" }
        }
      },
      "ComponentBG": {
        "title": "ComponentBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                { "$ref": "#/components/schemas/Component" },
                { "$ref": "#/components/schemas/BatteryPack" },
                { "$ref": "#/components/schemas/SolarPanel" },
                { "$ref": "#/components/schemas/QuasiRegDetTopology" },
                { "$ref": "#/components/schemas/FullyRegDetTopology" },
                { "$ref": "#/components/schemas/SingleConvHybridTopology" },
                { "$ref": "#/components/schemas/TwoConvMpptTopology" },
                { "$ref": "#/components/schemas/SingleConvMpptTopology" },
                { "$ref": "#/components/schemas/Topology" },
                { "$ref": "#/components/schemas/ReactionWheel" },
                { "$ref": "#/components/schemas/Magnetorquer" },
                { "$ref": "#/components/schemas/DirectionSensor" },
                { "$ref": "#/components/schemas/OpticalAttitudeSensor" },
                { "$ref": "#/components/schemas/VectorSensor" },
                { "$ref": "#/components/schemas/PositionSensor" },
                { "$ref": "#/components/schemas/AngularVelocitySensor" },
                { "$ref": "#/components/schemas/Cooler" },
                { "$ref": "#/components/schemas/Heater" }
              ]
            },
            "default": {}
          }
        }
      },
      "ComponentCreate": {
        "title": "ComponentCreate",
        "required": ["name", "subsystem"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          }
        }
      },
      "ComponentUpdate": {
        "title": "ComponentUpdate",
        "required": ["name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          }
        }
      },
      "ConOps": {
        "title": "ConOps",
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "conditions": {
            "title": "IDs of Associated Condition Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Condition` blocks. Reverse key: `Condition.conOps`.",
            "default": []
          },
          "targets": {
            "title": "IDs of Associated Target Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Target` blocks. Reverse key: `Target.conOps`.",
            "default": []
          },
          "operationalModes": {
            "title": "IDs of Associated OperationalMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `OperationalMode` blocks. Reverse key: `OperationalMode.conOps`.",
            "default": []
          },
          "activeOpMode": {
            "title": "ID of Associated OperationalMode Block",
            "type": "integer",
            "description": "Relationship to zero or one `OperationalMode` blocks. "
          },
          "attitude": { "title": "Attitude", "type": "array", "items": { "type": "number" } }
        }
      },
      "ConOpsBG": {
        "title": "ConOpsBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                { "$ref": "#/components/schemas/ConOps" },
                { "$ref": "#/components/schemas/AsyncConOps" }
              ]
            },
            "default": {}
          }
        }
      },
      "Condition": {
        "title": "Condition",
        "required": [
          "name",
          "relationship",
          "paramACategory",
          "paramBCategory",
          "paramA",
          "conOps"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "relationship": {
            "title": "Relationship",
            "allOf": [{ "$ref": "#/components/schemas/ConditionRelationship" }]
          },
          "paramACategory": {
            "title": "Parameter A Category",
            "allOf": [{ "$ref": "#/components/schemas/ParameterACategories" }]
          },
          "paramBCategory": {
            "title": "Parameter B Category",
            "allOf": [{ "$ref": "#/components/schemas/ParameterBCategories" }]
          },
          "paramA": {
            "title": "Parameter A Selection",
            "allOf": [{ "$ref": "#/components/schemas/Parameters" }]
          },
          "paramB": {
            "title": "Parameter B Selection",
            "allOf": [{ "$ref": "#/components/schemas/Parameters" }],
            "default": ""
          },
          "scalar": {
            "title": "Scalar Value",
            "type": "number",
            "description": "Set if `paramBCategory` == `SCALAR`."
          },
          "targetA": {
            "title": "ID of Associated Target Block",
            "type": "integer",
            "description": "Relationship to zero or one `Target` blocks. Reverse key: `Target.conditions_A`."
          },
          "targetB": {
            "title": "ID of Associated Target Block",
            "type": "integer",
            "description": "Relationship to zero or one `Target` blocks. Reverse key: `Target.conditions_B`."
          },
          "targetGroupA": {
            "title": "ID of Associated TargetGroup Block",
            "type": "integer",
            "description": "Relationship to zero or one `TargetGroup` blocks. Reverse key: `TargetGroup.groupConditions_A`."
          },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.conditions`."
          },
          "operationalModes": {
            "title": "IDs of Associated OperationalMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `OperationalMode` blocks. Reverse key: `OperationalMode.conditions`.",
            "default": []
          }
        }
      },
      "ConditionBG": {
        "title": "ConditionBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                { "$ref": "#/components/schemas/GroupCondition" },
                { "$ref": "#/components/schemas/Condition" }
              ]
            },
            "default": {}
          }
        }
      },
      "ConditionCreate": {
        "title": "ConditionCreate",
        "required": [
          "name",
          "relationship",
          "paramACategory",
          "paramBCategory",
          "paramA",
          "conOps"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "relationship": {
            "title": "Relationship",
            "allOf": [{ "$ref": "#/components/schemas/ConditionRelationship" }]
          },
          "paramACategory": {
            "title": "Parameter A Category",
            "allOf": [{ "$ref": "#/components/schemas/ParameterACategories" }]
          },
          "paramBCategory": {
            "title": "Parameter B Category",
            "allOf": [{ "$ref": "#/components/schemas/ParameterBCategories" }]
          },
          "paramA": {
            "title": "Parameter A Selection",
            "allOf": [{ "$ref": "#/components/schemas/Parameters" }]
          },
          "paramB": {
            "title": "Parameter B Selection",
            "allOf": [{ "$ref": "#/components/schemas/Parameters" }],
            "default": ""
          },
          "scalar": {
            "title": "Scalar Value",
            "type": "number",
            "description": "Set if `paramBCategory` == `SCALAR`."
          },
          "targetA": {
            "title": "ID of Associated Target Block",
            "type": "integer",
            "description": "Relationship to zero or one `Target` blocks. Reverse key: `Target.conditions_A`."
          },
          "targetB": {
            "title": "ID of Associated Target Block",
            "type": "integer",
            "description": "Relationship to zero or one `Target` blocks. Reverse key: `Target.conditions_B`."
          },
          "targetGroupA": {
            "title": "ID of Associated TargetGroup Block",
            "type": "integer",
            "description": "Relationship to zero or one `TargetGroup` blocks. Reverse key: `TargetGroup.groupConditions_A`."
          },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.conditions`."
          }
        }
      },
      "ConditionRelationship": {
        "title": "ConditionRelationship",
        "enum": ["GREATER", "LESS", "GREATER_EQUAL", "LESS_EQUAL", "EQUAL", "NOT_EQUAL"],
        "description": "An enumeration."
      },
      "ConditionUpdate": {
        "title": "ConditionUpdate",
        "required": ["name", "relationship", "paramACategory", "paramBCategory", "paramA"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "relationship": {
            "title": "Relationship",
            "allOf": [{ "$ref": "#/components/schemas/ConditionRelationship" }]
          },
          "paramACategory": {
            "title": "Parameter A Category",
            "allOf": [{ "$ref": "#/components/schemas/ParameterACategories" }]
          },
          "paramBCategory": {
            "title": "Parameter B Category",
            "allOf": [{ "$ref": "#/components/schemas/ParameterBCategories" }]
          },
          "paramA": {
            "title": "Parameter A Selection",
            "allOf": [{ "$ref": "#/components/schemas/Parameters" }]
          },
          "paramB": {
            "title": "Parameter B Selection",
            "allOf": [{ "$ref": "#/components/schemas/Parameters" }],
            "default": ""
          },
          "scalar": {
            "title": "Scalar Value",
            "type": "number",
            "description": "Set if `paramBCategory` == `SCALAR`."
          },
          "targetA": {
            "title": "ID of Associated Target Block",
            "type": "integer",
            "description": "Relationship to zero or one `Target` blocks. Reverse key: `Target.conditions_A`."
          },
          "targetB": {
            "title": "ID of Associated Target Block",
            "type": "integer",
            "description": "Relationship to zero or one `Target` blocks. Reverse key: `Target.conditions_B`."
          },
          "targetGroupA": {
            "title": "ID of Associated TargetGroup Block",
            "type": "integer",
            "description": "Relationship to zero or one `TargetGroup` blocks. Reverse key: `TargetGroup.groupConditions_A`."
          }
        }
      },
      "ConfigurationTypes": {
        "title": "ConfigurationTypes",
        "enum": ["SERIES", "PARALLEL"],
        "description": "An enumeration."
      },
      "ConflictsObj": {
        "title": "ConflictsObj",
        "required": ["current", "incoming", "block"],
        "type": "object",
        "properties": {
          "current": { "title": "Current", "type": "object" },
          "incoming": { "title": "Incoming", "type": "object" },
          "block": { "title": "Block", "type": "string" }
        }
      },
      "ConstantLoad": {
        "title": "ConstantLoad",
        "required": ["name", "epsOutputType", "loadState", "loadDefType", "loadDefParams"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "epsOutputType": {
            "title": "Power Supply Bus",
            "allOf": [{ "$ref": "#/components/schemas/EpsOutputTypes" }],
            "description": "`CORE_OUTPUT` if connected to the regulated/unregulated Power Processor bus.  `BUS_REGULATOR` if connected to a constant voltage `BusRegulator` output."
          },
          "busRegulator": {
            "title": "ID of Associated BusRegulator Block",
            "type": "integer",
            "description": "Relationship to zero or one `BusRegulator` blocks. Reverse key: `BusRegulator.loads`."
          },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to zero or one `Topology` blocks. Reverse key: `Topology.loads`."
          },
          "loadState": {
            "title": "ID of Associated LoadState Block",
            "type": "integer",
            "description": "Relationship to a `LoadState` block. Reverse key: `LoadState.loads`."
          },
          "loadDefType": {
            "title": "Load Definition Type",
            "allOf": [{ "$ref": "#/components/schemas/ConstantLoadDefinitionTypes" }]
          },
          "loadDefParams": {
            "title": "Load Definition Parameters",
            "anyOf": [
              { "$ref": "#/components/schemas/ConstantPower" },
              { "$ref": "#/components/schemas/ConstantResistance" }
            ]
          },
          "dutyCyclePeriod": {
            "title": "Duty Cycle Period [min]",
            "exclusiveMinimum": 0.0,
            "type": "number"
          },
          "dutyCyclePercentage": {
            "title": "Duty Cycle Percentage",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          }
        }
      },
      "ConstantLoadCreate": {
        "title": "ConstantLoadCreate",
        "required": ["name", "epsOutputType", "loadState", "loadDefType", "loadDefParams"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "epsOutputType": {
            "title": "Power Supply Bus",
            "allOf": [{ "$ref": "#/components/schemas/EpsOutputTypes" }],
            "description": "`CORE_OUTPUT` if connected to the regulated/unregulated Power Processor bus.  `BUS_REGULATOR` if connected to a constant voltage `BusRegulator` output."
          },
          "busRegulator": {
            "title": "ID of Associated BusRegulator Block",
            "type": "integer",
            "description": "Relationship to zero or one `BusRegulator` blocks. Reverse key: `BusRegulator.loads`."
          },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to zero or one `Topology` blocks. Reverse key: `Topology.loads`."
          },
          "loadState": {
            "title": "ID of Associated LoadState Block",
            "type": "integer",
            "description": "Relationship to a `LoadState` block. Reverse key: `LoadState.loads`."
          },
          "loadDefType": {
            "title": "Load Definition Type",
            "allOf": [{ "$ref": "#/components/schemas/ConstantLoadDefinitionTypes" }]
          },
          "loadDefParams": {
            "title": "Load Definition Parameters",
            "anyOf": [
              { "$ref": "#/components/schemas/ConstantPower" },
              { "$ref": "#/components/schemas/ConstantResistance" }
            ]
          },
          "dutyCyclePeriod": {
            "title": "Duty Cycle Period [min]",
            "exclusiveMinimum": 0.0,
            "type": "number"
          },
          "dutyCyclePercentage": {
            "title": "Duty Cycle Percentage",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          }
        }
      },
      "ConstantLoadDefinitionTypes": {
        "title": "ConstantLoadDefinitionTypes",
        "enum": ["CONSTANT_POWER", "CONSTANT_RESISTANCE"],
        "description": "An enumeration."
      },
      "ConstantLoadUpdate": {
        "title": "ConstantLoadUpdate",
        "required": ["name", "epsOutputType", "loadDefType", "loadDefParams"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "epsOutputType": {
            "title": "Power Supply Bus",
            "allOf": [{ "$ref": "#/components/schemas/EpsOutputTypes" }],
            "description": "`CORE_OUTPUT` if connected to the regulated/unregulated Power Processor bus.  `BUS_REGULATOR` if connected to a constant voltage `BusRegulator` output."
          },
          "busRegulator": {
            "title": "ID of Associated BusRegulator Block",
            "type": "integer",
            "description": "Relationship to zero or one `BusRegulator` blocks. Reverse key: `BusRegulator.loads`."
          },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to zero or one `Topology` blocks. Reverse key: `Topology.loads`."
          },
          "loadDefType": {
            "title": "Load Definition Type",
            "allOf": [{ "$ref": "#/components/schemas/ConstantLoadDefinitionTypes" }]
          },
          "loadDefParams": {
            "title": "Load Definition Parameters",
            "anyOf": [
              { "$ref": "#/components/schemas/ConstantPower" },
              { "$ref": "#/components/schemas/ConstantResistance" }
            ]
          },
          "dutyCyclePeriod": {
            "title": "Duty Cycle Period [min]",
            "exclusiveMinimum": 0.0,
            "type": "number"
          },
          "dutyCyclePercentage": {
            "title": "Duty Cycle Percentage",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          }
        }
      },
      "ConstantPower": {
        "title": "ConstantPower",
        "required": ["power"],
        "type": "object",
        "properties": { "power": { "title": "Power [W]", "minimum": 0.0, "type": "number" } }
      },
      "ConstantResistance": {
        "title": "ConstantResistance",
        "required": ["resistance"],
        "type": "object",
        "properties": {
          "resistance": { "title": "Resistance [ohms]", "exclusiveMinimum": 0.0, "type": "number" }
        }
      },
      "Cooler": {
        "title": "Cooler",
        "required": [
          "name",
          "subsystem",
          "componentType",
          "onRegHeatFlowRate",
          "heatFlowRateRating",
          "controlledComponent",
          "efficiency"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": { "title": "Componenttype", "enum": ["COOLER"], "type": "string" },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.coolerA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.coolerB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "onRegHeatFlowRate": {
            "title": "Onregheatflowrate",
            "exclusiveMinimum": 0.0,
            "type": "number"
          },
          "heatFlowRateRating": { "title": "Heatflowraterating", "type": "number" },
          "controlledComponent": {
            "title": "ID of Associated Component Block",
            "type": "integer",
            "description": "Relationship to a `Component` block. Reverse key: `Component.tempControllers`."
          },
          "regHeatFlowRate": { "title": "Regheatflowrate", "type": "number" },
          "tempControllerStates": {
            "title": "IDs of Associated TempControllerState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `TempControllerState` blocks. Reverse key: `TempControllerState.tempController`.",
            "default": []
          },
          "efficiency": { "title": "Efficiency", "maximum": 1.0, "minimum": 0.0, "type": "number" },
          "sinkHeatFlowRate": { "title": "Sinkheatflowrate", "type": "number" }
        }
      },
      "CoolerCreate": {
        "title": "CoolerCreate",
        "required": [
          "name",
          "onRegHeatFlowRate",
          "heatFlowRateRating",
          "controlledComponent",
          "efficiency"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "onRegHeatFlowRate": {
            "title": "Onregheatflowrate",
            "exclusiveMinimum": 0.0,
            "type": "number"
          },
          "heatFlowRateRating": { "title": "Heatflowraterating", "type": "number" },
          "controlledComponent": {
            "title": "ID of Associated Component Block",
            "type": "integer",
            "description": "Relationship to a `Component` block. Reverse key: `Component.tempControllers`."
          },
          "efficiency": { "title": "Efficiency", "maximum": 1.0, "minimum": 0.0, "type": "number" }
        }
      },
      "CoolerUpdate": {
        "title": "CoolerUpdate",
        "required": [
          "name",
          "onRegHeatFlowRate",
          "heatFlowRateRating",
          "controlledComponent",
          "efficiency"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "onRegHeatFlowRate": {
            "title": "Onregheatflowrate",
            "exclusiveMinimum": 0.0,
            "type": "number"
          },
          "heatFlowRateRating": { "title": "Heatflowraterating", "type": "number" },
          "controlledComponent": {
            "title": "ID of Associated Component Block",
            "type": "integer",
            "description": "Relationship to a `Component` block. Reverse key: `Component.tempControllers`."
          },
          "efficiency": { "title": "Efficiency", "maximum": 1.0, "minimum": 0.0, "type": "number" }
        }
      },
      "DeletedEntity": {
        "title": "DeletedEntity",
        "required": ["model", "id"],
        "type": "object",
        "properties": {
          "model": { "title": "Model", "type": "string" },
          "id": { "title": "Id", "type": "integer" }
        }
      },
      "DirectionSensor": {
        "title": "DirectionSensor",
        "required": ["name", "subsystem", "componentType", "oneSigmaAngleError", "vector"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": {
            "title": "Componenttype",
            "enum": ["DIRECTION_SENSOR"],
            "type": "string"
          },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to zero or one `FieldOfView` blocks. Reverse key: `FieldOfView.sensor`."
          },
          "oneSigmaAngleError": { "title": "Onesigmaangleerror", "type": "number" },
          "vector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. Reverse key: `Vector.directionSensors`."
          },
          "truth": { "title": "Truth", "type": "array", "items": { "type": "number" } },
          "measurement": { "title": "Measurement", "type": "array", "items": { "type": "number" } }
        }
      },
      "DirectionSensorCreate": {
        "title": "DirectionSensorCreate",
        "required": ["name", "oneSigmaAngleError", "vector"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to zero or one `FieldOfView` blocks. Reverse key: `FieldOfView.sensor`."
          },
          "oneSigmaAngleError": { "title": "Onesigmaangleerror", "type": "number" },
          "vector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. Reverse key: `Vector.directionSensors`."
          }
        }
      },
      "DirectionSensorUpdate": {
        "title": "DirectionSensorUpdate",
        "required": ["name", "oneSigmaAngleError", "vector"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to zero or one `FieldOfView` blocks. Reverse key: `FieldOfView.sensor`."
          },
          "oneSigmaAngleError": { "title": "Onesigmaangleerror", "type": "number" },
          "vector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. Reverse key: `Vector.directionSensors`."
          }
        }
      },
      "EKFAlgorithm": {
        "title": "EKFAlgorithm",
        "required": ["name", "rate", "orbitDetType"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "rate": { "title": "Update Rate [Hz]", "type": "number" },
          "orbitDetType": { "title": "Orbitdettype", "enum": ["EKF"], "type": "string" }
        }
      },
      "EpsOutputTypes": {
        "title": "EpsOutputTypes",
        "enum": ["CORE_OUTPUT", "BUS_REGULATOR"],
        "description": "An enumeration."
      },
      "FOVConstraint": {
        "title": "FOVConstraint",
        "required": ["name", "keepout", "destructive", "vector", "fieldOfView"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "keepout": { "title": "Keepout", "type": "boolean" },
          "destructive": { "title": "Destructive", "type": "boolean" },
          "vector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. Reverse key: `Vector.FOVConstraints`."
          },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to a `FieldOfView` block. Reverse key: `FieldOfView.constraints`."
          },
          "compliance": { "title": "Compliance", "type": "boolean" }
        }
      },
      "FOVConstraintBG": {
        "title": "FOVConstraintBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/FOVConstraint" },
            "default": {}
          }
        }
      },
      "FOVConstraintCreate": {
        "title": "FOVConstraintCreate",
        "required": ["name", "keepout", "destructive", "vector", "fieldOfView"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "keepout": { "title": "Keepout", "type": "boolean" },
          "destructive": { "title": "Destructive", "type": "boolean" },
          "vector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. Reverse key: `Vector.FOVConstraints`."
          },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to a `FieldOfView` block. Reverse key: `FieldOfView.constraints`."
          }
        }
      },
      "FOVConstraintUpdate": {
        "title": "FOVConstraintUpdate",
        "required": ["name", "keepout", "destructive", "vector", "fieldOfView"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "keepout": { "title": "Keepout", "type": "boolean" },
          "destructive": { "title": "Destructive", "type": "boolean" },
          "vector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. Reverse key: `Vector.FOVConstraints`."
          },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to a `FieldOfView` block. Reverse key: `FieldOfView.constraints`."
          }
        }
      },
      "FieldOfView": {
        "title": "FieldOfView",
        "required": ["name", "fieldOfViewType", "boresightBodyFrameVector", "sensor"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "fieldOfViewType": { "$ref": "#/components/schemas/FieldOfViewTypes" },
          "boresightBodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. Reverse key: `BodyFrameVector.fieldsOfView`."
          },
          "sensor": {
            "title": "ID of Associated Sensor Block",
            "type": "integer",
            "description": "Relationship to a `Sensor` block. Reverse key: `Sensor.fieldOfView`."
          },
          "constraints": {
            "title": "IDs of Associated FOVConstraint Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `FOVConstraint` blocks. Reverse key: `FOVConstraint.fieldOfView`.",
            "default": []
          }
        }
      },
      "FieldOfViewBG": {
        "title": "FieldOfViewBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                { "$ref": "#/components/schemas/CircularFieldOfView" },
                { "$ref": "#/components/schemas/RectangularFieldOfView" }
              ]
            },
            "default": {}
          }
        }
      },
      "FieldOfViewCreate": {
        "title": "FieldOfViewCreate",
        "required": ["name", "fieldOfViewType", "boresightBodyFrameVector"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "fieldOfViewType": { "$ref": "#/components/schemas/FieldOfViewTypes" },
          "boresightBodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. Reverse key: `BodyFrameVector.fieldsOfView`."
          }
        }
      },
      "FieldOfViewTypes": {
        "title": "FieldOfViewTypes",
        "enum": ["CIRC_FIELD_OF_VIEW", "RECT_FIELD_OF_VIEW"],
        "description": "An enumeration."
      },
      "FieldOfViewUpdate": {
        "title": "FieldOfViewUpdate",
        "required": ["name", "fieldOfViewType", "boresightBodyFrameVector"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "fieldOfViewType": { "$ref": "#/components/schemas/FieldOfViewTypes" },
          "boresightBodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. Reverse key: `BodyFrameVector.fieldsOfView`."
          }
        }
      },
      "FixedSurface": {
        "title": "FixedSurface",
        "required": [
          "name",
          "motionType",
          "area",
          "surfaceCentroid",
          "bodyFrameVector",
          "surfaceMaterial",
          "satellite"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "motionType": { "title": "Motiontype", "enum": ["FIXED"], "type": "string" },
          "area": { "title": "Area [m^2]", "exclusiveMinimum": 0.0, "type": "number" },
          "surfaceCentroid": {
            "title": "Centeroid [Vector3[m]]",
            "type": "array",
            "items": { "type": "number" }
          },
          "bodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. Reverse key: `BodyFrameVector.surfaces`."
          },
          "surfaceMaterial": {
            "title": "ID of Associated SurfaceMaterial Block",
            "type": "integer",
            "description": "Relationship to a `SurfaceMaterial` block. Reverse key: `SurfaceMaterial.surfaces`."
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to a `Satellite` block. Reverse key: `Satellite.surfaces`."
          },
          "panels": {
            "title": "IDs of Associated SolarPanel Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarPanel` blocks. Reverse key: `SolarPanel.surface`.",
            "default": []
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.surfaceA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.surfaceB`.",
            "default": []
          },
          "heliocenterAngle": { "title": "Heliocenterangle", "type": "number" },
          "solarViewFactor": {
            "title": "Solarviewfactor",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "sat2Sun": { "title": "Sat2Sun", "type": "array", "items": { "type": "number" } },
          "earthIrHeatFlowRate": { "title": "Earthirheatflowrate", "type": "number" },
          "earthAlbedoHeatFlowRate": { "title": "Earthalbedoheatflowrate", "type": "number" },
          "solarHeatFlowRate": { "title": "Solarheatflowrate", "type": "number" },
          "spaceHeatFlowRate": { "title": "Spaceheatflowrate", "type": "number" },
          "heatFlowRate": { "title": "Heatflowrate", "type": "number" },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" }
        }
      },
      "FullyRegDetTopology": {
        "title": "FullyRegDetTopology",
        "required": ["name", "subsystem", "componentType", "topologyType", "battery"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": {
            "title": "Componenttype",
            "enum": ["POWER_PROCESSOR"],
            "type": "string"
          },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "topologyType": { "title": "Topologytype", "enum": ["FULLY_REG_DET"], "type": "string" },
          "topologyParams": {
            "title": "Topology Definition Parameters",
            "anyOf": [
              { "$ref": "#/components/schemas/TopologyParamFRD" },
              { "$ref": "#/components/schemas/TopologyParamSCH" },
              { "$ref": "#/components/schemas/TopologyParamQRD" },
              { "$ref": "#/components/schemas/TopologyParamTCM" },
              { "$ref": "#/components/schemas/TopologyParamSCM" }
            ],
            "description": "This field may only be undefined initially.  It is required on first update."
          },
          "loads": {
            "title": "IDs of Associated Load Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Load` blocks. Reverse key: `Load.topology`.",
            "default": []
          },
          "battery": {
            "title": "ID of Associated Battery Block",
            "type": "integer",
            "description": "Relationship to a `Battery` block. Reverse key: `Battery.topology`."
          },
          "batteryCells": {
            "title": "IDs of Associated BatteryCell Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `BatteryCell` blocks. Reverse key: `BatteryCell.topology`.",
            "default": []
          },
          "busRegulators": {
            "title": "IDs of Associated BusRegulator Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `BusRegulator` blocks. Reverse key: `BusRegulator.topology`.",
            "default": []
          },
          "solarArrays": {
            "title": "IDs of Associated SolarArray Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarArray` blocks. Reverse key: `SolarArray.topology`.",
            "default": []
          },
          "solarCells": {
            "title": "IDs of Associated SolarCell Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarCell` blocks. Reverse key: `SolarCell.topology`.",
            "default": []
          }
        }
      },
      "GPSAlgorithm": {
        "title": "GPSAlgorithm",
        "required": ["name", "rate", "orbitDetType", "positionSensor"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "rate": { "title": "Update Rate [Hz]", "type": "number" },
          "orbitDetType": { "title": "Orbitdettype", "enum": ["GPS"], "type": "string" },
          "positionSensor": {
            "title": "ID of Associated PositionSensor Block",
            "type": "integer",
            "description": "Relationship to a `PositionSensor` block. "
          }
        }
      },
      "GroundTarget": {
        "title": "GroundTarget",
        "required": ["name", "conOps"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.targets`."
          },
          "targetType": {
            "title": "Targettype",
            "enum": ["GROUND_TARGET"],
            "type": "string",
            "default": "GROUND_TARGET"
          },
          "conditions_A": {
            "title": "IDs of Associated Condition Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Condition` blocks. Reverse key: `Condition.targetA`.",
            "default": []
          },
          "conditions_B": {
            "title": "IDs of Associated Condition Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Condition` blocks. Reverse key: `Condition.targetB`.",
            "default": []
          },
          "targetGroups": {
            "title": "IDs of Associated TargetGroup Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `TargetGroup` blocks. Reverse key: `TargetGroup.targets`.",
            "default": []
          },
          "pointingModes_A": {
            "title": "IDs of Associated PointingMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `PointingMode` blocks. Reverse key: `PointingMode.targetA`.",
            "default": []
          },
          "pointingModes_B": {
            "title": "IDs of Associated PointingMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `PointingMode` blocks. Reverse key: `PointingMode.targetB`.",
            "default": []
          },
          "targetGroupAssociations": {
            "title": "IDs of Associated TargetGroupAssociation Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `TargetGroupAssociation` blocks. Reverse key: `TargetGroupAssociation.target`.",
            "default": []
          }
        }
      },
      "GroundTargetCreate": {
        "title": "GroundTargetCreate",
        "required": ["name", "conOps"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.targets`."
          },
          "targetType": {
            "title": "Targettype",
            "enum": ["GROUND_TARGET"],
            "type": "string",
            "default": "GROUND_TARGET"
          }
        }
      },
      "GroundTargetUpdate": {
        "title": "GroundTargetUpdate",
        "required": ["name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "targetType": {
            "title": "Targettype",
            "enum": ["GROUND_TARGET"],
            "type": "string",
            "default": "GROUND_TARGET"
          }
        }
      },
      "GroupCondition": {
        "title": "GroupCondition",
        "required": [
          "name",
          "relationship",
          "paramACategory",
          "paramBCategory",
          "paramA",
          "conOps"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "relationship": {
            "title": "Relationship",
            "allOf": [{ "$ref": "#/components/schemas/ConditionRelationship" }]
          },
          "paramACategory": {
            "title": "Paramacategory",
            "enum": ["TARGET_GROUP"],
            "type": "string"
          },
          "paramBCategory": {
            "title": "Parameter B Category",
            "allOf": [{ "$ref": "#/components/schemas/ParameterBCategories" }]
          },
          "paramA": {
            "title": "Parameter A Selection",
            "allOf": [{ "$ref": "#/components/schemas/Parameters" }]
          },
          "paramB": {
            "title": "Parameter B Selection",
            "allOf": [{ "$ref": "#/components/schemas/Parameters" }],
            "default": ""
          },
          "scalar": {
            "title": "Scalar Value",
            "type": "number",
            "description": "Set if `paramBCategory` == `SCALAR`."
          },
          "targetA": {
            "title": "ID of Associated Target Block",
            "type": "integer",
            "description": "Relationship to zero or one `Target` blocks. Reverse key: `Target.conditions_A`."
          },
          "targetB": {
            "title": "ID of Associated Target Block",
            "type": "integer",
            "description": "Relationship to zero or one `Target` blocks. Reverse key: `Target.conditions_B`."
          },
          "targetGroupA": {
            "title": "ID of Associated TargetGroup Block",
            "type": "integer",
            "description": "Relationship to zero or one `TargetGroup` blocks. Reverse key: `TargetGroup.groupConditions_A`."
          },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.conditions`."
          },
          "operationalModes": {
            "title": "IDs of Associated OperationalMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `OperationalMode` blocks. Reverse key: `OperationalMode.conditions`.",
            "default": []
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ValidationError" }
          }
        }
      },
      "Heater": {
        "title": "Heater",
        "required": [
          "name",
          "subsystem",
          "componentType",
          "onRegHeatFlowRate",
          "heatFlowRateRating",
          "controlledComponent"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": { "title": "Componenttype", "enum": ["HEATER"], "type": "string" },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "onRegHeatFlowRate": {
            "title": "Onregheatflowrate",
            "exclusiveMinimum": 0.0,
            "type": "number"
          },
          "heatFlowRateRating": { "title": "Heatflowraterating", "type": "number" },
          "controlledComponent": {
            "title": "ID of Associated Component Block",
            "type": "integer",
            "description": "Relationship to a `Component` block. Reverse key: `Component.tempControllers`."
          },
          "regHeatFlowRate": { "title": "Regheatflowrate", "type": "number" },
          "tempControllerStates": {
            "title": "IDs of Associated TempControllerState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `TempControllerState` blocks. Reverse key: `TempControllerState.tempController`.",
            "default": []
          }
        }
      },
      "HeaterCreate": {
        "title": "HeaterCreate",
        "required": ["name", "onRegHeatFlowRate", "heatFlowRateRating", "controlledComponent"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "onRegHeatFlowRate": {
            "title": "Onregheatflowrate",
            "exclusiveMinimum": 0.0,
            "type": "number"
          },
          "heatFlowRateRating": { "title": "Heatflowraterating", "type": "number" },
          "controlledComponent": {
            "title": "ID of Associated Component Block",
            "type": "integer",
            "description": "Relationship to a `Component` block. Reverse key: `Component.tempControllers`."
          }
        }
      },
      "HeaterUpdate": {
        "title": "HeaterUpdate",
        "required": ["name", "onRegHeatFlowRate", "heatFlowRateRating", "controlledComponent"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "onRegHeatFlowRate": {
            "title": "Onregheatflowrate",
            "exclusiveMinimum": 0.0,
            "type": "number"
          },
          "heatFlowRateRating": { "title": "Heatflowraterating", "type": "number" },
          "controlledComponent": {
            "title": "ID of Associated Component Block",
            "type": "integer",
            "description": "Relationship to a `Component` block. Reverse key: `Component.tempControllers`."
          }
        }
      },
      "IROEquatorialCirc": {
        "title": "IROEquatorialCirc",
        "required": ["initialRefOrbit", "nu", "alt"],
        "type": "object",
        "properties": {
          "initialRefOrbit": {
            "title": "Initialreforbit",
            "enum": ["EQUATORIAL_CIRC"],
            "type": "string"
          },
          "nu": { "title": "Nu [deg]", "maximum": 360.0, "minimum": 0.0, "type": "number" },
          "alt": { "title": "Altitude [km]", "minimum": 100.0, "type": "number" }
        }
      },
      "IROGeostat": {
        "title": "IROGeostat",
        "required": ["initialRefOrbit", "lon"],
        "type": "object",
        "properties": {
          "initialRefOrbit": { "title": "Initialreforbit", "enum": ["GEOSTAT"], "type": "string" },
          "lon": { "title": "Longitude [deg]", "maximum": 360.0, "minimum": 0.0, "type": "number" }
        }
      },
      "IROGeostatTransfer": {
        "title": "IROGeostatTransfer",
        "required": ["initialRefOrbit", "om", "nu", "altPerigee"],
        "type": "object",
        "properties": {
          "initialRefOrbit": {
            "title": "Initialreforbit",
            "enum": ["GEOSTAT_TRANSFER"],
            "type": "string"
          },
          "om": { "title": "Omega [deg]", "maximum": 360.0, "minimum": 0.0, "type": "number" },
          "nu": { "title": "Nu [deg]", "maximum": 360.0, "minimum": 0.0, "type": "number" },
          "altPerigee": { "title": "Perigee Altitude [km]", "minimum": 100.0, "type": "number" }
        }
      },
      "IROIss": {
        "title": "IROIss",
        "required": ["initialRefOrbit", "raan", "nu"],
        "type": "object",
        "properties": {
          "initialRefOrbit": { "title": "Initialreforbit", "enum": ["ISS"], "type": "string" },
          "raan": { "title": "RAAN [deg]", "maximum": 360.0, "minimum": 0.0, "type": "number" },
          "nu": { "title": "Nu [deg]", "maximum": 360.0, "minimum": 0.0, "type": "number" }
        }
      },
      "IROPolarCirc": {
        "title": "IROPolarCirc",
        "required": ["initialRefOrbit", "raan", "nu", "alt"],
        "type": "object",
        "properties": {
          "initialRefOrbit": {
            "title": "Initialreforbit",
            "enum": ["POLAR_CIRC"],
            "type": "string"
          },
          "raan": { "title": "RAAN [deg]", "maximum": 360.0, "minimum": 0.0, "type": "number" },
          "nu": { "title": "Nu [deg]", "maximum": 360.0, "minimum": 0.0, "type": "number" },
          "alt": { "title": "Altitude [km]", "minimum": 100.0, "type": "number" }
        }
      },
      "IROSunSyncCirc": {
        "title": "IROSunSyncCirc",
        "required": ["initialRefOrbit", "mltAscNode", "nu", "alt"],
        "type": "object",
        "properties": {
          "initialRefOrbit": {
            "title": "Initialreforbit",
            "enum": ["SUN_SYNC_CIRC"],
            "type": "string"
          },
          "mltAscNode": {
            "title": "Mean Local Time of the Ascending Node [day]",
            "type": "number"
          },
          "nu": { "title": "Nu [deg]", "maximum": 360.0, "minimum": 0.0, "type": "number" },
          "alt": { "title": "Altitude [km]", "minimum": 100.0, "type": "number" }
        }
      },
      "ISDPEci": {
        "title": "ISDPEci",
        "required": ["stateEci"],
        "type": "object",
        "properties": {
          "stateEci": {
            "title": "ECI State Vector [km x3, km/s x3]",
            "type": "array",
            "items": { "type": "number" }
          }
        }
      },
      "ISDPOrbitalElements": {
        "title": "ISDPOrbitalElements",
        "required": ["a", "e", "inc", "raan", "om", "nu"],
        "type": "object",
        "properties": {
          "a": { "title": "Semimajor Axis [km]", "minimum": 6478.1359999999995, "type": "number" },
          "e": {
            "title": "Eccentricity",
            "exclusiveMaximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "inc": {
            "title": "Inclination [deg]",
            "maximum": 3.141592653589793,
            "minimum": 0.0,
            "type": "number"
          },
          "raan": { "title": "RAAN [deg]", "maximum": 360.0, "minimum": 0.0, "type": "number" },
          "om": { "title": "Omega [deg]", "maximum": 360.0, "minimum": 0.0, "type": "number" },
          "nu": { "title": "Nu [deg]", "maximum": 360.0, "minimum": 0.0, "type": "number" }
        }
      },
      "ISDPTle": {
        "title": "ISDPTle",
        "required": ["tle"],
        "type": "object",
        "properties": { "tle": { "title": "TLE", "type": "string" } }
      },
      "InitialStateDefType": {
        "title": "InitialStateDefType",
        "enum": ["ORBITAL_ELEMENTS", "REF_ORBIT", "ECI_STATE", "TLE", ""],
        "type": "string",
        "description": "An enumeration."
      },
      "InputTypes": {
        "title": "InputTypes",
        "enum": ["EPS_ROOT_NODE", "BUS_REGULATOR"],
        "description": "An enumeration."
      },
      "Job": {
        "title": "Job",
        "required": ["jobType", "status", "branch", "bedRef", "dataRef"],
        "type": "object",
        "properties": {
          "jobType": { "title": "Jobtype", "enum": ["SIMULATION"], "type": "string" },
          "status": { "$ref": "#/components/schemas/Statuses" },
          "branch": { "title": "Branch", "type": "string" },
          "bedRef": { "title": "Bedref", "maxLength": 40, "type": "string" },
          "dataRef": { "title": "Dataref", "maxLength": 40, "type": "string" }
        }
      },
      "JobGet": {
        "title": "JobGet",
        "required": [
          "jobType",
          "status",
          "branch",
          "bedRef",
          "dataRef",
          "startTime",
          "currentTime",
          "stopTime"
        ],
        "type": "object",
        "properties": {
          "jobType": { "title": "Jobtype", "enum": ["SIMULATION"], "type": "string" },
          "status": { "$ref": "#/components/schemas/Statuses" },
          "branch": { "title": "Branch", "type": "string" },
          "bedRef": { "title": "Bedref", "maxLength": 40, "type": "string" },
          "dataRef": { "title": "Dataref", "maxLength": 40, "type": "string" },
          "startTime": { "title": "Starttime", "type": "number" },
          "currentTime": { "title": "Currenttime", "type": "number" },
          "stopTime": { "title": "Stoptime", "type": "number" }
        }
      },
      "LoadBG": {
        "title": "LoadBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                { "$ref": "#/components/schemas/ResistanceLoad" },
                { "$ref": "#/components/schemas/PowerLoad" },
                { "$ref": "#/components/schemas/ActuatorLoad" }
              ]
            },
            "default": {}
          }
        }
      },
      "LoadState": {
        "title": "LoadState",
        "required": ["name", "efficiency", "component"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "efficiency": { "title": "Efficiency", "maximum": 1.0, "minimum": 0.0, "type": "number" },
          "operationalModes": {
            "title": "IDs of Associated OperationalMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `OperationalMode` blocks. Reverse key: `OperationalMode.loadStates`.",
            "default": []
          },
          "component": {
            "title": "ID of Associated Component Block",
            "type": "integer",
            "description": "Relationship to a `Component` block. Reverse key: `Component.loadStates`."
          },
          "loads": {
            "title": "IDs of Associated Load Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Load` blocks. Reverse key: `Load.loadState`.",
            "default": []
          },
          "isActive": { "title": "Isactive", "type": "boolean", "default": false },
          "timeSinceActive": {
            "title": "Timesinceactive",
            "minimum": 0.0,
            "type": "number",
            "default": 0
          }
        }
      },
      "LoadStateBG": {
        "title": "LoadStateBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/LoadState" },
            "default": {}
          }
        }
      },
      "LoadStateCreate": {
        "title": "LoadStateCreate",
        "required": ["name", "efficiency", "component"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "efficiency": { "title": "Efficiency", "maximum": 1.0, "minimum": 0.0, "type": "number" },
          "component": {
            "title": "ID of Associated Component Block",
            "type": "integer",
            "description": "Relationship to a `Component` block. Reverse key: `Component.loadStates`."
          }
        }
      },
      "LoadStateUpdate": {
        "title": "LoadStateUpdate",
        "required": ["name", "efficiency"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "efficiency": { "title": "Efficiency", "maximum": 1.0, "minimum": 0.0, "type": "number" },
          "operationalModes": {
            "title": "IDs of Associated OperationalMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `OperationalMode` blocks. Reverse key: `OperationalMode.loadStates`.",
            "default": []
          }
        }
      },
      "LocalPointingDirections": {
        "title": "LocalPointingDirections",
        "enum": [
          "NADIR",
          "ZENITH",
          "CROSS_TRACK_POS",
          "CROSS_TRACK_NEG",
          "ALONG_TRACK_POS",
          "ALONG_TRACK_NEG",
          "RAM",
          "ANTI_RAM",
          "MAGNETIC_FIELD",
          ""
        ],
        "description": "An enumeration."
      },
      "LocalVector": {
        "title": "LocalVector",
        "required": ["name", "satellite", "localPointingDirection"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "truth": { "title": "Truth", "type": "array", "items": { "type": "number" } },
          "estimate": { "title": "Estimate", "type": "array", "items": { "type": "number" } },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to a `Satellite` block. Reverse key: `Satellite.vectors`."
          },
          "pointingModes_A": {
            "title": "IDs of Associated PointingMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `PointingMode` blocks. Reverse key: `PointingMode.lockVector`.",
            "default": []
          },
          "pointingModes_B": {
            "title": "IDs of Associated PointingMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `PointingMode` blocks. Reverse key: `PointingMode.maxAlignVector`.",
            "default": []
          },
          "FOVConstraints": {
            "title": "IDs of Associated Vector Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Vector` blocks. Reverse key: `Vector.vector`.",
            "default": []
          },
          "directionSensors": {
            "title": "IDs of Associated DirectionSensor Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `DirectionSensor` blocks. Reverse key: `DirectionSensor.vector`.",
            "default": []
          },
          "vectorSensors": {
            "title": "IDs of Associated VectorSensor Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `VectorSensor` blocks. Reverse key: `VectorSensor.vector`.",
            "default": []
          },
          "localPointingDirection": { "$ref": "#/components/schemas/LocalPointingDirections" }
        }
      },
      "LocalVectorBG": {
        "title": "LocalVectorBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/LocalVector" },
            "default": {}
          }
        }
      },
      "LocalVectorCreate": {
        "title": "LocalVectorCreate",
        "required": ["name", "localPointingDirection"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "localPointingDirection": { "$ref": "#/components/schemas/LocalPointingDirections" }
        }
      },
      "LocalVectorUpdate": {
        "title": "LocalVectorUpdate",
        "required": ["name", "localPointingDirection"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "localPointingDirection": { "$ref": "#/components/schemas/LocalPointingDirections" }
        }
      },
      "LockPointingMode": {
        "title": "LockPointingMode",
        "required": [
          "name",
          "pointingModeType",
          "conOps",
          "lockVector",
          "lockBodyFrameVector",
          "spinRate"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "pointingModeType": { "title": "Pointing Mode Type", "enum": ["LOCK"], "type": "string" },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.pointingModes`."
          },
          "operationalModes": {
            "title": "IDs of Associated OperationalMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `OperationalMode` blocks. Reverse key: `OperationalMode.pointingMode`.",
            "default": []
          },
          "lockVector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. "
          },
          "lockBodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. "
          },
          "spinRate": { "title": "Spinrate", "type": "number" }
        }
      },
      "LockPointingModeCreate": {
        "title": "LockPointingModeCreate",
        "required": [
          "name",
          "pointingModeType",
          "conOps",
          "lockVector",
          "lockBodyFrameVector",
          "spinRate"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "pointingModeType": { "title": "Pointing Mode Type", "enum": ["LOCK"], "type": "string" },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.pointingModes`."
          },
          "lockVector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. "
          },
          "lockBodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. "
          },
          "spinRate": { "title": "Spinrate", "type": "number" }
        }
      },
      "LockPointingModeUpdate": {
        "title": "LockPointingModeUpdate",
        "required": ["name", "pointingModeType", "lockVector", "lockBodyFrameVector", "spinRate"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "pointingModeType": { "title": "Pointing Mode Type", "enum": ["LOCK"], "type": "string" },
          "lockVector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. "
          },
          "lockBodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. "
          },
          "spinRate": { "title": "Spinrate", "type": "number" }
        }
      },
      "MEKFAlgorithm": {
        "title": "MEKFAlgorithm",
        "required": ["name", "rate", "attDetType"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "rate": { "title": "Update Rate [Hz]", "type": "number" },
          "attDetType": { "title": "Attdettype", "enum": ["MEKF"], "type": "string" }
        }
      },
      "Magnetorquer": {
        "title": "Magnetorquer",
        "required": [
          "name",
          "subsystem",
          "componentType",
          "bodyFrameVector",
          "ratedMagneticMoment",
          "powerAtRatedMagneticMoment",
          "fieldVector"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": { "title": "Componenttype", "enum": ["MAGNETORQUER"], "type": "string" },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "bodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. Reverse key: `BodyFrameVector.actuators`."
          },
          "torque": { "title": "Torque" },
          "maxTorque": { "title": "Maxtorque", "type": "array", "items": { "type": "number" } },
          "commandedTorqueMagnitude": { "title": "Commandedtorquemagnitude", "type": "number" },
          "ratedMagneticMoment": {
            "title": "Ratedmagneticmoment",
            "minimum": 0.0,
            "type": "number"
          },
          "powerAtRatedMagneticMoment": { "title": "Poweratratedmagneticmoment", "type": "number" },
          "fieldVector": {
            "title": "ID of Associated LocalVector Block",
            "type": "integer",
            "description": "Relationship to a `LocalVector` block. "
          },
          "pwmDutyCycle": { "title": "Pwmdutycycle", "type": "number" },
          "magneticMoment": { "title": "Magneticmoment", "type": "number" },
          "magneticMomentMargin": { "title": "Magneticmomentmargin", "type": "number" }
        }
      },
      "MagnetorquerCreate": {
        "title": "MagnetorquerCreate",
        "required": [
          "name",
          "bodyFrameVector",
          "ratedMagneticMoment",
          "powerAtRatedMagneticMoment"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "bodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. Reverse key: `BodyFrameVector.actuators`."
          },
          "ratedMagneticMoment": {
            "title": "Ratedmagneticmoment",
            "minimum": 0.0,
            "type": "number"
          },
          "powerAtRatedMagneticMoment": { "title": "Poweratratedmagneticmoment", "type": "number" }
        }
      },
      "MagnetorquerUpdate": {
        "title": "MagnetorquerUpdate",
        "required": [
          "name",
          "bodyFrameVector",
          "ratedMagneticMoment",
          "powerAtRatedMagneticMoment"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "bodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. Reverse key: `BodyFrameVector.actuators`."
          },
          "ratedMagneticMoment": {
            "title": "Ratedmagneticmoment",
            "minimum": 0.0,
            "type": "number"
          },
          "powerAtRatedMagneticMoment": { "title": "Poweratratedmagneticmoment", "type": "number" }
        }
      },
      "MaxAlignPointingMode": {
        "title": "MaxAlignPointingMode",
        "required": [
          "name",
          "pointingModeType",
          "conOps",
          "lockVector",
          "lockBodyFrameVector",
          "maxAlignVector",
          "maxAlignBodyFrameVector"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "pointingModeType": {
            "title": "Pointing Mode Type",
            "enum": ["MAX_SECONDARY_ALIGN"],
            "type": "string"
          },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.pointingModes`."
          },
          "operationalModes": {
            "title": "IDs of Associated OperationalMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `OperationalMode` blocks. Reverse key: `OperationalMode.pointingMode`.",
            "default": []
          },
          "lockVector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. "
          },
          "lockBodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. "
          },
          "maxAlignVector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. "
          },
          "maxAlignBodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. "
          }
        }
      },
      "MaxAlignPointingModeCreate": {
        "title": "MaxAlignPointingModeCreate",
        "required": [
          "name",
          "pointingModeType",
          "conOps",
          "lockVector",
          "lockBodyFrameVector",
          "maxAlignVector",
          "maxAlignBodyFrameVector"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "pointingModeType": {
            "title": "Pointing Mode Type",
            "enum": ["MAX_SECONDARY_ALIGN"],
            "type": "string"
          },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.pointingModes`."
          },
          "lockVector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. "
          },
          "lockBodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. "
          },
          "maxAlignVector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. "
          },
          "maxAlignBodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. "
          }
        }
      },
      "MaxAlignPointingModeUpdate": {
        "title": "MaxAlignPointingModeUpdate",
        "required": [
          "name",
          "pointingModeType",
          "lockVector",
          "lockBodyFrameVector",
          "maxAlignVector",
          "maxAlignBodyFrameVector"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "pointingModeType": {
            "title": "Pointing Mode Type",
            "enum": ["MAX_SECONDARY_ALIGN"],
            "type": "string"
          },
          "lockVector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. "
          },
          "lockBodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. "
          },
          "maxAlignVector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. "
          },
          "maxAlignBodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. "
          }
        }
      },
      "MessageRes": {
        "title": "MessageRes",
        "required": ["message"],
        "type": "object",
        "properties": { "message": { "title": "Message", "type": "string" } }
      },
      "MotionTypes": {
        "title": "MotionTypes",
        "enum": ["FIXED", "SUN_TRACKING"],
        "description": "An enumeration."
      },
      "OperationalMode": {
        "title": "OperationalMode",
        "required": ["name", "priority", "pointingMode", "conOps"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "priority": {
            "title": "Priority",
            "minimum": 0.0,
            "type": "integer",
            "description": "Higher values have higher priority. Default op modes have priorty == `0`."
          },
          "minOccurrenceDuration": {
            "title": "Min Occurrence Duration [min]",
            "minimum": 0.0,
            "type": "number"
          },
          "maxOccurrenceDuration": {
            "title": "Max Occurrence Duration [min]",
            "minimum": 0.0,
            "type": "number"
          },
          "minTimeBetweenOccurrences": {
            "title": "Min Time Between Occurrences [min]",
            "minimum": 0.0,
            "type": "number"
          },
          "pointingMode": {
            "title": "ID of Associated PointingMode Block",
            "type": "integer",
            "description": "Relationship to a `PointingMode` block. Reverse key: `PointingMode.operationalModes`."
          },
          "conditions": {
            "title": "IDs of Associated Condition Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Condition` blocks. Reverse key: `Condition.operationalModes`.",
            "default": []
          },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.operationalModes`."
          },
          "groupConditions": {
            "title": "IDs of Associated Condition Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Condition` blocks. Reverse key: `Condition.operationalModes`.",
            "default": []
          },
          "tempControllerStates": {
            "title": "IDs of Associated TempControllerState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `TempControllerState` blocks. Reverse key: `TempControllerState.operationalModes`.",
            "default": []
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.operationalModes`.",
            "default": []
          },
          "activeTargetByTargetGroup": {
            "title": "Activetargetbytargetgroup",
            "type": "object",
            "additionalProperties": { "type": "integer" }
          },
          "compliance": { "title": "Compliance", "type": "boolean" },
          "timeSinceActive": {
            "title": "Timesinceactive",
            "minimum": 0.0,
            "type": "number",
            "default": 0
          },
          "timeSinceInactive": {
            "title": "Timesinceinactive",
            "minimum": 0.0,
            "type": "number",
            "default": 0
          },
          "isActive": { "title": "Isactive", "type": "boolean", "default": false }
        }
      },
      "OperationalModeBG": {
        "title": "OperationalModeBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/OperationalMode" },
            "default": {}
          }
        }
      },
      "OperationalModeCreate": {
        "title": "OperationalModeCreate",
        "required": ["name", "priority", "pointingMode", "conOps"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "priority": {
            "title": "Priority",
            "minimum": 0.0,
            "type": "integer",
            "description": "Higher values have higher priority. Default op modes have priorty == `0`."
          },
          "minOccurrenceDuration": {
            "title": "Min Occurrence Duration [min]",
            "minimum": 0.0,
            "type": "number"
          },
          "maxOccurrenceDuration": {
            "title": "Max Occurrence Duration [min]",
            "minimum": 0.0,
            "type": "number"
          },
          "minTimeBetweenOccurrences": {
            "title": "Min Time Between Occurrences [min]",
            "minimum": 0.0,
            "type": "number"
          },
          "pointingMode": {
            "title": "ID of Associated PointingMode Block",
            "type": "integer",
            "description": "Relationship to a `PointingMode` block. Reverse key: `PointingMode.operationalModes`."
          },
          "conditions": {
            "title": "IDs of Associated Condition Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Condition` blocks. Reverse key: `Condition.operationalModes`.",
            "default": []
          },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.operationalModes`."
          }
        }
      },
      "OperationalModeUpdate": {
        "title": "OperationalModeUpdate",
        "required": ["name", "priority", "pointingMode"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "priority": {
            "title": "Priority",
            "minimum": 0.0,
            "type": "integer",
            "description": "Higher values have higher priority. Default op modes have priorty == `0`."
          },
          "minOccurrenceDuration": {
            "title": "Min Occurrence Duration [min]",
            "minimum": 0.0,
            "type": "number"
          },
          "maxOccurrenceDuration": {
            "title": "Max Occurrence Duration [min]",
            "minimum": 0.0,
            "type": "number"
          },
          "minTimeBetweenOccurrences": {
            "title": "Min Time Between Occurrences [min]",
            "minimum": 0.0,
            "type": "number"
          },
          "pointingMode": {
            "title": "ID of Associated PointingMode Block",
            "type": "integer",
            "description": "Relationship to a `PointingMode` block. Reverse key: `PointingMode.operationalModes`."
          },
          "conditions": {
            "title": "IDs of Associated Condition Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Condition` blocks. Reverse key: `Condition.operationalModes`.",
            "default": []
          }
        }
      },
      "OpticalAttitudeSensor": {
        "title": "OpticalAttitudeSensor",
        "required": [
          "name",
          "subsystem",
          "componentType",
          "oneSigmaCrossAxisError",
          "oneSigmaBoresightAxisError"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": {
            "title": "Componenttype",
            "enum": ["OPTICAL_ATTITUDE_SENSOR"],
            "type": "string"
          },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to zero or one `FieldOfView` blocks. Reverse key: `FieldOfView.sensor`."
          },
          "oneSigmaCrossAxisError": { "title": "Onesigmacrossaxiserror", "type": "number" },
          "oneSigmaBoresightAxisError": { "title": "Onesigmaboresightaxiserror", "type": "number" },
          "crossAxisError": { "title": "Crossaxiserror", "type": "number" },
          "boresightAxisError": { "title": "Boresightaxiserror", "type": "number" },
          "measurement": { "title": "Measurement", "type": "array", "items": { "type": "number" } }
        }
      },
      "OpticalAttitudeSensorCreate": {
        "title": "OpticalAttitudeSensorCreate",
        "required": ["name", "oneSigmaCrossAxisError", "oneSigmaBoresightAxisError"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to zero or one `FieldOfView` blocks. Reverse key: `FieldOfView.sensor`."
          },
          "oneSigmaCrossAxisError": { "title": "Onesigmacrossaxiserror", "type": "number" },
          "oneSigmaBoresightAxisError": { "title": "Onesigmaboresightaxiserror", "type": "number" }
        }
      },
      "OpticalAttitudeSensorUpdate": {
        "title": "OpticalAttitudeSensorUpdate",
        "required": ["name", "oneSigmaCrossAxisError", "oneSigmaBoresightAxisError"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to zero or one `FieldOfView` blocks. Reverse key: `FieldOfView.sensor`."
          },
          "oneSigmaCrossAxisError": { "title": "Onesigmacrossaxiserror", "type": "number" },
          "oneSigmaBoresightAxisError": { "title": "Onesigmaboresightaxiserror", "type": "number" }
        }
      },
      "Orbit": {
        "title": "Orbit",
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "initialStateDefType": {
            "title": "Initial State Definition Type",
            "allOf": [{ "$ref": "#/components/schemas/InitialStateDefType" }],
            "default": ""
          },
          "initialStateDefParams": {
            "title": "Initial State Definition Parameters",
            "anyOf": [
              { "$ref": "#/components/schemas/ISDPOrbitalElements" },
              { "$ref": "#/components/schemas/ISDPTle" },
              { "$ref": "#/components/schemas/ISDPEci" },
              { "$ref": "#/components/schemas/IROIss" },
              { "$ref": "#/components/schemas/IROGeostat" },
              { "$ref": "#/components/schemas/IROGeostatTransfer" },
              { "$ref": "#/components/schemas/IROPolarCirc" },
              { "$ref": "#/components/schemas/IROEquatorialCirc" },
              { "$ref": "#/components/schemas/IROSunSyncCirc" }
            ],
            "description": "May only be null initially."
          }
        }
      },
      "OrbitBG": {
        "title": "OrbitBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                { "$ref": "#/components/schemas/Orbit" },
                { "$ref": "#/components/schemas/AsyncOrbit" }
              ]
            },
            "default": {}
          }
        }
      },
      "OrbitUpdate": {
        "title": "OrbitUpdate",
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "initialStateDefType": {
            "title": "Initial State Definition Type",
            "allOf": [{ "$ref": "#/components/schemas/InitialStateDefType" }],
            "default": ""
          },
          "initialStateDefParams": {
            "title": "Initial State Definition Parameters",
            "anyOf": [
              { "$ref": "#/components/schemas/ISDPOrbitalElements" },
              { "$ref": "#/components/schemas/ISDPTle" },
              { "$ref": "#/components/schemas/ISDPEci" },
              { "$ref": "#/components/schemas/IROIss" },
              { "$ref": "#/components/schemas/IROGeostat" },
              { "$ref": "#/components/schemas/IROGeostatTransfer" },
              { "$ref": "#/components/schemas/IROPolarCirc" },
              { "$ref": "#/components/schemas/IROEquatorialCirc" },
              { "$ref": "#/components/schemas/IROSunSyncCirc" }
            ],
            "description": "May only be null initially."
          }
        }
      },
      "ParameterACategories": {
        "title": "ParameterACategories",
        "enum": ["SATELLITE", "TARGET", "TARGET_GROUP", "TIME"],
        "description": "An enumeration."
      },
      "ParameterBCategories": {
        "title": "ParameterBCategories",
        "enum": ["SATELLITE", "TARGET", "SCALAR"],
        "description": "An enumeration."
      },
      "Parameters": {
        "title": "Parameters",
        "enum": [
          "SHADOW",
          "BETA",
          "MEAN_ANOM",
          "TRUE_ANOM",
          "LAT",
          "LON",
          "ALT",
          "LO_SIGHT",
          "RANGE",
          "SOLAR_AZ",
          "SOLAR_EL",
          "SAT_AZ",
          "SAT_EL",
          "LOCAL_SIDEREAL_TIME",
          ""
        ],
        "description": "An enumeration."
      },
      "PassivePointingMode": {
        "title": "PassivePointingMode",
        "required": ["name", "pointingModeType", "conOps"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "pointingModeType": {
            "title": "Pointing Mode Type",
            "enum": ["PASSIVE"],
            "type": "string"
          },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.pointingModes`."
          },
          "operationalModes": {
            "title": "IDs of Associated OperationalMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `OperationalMode` blocks. Reverse key: `OperationalMode.pointingMode`.",
            "default": []
          }
        }
      },
      "PassivePointingModeCreate": {
        "title": "PassivePointingModeCreate",
        "required": ["name", "pointingModeType", "conOps"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "pointingModeType": {
            "title": "Pointing Mode Type",
            "enum": ["PASSIVE"],
            "type": "string"
          },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.pointingModes`."
          }
        }
      },
      "PassivePointingModeUpdate": {
        "title": "PassivePointingModeUpdate",
        "required": ["name", "pointingModeType"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "pointingModeType": {
            "title": "Pointing Mode Type",
            "enum": ["PASSIVE"],
            "type": "string"
          }
        }
      },
      "PointingMode": {
        "title": "PointingMode",
        "required": ["name", "pointingModeType", "conOps"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "pointingModeType": {
            "title": "Pointing Mode Type",
            "allOf": [{ "$ref": "#/components/schemas/PointingModeTypes" }]
          },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.pointingModes`."
          },
          "operationalModes": {
            "title": "IDs of Associated OperationalMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `OperationalMode` blocks. Reverse key: `OperationalMode.pointingMode`.",
            "default": []
          }
        }
      },
      "PointingModeBG": {
        "title": "PointingModeBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                { "$ref": "#/components/schemas/PassivePointingMode" },
                { "$ref": "#/components/schemas/LockPointingMode" },
                { "$ref": "#/components/schemas/MaxAlignPointingMode" }
              ]
            },
            "default": {}
          }
        }
      },
      "PointingModeTypes": {
        "title": "PointingModeTypes",
        "enum": ["PASSIVE", "LOCK", "MAX_SECONDARY_ALIGN"],
        "description": "An enumeration."
      },
      "PolynomialEphemerisBody": {
        "title": "PolynomialEphemerisBody",
        "enum": ["SUN", "MOON"],
        "description": "An enumeration."
      },
      "PositionSensor": {
        "title": "PositionSensor",
        "required": ["name", "subsystem", "componentType", "oneSigmaDistanceError"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": {
            "title": "Componenttype",
            "enum": ["POSITION_SENSOR"],
            "type": "string"
          },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to zero or one `FieldOfView` blocks. Reverse key: `FieldOfView.sensor`."
          },
          "oneSigmaDistanceError": { "title": "Onesigmadistanceerror", "type": "number" },
          "measurement": { "title": "Measurement", "type": "array", "items": { "type": "number" } }
        }
      },
      "PositionSensorCreate": {
        "title": "PositionSensorCreate",
        "required": ["name", "oneSigmaDistanceError"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to zero or one `FieldOfView` blocks. Reverse key: `FieldOfView.sensor`."
          },
          "oneSigmaDistanceError": { "title": "Onesigmadistanceerror", "type": "number" }
        }
      },
      "PositionSensorUpdate": {
        "title": "PositionSensorUpdate",
        "required": ["name", "oneSigmaDistanceError"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to zero or one `FieldOfView` blocks. Reverse key: `FieldOfView.sensor`."
          },
          "oneSigmaDistanceError": { "title": "Onesigmadistanceerror", "type": "number" }
        }
      },
      "PowerLoad": {
        "title": "PowerLoad",
        "required": ["name", "epsOutputType", "loadState", "loadDefType", "loadDefParams"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "epsOutputType": {
            "title": "Power Supply Bus",
            "allOf": [{ "$ref": "#/components/schemas/EpsOutputTypes" }],
            "description": "`CORE_OUTPUT` if connected to the regulated/unregulated Power Processor bus.  `BUS_REGULATOR` if connected to a constant voltage `BusRegulator` output."
          },
          "busRegulator": {
            "title": "ID of Associated BusRegulator Block",
            "type": "integer",
            "description": "Relationship to zero or one `BusRegulator` blocks. Reverse key: `BusRegulator.loads`."
          },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to zero or one `Topology` blocks. Reverse key: `Topology.loads`."
          },
          "loadState": {
            "title": "ID of Associated LoadState Block",
            "type": "integer",
            "description": "Relationship to a `LoadState` block. Reverse key: `LoadState.loads`."
          },
          "loadDefType": { "title": "Loaddeftype", "enum": ["CONSTANT_POWER"], "type": "string" },
          "loadDefParams": { "$ref": "#/components/schemas/ConstantPower" },
          "dutyCyclePeriod": {
            "title": "Duty Cycle Period [min]",
            "exclusiveMinimum": 0.0,
            "type": "number"
          },
          "dutyCyclePercentage": {
            "title": "Duty Cycle Percentage",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          }
        }
      },
      "QuasiRegDetTopology": {
        "title": "QuasiRegDetTopology",
        "required": ["name", "subsystem", "componentType", "topologyType", "battery"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": {
            "title": "Componenttype",
            "enum": ["POWER_PROCESSOR"],
            "type": "string"
          },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "topologyType": { "title": "Topologytype", "enum": ["QUASI_REG_DET"], "type": "string" },
          "topologyParams": {
            "title": "Topology Definition Parameters",
            "anyOf": [
              { "$ref": "#/components/schemas/TopologyParamFRD" },
              { "$ref": "#/components/schemas/TopologyParamSCH" },
              { "$ref": "#/components/schemas/TopologyParamQRD" },
              { "$ref": "#/components/schemas/TopologyParamTCM" },
              { "$ref": "#/components/schemas/TopologyParamSCM" }
            ],
            "description": "This field may only be undefined initially.  It is required on first update."
          },
          "loads": {
            "title": "IDs of Associated Load Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Load` blocks. Reverse key: `Load.topology`.",
            "default": []
          },
          "battery": {
            "title": "ID of Associated Battery Block",
            "type": "integer",
            "description": "Relationship to a `Battery` block. Reverse key: `Battery.topology`."
          },
          "batteryCells": {
            "title": "IDs of Associated BatteryCell Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `BatteryCell` blocks. Reverse key: `BatteryCell.topology`.",
            "default": []
          },
          "busRegulators": {
            "title": "IDs of Associated BusRegulator Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `BusRegulator` blocks. Reverse key: `BusRegulator.topology`.",
            "default": []
          },
          "solarArrays": {
            "title": "IDs of Associated SolarArray Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarArray` blocks. Reverse key: `SolarArray.topology`.",
            "default": []
          },
          "solarCells": {
            "title": "IDs of Associated SolarCell Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarCell` blocks. Reverse key: `SolarCell.topology`.",
            "default": []
          }
        }
      },
      "ReactionWheel": {
        "title": "ReactionWheel",
        "required": [
          "name",
          "subsystem",
          "componentType",
          "bodyFrameVector",
          "inertia",
          "ratedMomentum",
          "ratedTorque",
          "efficiency"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": {
            "title": "Componenttype",
            "enum": ["REACTION_WHEEL"],
            "type": "string"
          },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "bodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. Reverse key: `BodyFrameVector.actuators`."
          },
          "torque": { "title": "Torque" },
          "maxTorque": { "title": "Maxtorque", "type": "array", "items": { "type": "number" } },
          "commandedTorqueMagnitude": { "title": "Commandedtorquemagnitude", "type": "number" },
          "inertia": { "title": "Inertia", "minimum": 0.0, "type": "number" },
          "ratedMomentum": { "title": "Ratedmomentum", "minimum": 0.0, "type": "number" },
          "ratedTorque": { "title": "Ratedtorque", "minimum": 0.0, "type": "number" },
          "efficiency": { "title": "Efficiency", "maximum": 1.0, "minimum": 0.0, "type": "number" },
          "momentum": { "title": "Momentum", "type": "number" },
          "speed": { "title": "Speed", "type": "number" },
          "torqueMargin": { "title": "Torquemargin", "type": "number" },
          "momentumMargin": { "title": "Momentummargin", "type": "number" }
        }
      },
      "ReactionWheelCreate": {
        "title": "ReactionWheelCreate",
        "required": [
          "name",
          "bodyFrameVector",
          "inertia",
          "ratedMomentum",
          "ratedTorque",
          "efficiency"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "bodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. Reverse key: `BodyFrameVector.actuators`."
          },
          "inertia": { "title": "Inertia", "minimum": 0.0, "type": "number" },
          "ratedMomentum": { "title": "Ratedmomentum", "minimum": 0.0, "type": "number" },
          "ratedTorque": { "title": "Ratedtorque", "minimum": 0.0, "type": "number" },
          "efficiency": { "title": "Efficiency", "maximum": 1.0, "minimum": 0.0, "type": "number" }
        }
      },
      "ReactionWheelUpdate": {
        "title": "ReactionWheelUpdate",
        "required": [
          "name",
          "bodyFrameVector",
          "inertia",
          "ratedMomentum",
          "ratedTorque",
          "efficiency"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "bodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. Reverse key: `BodyFrameVector.actuators`."
          },
          "inertia": { "title": "Inertia", "minimum": 0.0, "type": "number" },
          "ratedMomentum": { "title": "Ratedmomentum", "minimum": 0.0, "type": "number" },
          "ratedTorque": { "title": "Ratedtorque", "minimum": 0.0, "type": "number" },
          "efficiency": { "title": "Efficiency", "maximum": 1.0, "minimum": 0.0, "type": "number" }
        }
      },
      "RectangularFieldOfView": {
        "title": "RectangularFieldOfView",
        "required": [
          "name",
          "fieldOfViewType",
          "boresightBodyFrameVector",
          "sensor",
          "heightHalfAngle",
          "widthHalfAngle",
          "heightBodyFrameVector"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "fieldOfViewType": {
            "title": "Fieldofviewtype",
            "enum": ["RECT_FIELD_OF_VIEW"],
            "type": "string"
          },
          "boresightBodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. Reverse key: `BodyFrameVector.fieldsOfView`."
          },
          "sensor": {
            "title": "ID of Associated Sensor Block",
            "type": "integer",
            "description": "Relationship to a `Sensor` block. Reverse key: `Sensor.fieldOfView`."
          },
          "constraints": {
            "title": "IDs of Associated FOVConstraint Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `FOVConstraint` blocks. Reverse key: `FOVConstraint.fieldOfView`.",
            "default": []
          },
          "heightHalfAngle": {
            "title": "Heighthalfangle",
            "maximum": 180.0,
            "minimum": 0.0,
            "type": "number"
          },
          "widthHalfAngle": {
            "title": "Widthhalfangle",
            "maximum": 180.0,
            "minimum": 0.0,
            "type": "number"
          },
          "heightBodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. Reverse key: `BodyFrameVector.rectangularFieldsOfView`."
          }
        }
      },
      "ResistanceLoad": {
        "title": "ResistanceLoad",
        "required": ["name", "epsOutputType", "loadState", "loadDefType", "loadDefParams"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "epsOutputType": {
            "title": "Power Supply Bus",
            "allOf": [{ "$ref": "#/components/schemas/EpsOutputTypes" }],
            "description": "`CORE_OUTPUT` if connected to the regulated/unregulated Power Processor bus.  `BUS_REGULATOR` if connected to a constant voltage `BusRegulator` output."
          },
          "busRegulator": {
            "title": "ID of Associated BusRegulator Block",
            "type": "integer",
            "description": "Relationship to zero or one `BusRegulator` blocks. Reverse key: `BusRegulator.loads`."
          },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to zero or one `Topology` blocks. Reverse key: `Topology.loads`."
          },
          "loadState": {
            "title": "ID of Associated LoadState Block",
            "type": "integer",
            "description": "Relationship to a `LoadState` block. Reverse key: `LoadState.loads`."
          },
          "loadDefType": {
            "title": "Loaddeftype",
            "enum": ["CONSTANT_RESISTANCE"],
            "type": "string"
          },
          "loadDefParams": { "$ref": "#/components/schemas/ConstantResistance" },
          "dutyCyclePeriod": {
            "title": "Duty Cycle Period [min]",
            "exclusiveMinimum": 0.0,
            "type": "number"
          },
          "dutyCyclePercentage": {
            "title": "Duty Cycle Percentage",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          }
        }
      },
      "Satellite": {
        "title": "Satellite",
        "required": ["cadKey", "cadSignedUrl", "cadScaleFactor", "topology"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "mass": { "title": "Mass [kg]", "exclusiveMinimum": 0.0, "type": "number" },
          "inertia": { "title": "Inertia Matrix [Matrix3[kg-m^2]]" },
          "earthshineIrradiance": { "title": "Earthshineirradiance", "type": "number" },
          "albedo": { "title": "Albedo", "maximum": 1.0, "minimum": 0.0, "type": "number" },
          "dragTorque": { "title": "Dragtorque", "type": "array", "items": { "type": "number" } },
          "gravityGradientTorque": {
            "title": "Gravitygradienttorque",
            "type": "array",
            "items": { "type": "number" }
          },
          "cadFileName": {
            "title": "Cadfilename",
            "maxLength": 100,
            "type": "string",
            "default": ""
          },
          "cadKey": { "title": "Cadkey", "maxLength": 48, "type": "string" },
          "cadSignedUrl": { "title": "Cadsignedurl", "maxLength": 1024, "type": "string" },
          "cadScaleFactor": {
            "title": "Cadscalefactor",
            "exclusiveMinimum": 0.0,
            "type": "number"
          },
          "bodyFrameVectors": {
            "title": "IDs of Associated BodyFrameVector Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `BodyFrameVector` blocks. Reverse key: `BodyFrameVector.satellite`.",
            "default": []
          },
          "surfaces": {
            "title": "IDs of Associated Surface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Surface` blocks. Reverse key: `Surface.satellite`.",
            "default": []
          },
          "solarArrays": {
            "title": "IDs of Associated SolarArray Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarArray` blocks. ",
            "default": []
          },
          "subsystems": {
            "title": "IDs of Associated Subsystem Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Subsystem` blocks. Reverse key: `Subsystem.satellite`.",
            "default": []
          },
          "topology": {
            "title": "ID of Associated Component Block",
            "type": "integer",
            "description": "Relationship to a `Component` block. "
          },
          "components": {
            "title": "IDs of Associated Component Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Component` blocks. Reverse key: `Component.satellite`.",
            "default": []
          },
          "interfaces": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.satellite`.",
            "default": []
          },
          "coolers": {
            "title": "IDs of Associated Cooler Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Cooler` blocks. ",
            "default": []
          },
          "heaters": {
            "title": "IDs of Associated Heater Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Heater` blocks. ",
            "default": []
          },
          "DEFAULT_CAD_MODELS": {
            "title": "Default Cad Models",
            "type": "array",
            "items": {},
            "default": [
              {
                "cadKey": "default_aqua.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_aqua.glb?Expires=32503680000&Signature=I4iKx5pup4jUrXYF5muhkNUy2rE7dXi-XS7QRyPmXNbxd70c09tg-WesyWDfZpTO7Xn-nAZb8Qw-Kb3w1amXNHh8zqYCFagrMVQiTZY2H4V3m5ZfFdxeUuMdqhOh4Gior017OocOiFso5xpHIk0oFWs0co~Ovx4L2Le-HqiHBwyUI2uNDFxrtYaDs7~4bgYT4HV1mkGj3mg05dLoA~NR-UX5IbX1szgElAvHi9MF4sr6ff91yQQdFxfjcXZR41-1Xt1T9GVs4u35UUxbNxFzohhd8BY-AAIGQoE2HmN453izx~QGGCnU8hMYjl-lyuSp29HRw4Uol718VsgWYNmwLg__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 0.00174361872910041,
                "label": "Aqua",
                "fileName": "default_aqua.glb",
                "value": 0
              },
              {
                "cadKey": "default_clementine.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_clementine.glb?Expires=32503680000&Signature=s~TB8viMYDaspD4t9XD5fX0qQ7NavVpZe~xKWvmdKa3bGQ2K3a5pHroPySAZ2lmbnn5gAJC9ZalMNIypjF7YuExT2Ux6665YQQEKUxDyl0H7MCKvGPmvSpeg9VRr-s5PgL2oobWbDAnehO9p4~x42Nl7-ijNRz2mQrnAKx4klyA8UW2TXtjJE8~UujplL9AzPswYXiWzzouIOiyO6lHVOyu~wP7~qlGnDmUgUmZCNNhrUqnEGHdN7FTNk3dzH~VYN6Cz2yirfuRyFHI0F3OnhW-ubvoqt~ROc-E5sr16eENVzGi~UVNhdnkEwjQ9jigK~BwfcUyLPFY0amEpD5TbnA__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 0.399988433354028,
                "label": "Clementine",
                "fileName": "default_clementine.glb",
                "value": 1
              },
              {
                "cadKey": "default_cloud_sat.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_cloud_sat.glb?Expires=32503680000&Signature=t0rCf7EOYPVaYOtlCbej1j~FFeVNFD6hqOdmXDGSsTJUUnaPcrNzYxV5LwhRntMBRRsG~cieiSH~wKPNS06d-vtCnVFFD1iE4WuTPcsVOrQPoEilxGC4-0GKReWIRHDWZUbhD31WKB8oXSuoY43nMAit1yZ0yeulnjEga6N53tn5Le~xEuwj1OvGAAr6HEARFs9T8YxMzeEIz-qj67P9a0638JwEZiC330vg9pbgGlvsMbRW7WycHkB28Xcc1XE6VbPn6Od-tNo~fZl2dYMpH8janY-UdPQSusQr6fiDc8KnT8p8ETtyIT5pf7~hPodFz~p4xdCdt4mKNAVe4M9jAQ__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 0.000103688898120542,
                "label": "Cloud",
                "fileName": "default_cloud_sat.glb",
                "value": 2
              },
              {
                "cadKey": "default_firefly.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_firefly.glb?Expires=32503680000&Signature=IaXBLHVcGcShgBGm7verZGYEr4KCkCZfIDsb4wfHKAHRe1XgJbIM1WqKQlhjpii2Ly3h6F8LEELzHhpVvF5FH30TjBBh2oVr1F2lwy1srQ4PDAZ9OtF4YauzcSYN3NW8zNilnImLbUl7ycChJwb07JhuN0Dx26yfAGUlgFMEomcmRLN0RuYyJ4Wuyrop86YB1jjuJaAri9VLV9UzxGm5oBSBSW2sqj55or8vDemgnXcuPGDEJer~1KDLlbA-xCW1R9NUp-iDiXWStUJ1YjFIT2040fjOjoV5EjSR9StO8IcADN~K095gcawz6Mm-xHkVSlk1EICJnWm9d884CzGp0w__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 9.72478111694871,
                "label": "Firefly",
                "fileName": "default_firefly.glb",
                "value": 3
              },
              {
                "cadKey": "default_generic_cube.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_generic_cube.gltf?Expires=32503680000&Signature=a8xOm0jTNTRKsRFQyQFXB9Se7AHfScohZP9ecmmHxCqR3iW-MZqxCMGqRgR~HRqaOITp8HPB~UC9OVgeyhQ5zzf-z~DSNqHvBfB5TMDb9g99w-Tk~K5s33Qktjb6kll-szU38Uf2pj2QukiZU6IkMOyVhpUkNMlrjkzPYtX55YTz8nPz0wWFtsqitZj2ZIcNGkLHd--hUsA6pZ-mlHc4KqxeU~cu8l~1qKMsNu4EN0pEfuDw0IlSPSw8TYYMxGDToiOz-XNjflMvyqNAAgazjY-WgRSG4SIFzl3z0-PIWfU17mTjQrt1lqXu9FvZ65QuPDoG2Rzq-0HezKuf5b068g__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 37.6055945315445,
                "label": "Generic Cube",
                "fileName": "default_generic_cube.glb",
                "value": 4
              },
              {
                "cadKey": "default_gto_sat.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_gto_sat.glb?Expires=32503680000&Signature=PTqFB38xXETImQBqdnXISe7~~bI0XQBw7VVrPm8mDWOKJ0STMP~1p5oK~3UG8lykd3p40W3-ADezVVPnbsRqCExZnzoCDCfT6fdl-ayJnKohsCc1dkRJC2c7-xGanC8flKr-pMvOieY4WZZwI~SrloMoa2z0W6CpHAlSfJU5tqeSS5WX20LFDpAXfoLVgiPSJoVLLtR~urjgpepRPorgAL1qdBbQyFDCClO6R2i~NUV~QBNQ13A32f76xgFXPMnmMtKPfenoooaInOQXV1ocx1KNnb5pjRgUyDry-BIV2O1a~vpt5U5SR8hb4qCMP5pgdGLdEu2uuorHGi2oahf5~w__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 0.152970246503651,
                "label": "GTOSat",
                "fileName": "default_gto_sat.glb",
                "value": 5
              },
              {
                "cadKey": "default_ice_sat.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_ice_sat.glb?Expires=32503680000&Signature=vmGf8mbnhGhLRrAernw32EnAu64PjdxxHs0-ET-46YSGszv6UD9DciCS0PEnOJVrUMINzPSoUQIGaMNVWHvots~7YO954XrPu~gimXpkXwo8WunoKBegghn8UQC4gqtZNA8uMiLnG9ltTCXZ1YQQ4jD3GgGZYjyHktPG4GYCZiSQhBfsCqjpttVOswd6oULCJ2YsydnTRKSrktHoEu3hx7FXXXbLh08tvQz8n4PKtcYdQlx1VafcT2tradE0JGwMhT2GEFr2~BJmcU59SJx5qFK2YHhb-O1QOTbhe9P4YbItRv3CKltZF8UlecovT7OoazQXMbP4xazQVkYjNY-few__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 0.0098208757195627,
                "label": "ICESat",
                "fileName": "default_ice_sat.glb",
                "value": 6
              },
              {
                "cadKey": "default_iss.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_iss.glb?Expires=32503680000&Signature=edOXVgO0iWeVuQGk1CvnFXD3HMCI1HUzhXqwZo1f59NbcCjHF~-mxKbgnowZJyWnnt-TaYlYJKN0eNAHQbIABeP9skYgQPEgnrN41JNv0GykMWJb3wwJ0l3WwEB9wwgzUFay1D5CjVZWrOHmHbeyxuOPnfA3HGyuiiIlKDsHQfUXpCaYPEjnnZ-zkSbrvYJm0fy44BRhqFF00-IKjQ14viD21TWv1DEcWPHjFhh7hT0VoqnbnFjSSQsuy5PGgtzOEZmj3sjhyftJKwko48ASKivwpuO1PQQosma5Qs4BdmHmSczr9QA-mdaVIuwoXDlAwKSgH~WpryXUXXuTVSdVyA__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 0.414046926112043,
                "label": "International Space Station",
                "fileName": "default_iss.glb",
                "value": 7
              },
              {
                "cadKey": "default_surf_sat.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_surf_sat.glb?Expires=32503680000&Signature=mLVqiJ1kiuVZytle5tkRLuKx0lUjSxRpXJ3dtSMMIb2zZvvCYAQSiI3M4Aez3X~qv1a~OttbJvdm7ksjfvrSDY9dZBq8TWt6SZI8LjbN1HYhGWifWNA2sFaD8cLDdpil~jBkBptqOg6bRYdDasKHSG0hOi4oLKUutUodkWqZTKiWl~WEKo48uoqZrkGE2dSUl-T38NSrQLvkTkIKS-ZDG66CsEbkAPe1VXtwPMzA90EV8HRccMbAtzbfrW6HPx5E7Yv21qAzssrafnRmZcjGX23abViQYApNlnAx6i7SJCp~Z0kb5MyWVNrL8hJScUXbbFVQnYzmCW4seOnAl2ueeQ__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 0.421152667562793,
                "label": "SurfSat",
                "fileName": "default_surf_sat.glb",
                "value": 8
              }
            ]
          }
        }
      },
      "SatelliteBG": {
        "title": "SatelliteBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                { "$ref": "#/components/schemas/Satellite" },
                { "$ref": "#/components/schemas/SimulatableSatellite" }
              ]
            },
            "default": {}
          }
        }
      },
      "SatelliteUpdate": {
        "title": "SatelliteUpdate",
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "mass": { "title": "Mass [kg]", "exclusiveMinimum": 0.0, "type": "number" },
          "inertia": { "title": "Inertia Matrix [Matrix3[kg-m^2]]" },
          "earthshineIrradiance": { "title": "Earthshineirradiance", "type": "number" },
          "albedo": { "title": "Albedo", "maximum": 1.0, "minimum": 0.0, "type": "number" },
          "dragTorque": { "title": "Dragtorque", "type": "array", "items": { "type": "number" } },
          "gravityGradientTorque": {
            "title": "Gravitygradienttorque",
            "type": "array",
            "items": { "type": "number" }
          }
        }
      },
      "ScenarioTemplate": {
        "title": "ScenarioTemplate",
        "required": ["latestPrimeId", "nextId"],
        "type": "object",
        "properties": {
          "latestPrimeId": { "title": "Latestprimeid", "type": "integer" },
          "blockToBlockGroupMap": {
            "title": "Blocktoblockgroupmap",
            "type": "object",
            "additionalProperties": { "type": "string" },
            "default": {}
          },
          "TemplateRef": {
            "title": "Templateref",
            "allOf": [{ "$ref": "#/components/schemas/TemplateRefBG" }],
            "default": {}
          },
          "Agent": {
            "title": "Agent",
            "allOf": [{ "$ref": "#/components/schemas/AgentBG" }],
            "default": {}
          },
          "ClockConfig": {
            "title": "Clockconfig",
            "allOf": [{ "$ref": "#/components/schemas/ClockConfigBG" }],
            "default": {}
          },
          "clockConfig": {
            "title": "ID of Associated ClockConfig Block",
            "type": "integer",
            "description": "Relationship to zero or one `ClockConfig` blocks. "
          },
          "agents": {
            "title": "IDs of Associated Agent Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Agent` blocks. ",
            "default": []
          },
          "nextId": {
            "title": "Nextid",
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
            "items": [{ "type": "integer" }, { "type": "integer" }]
          }
        }
      },
      "SideCategories": {
        "title": "SideCategories",
        "enum": ["COMPONENT", "SURFACE", "COOLER"],
        "description": "An enumeration."
      },
      "SimulatableSatellite": {
        "title": "SimulatableSatellite",
        "required": ["cadKey", "cadSignedUrl", "cadScaleFactor", "topology"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "mass": { "title": "Mass [kg]", "exclusiveMinimum": 0.0, "type": "number" },
          "inertia": { "title": "Inertia Matrix [Matrix3[kg-m^2]]" },
          "earthshineIrradiance": { "title": "Earthshineirradiance", "type": "number" },
          "albedo": { "title": "Albedo", "maximum": 1.0, "minimum": 0.0, "type": "number" },
          "dragTorque": { "title": "Dragtorque", "type": "array", "items": { "type": "number" } },
          "gravityGradientTorque": {
            "title": "Gravitygradienttorque",
            "type": "array",
            "items": { "type": "number" }
          },
          "cadFileName": {
            "title": "Cadfilename",
            "maxLength": 100,
            "type": "string",
            "default": ""
          },
          "cadKey": { "title": "Cadkey", "maxLength": 48, "type": "string" },
          "cadSignedUrl": { "title": "Cadsignedurl", "maxLength": 1024, "type": "string" },
          "cadScaleFactor": {
            "title": "Cadscalefactor",
            "exclusiveMinimum": 0.0,
            "type": "number"
          },
          "bodyFrameVectors": {
            "title": "IDs of Associated BodyFrameVector Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `BodyFrameVector` blocks. Reverse key: `BodyFrameVector.satellite`.",
            "default": []
          },
          "surfaces": {
            "title": "IDs of Associated Surface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Surface` blocks. Reverse key: `Surface.satellite`.",
            "default": []
          },
          "solarArrays": {
            "title": "IDs of Associated SolarArray Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarArray` blocks. ",
            "default": []
          },
          "subsystems": {
            "title": "IDs of Associated Subsystem Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Subsystem` blocks. Reverse key: `Subsystem.satellite`.",
            "default": []
          },
          "topology": {
            "title": "ID of Associated Component Block",
            "type": "integer",
            "description": "Relationship to a `Component` block. "
          },
          "components": {
            "title": "IDs of Associated Component Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Component` blocks. Reverse key: `Component.satellite`.",
            "default": []
          },
          "interfaces": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.satellite`.",
            "default": []
          },
          "coolers": {
            "title": "IDs of Associated Cooler Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Cooler` blocks. ",
            "default": []
          },
          "heaters": {
            "title": "IDs of Associated Heater Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Heater` blocks. ",
            "default": []
          },
          "DEFAULT_CAD_MODELS": {
            "title": "Default Cad Models",
            "type": "array",
            "items": {},
            "default": [
              {
                "cadKey": "default_aqua.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_aqua.glb?Expires=32503680000&Signature=I4iKx5pup4jUrXYF5muhkNUy2rE7dXi-XS7QRyPmXNbxd70c09tg-WesyWDfZpTO7Xn-nAZb8Qw-Kb3w1amXNHh8zqYCFagrMVQiTZY2H4V3m5ZfFdxeUuMdqhOh4Gior017OocOiFso5xpHIk0oFWs0co~Ovx4L2Le-HqiHBwyUI2uNDFxrtYaDs7~4bgYT4HV1mkGj3mg05dLoA~NR-UX5IbX1szgElAvHi9MF4sr6ff91yQQdFxfjcXZR41-1Xt1T9GVs4u35UUxbNxFzohhd8BY-AAIGQoE2HmN453izx~QGGCnU8hMYjl-lyuSp29HRw4Uol718VsgWYNmwLg__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 0.00174361872910041,
                "label": "Aqua",
                "fileName": "default_aqua.glb",
                "value": 0
              },
              {
                "cadKey": "default_clementine.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_clementine.glb?Expires=32503680000&Signature=s~TB8viMYDaspD4t9XD5fX0qQ7NavVpZe~xKWvmdKa3bGQ2K3a5pHroPySAZ2lmbnn5gAJC9ZalMNIypjF7YuExT2Ux6665YQQEKUxDyl0H7MCKvGPmvSpeg9VRr-s5PgL2oobWbDAnehO9p4~x42Nl7-ijNRz2mQrnAKx4klyA8UW2TXtjJE8~UujplL9AzPswYXiWzzouIOiyO6lHVOyu~wP7~qlGnDmUgUmZCNNhrUqnEGHdN7FTNk3dzH~VYN6Cz2yirfuRyFHI0F3OnhW-ubvoqt~ROc-E5sr16eENVzGi~UVNhdnkEwjQ9jigK~BwfcUyLPFY0amEpD5TbnA__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 0.399988433354028,
                "label": "Clementine",
                "fileName": "default_clementine.glb",
                "value": 1
              },
              {
                "cadKey": "default_cloud_sat.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_cloud_sat.glb?Expires=32503680000&Signature=t0rCf7EOYPVaYOtlCbej1j~FFeVNFD6hqOdmXDGSsTJUUnaPcrNzYxV5LwhRntMBRRsG~cieiSH~wKPNS06d-vtCnVFFD1iE4WuTPcsVOrQPoEilxGC4-0GKReWIRHDWZUbhD31WKB8oXSuoY43nMAit1yZ0yeulnjEga6N53tn5Le~xEuwj1OvGAAr6HEARFs9T8YxMzeEIz-qj67P9a0638JwEZiC330vg9pbgGlvsMbRW7WycHkB28Xcc1XE6VbPn6Od-tNo~fZl2dYMpH8janY-UdPQSusQr6fiDc8KnT8p8ETtyIT5pf7~hPodFz~p4xdCdt4mKNAVe4M9jAQ__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 0.000103688898120542,
                "label": "Cloud",
                "fileName": "default_cloud_sat.glb",
                "value": 2
              },
              {
                "cadKey": "default_firefly.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_firefly.glb?Expires=32503680000&Signature=IaXBLHVcGcShgBGm7verZGYEr4KCkCZfIDsb4wfHKAHRe1XgJbIM1WqKQlhjpii2Ly3h6F8LEELzHhpVvF5FH30TjBBh2oVr1F2lwy1srQ4PDAZ9OtF4YauzcSYN3NW8zNilnImLbUl7ycChJwb07JhuN0Dx26yfAGUlgFMEomcmRLN0RuYyJ4Wuyrop86YB1jjuJaAri9VLV9UzxGm5oBSBSW2sqj55or8vDemgnXcuPGDEJer~1KDLlbA-xCW1R9NUp-iDiXWStUJ1YjFIT2040fjOjoV5EjSR9StO8IcADN~K095gcawz6Mm-xHkVSlk1EICJnWm9d884CzGp0w__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 9.72478111694871,
                "label": "Firefly",
                "fileName": "default_firefly.glb",
                "value": 3
              },
              {
                "cadKey": "default_generic_cube.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_generic_cube.gltf?Expires=32503680000&Signature=a8xOm0jTNTRKsRFQyQFXB9Se7AHfScohZP9ecmmHxCqR3iW-MZqxCMGqRgR~HRqaOITp8HPB~UC9OVgeyhQ5zzf-z~DSNqHvBfB5TMDb9g99w-Tk~K5s33Qktjb6kll-szU38Uf2pj2QukiZU6IkMOyVhpUkNMlrjkzPYtX55YTz8nPz0wWFtsqitZj2ZIcNGkLHd--hUsA6pZ-mlHc4KqxeU~cu8l~1qKMsNu4EN0pEfuDw0IlSPSw8TYYMxGDToiOz-XNjflMvyqNAAgazjY-WgRSG4SIFzl3z0-PIWfU17mTjQrt1lqXu9FvZ65QuPDoG2Rzq-0HezKuf5b068g__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 37.6055945315445,
                "label": "Generic Cube",
                "fileName": "default_generic_cube.glb",
                "value": 4
              },
              {
                "cadKey": "default_gto_sat.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_gto_sat.glb?Expires=32503680000&Signature=PTqFB38xXETImQBqdnXISe7~~bI0XQBw7VVrPm8mDWOKJ0STMP~1p5oK~3UG8lykd3p40W3-ADezVVPnbsRqCExZnzoCDCfT6fdl-ayJnKohsCc1dkRJC2c7-xGanC8flKr-pMvOieY4WZZwI~SrloMoa2z0W6CpHAlSfJU5tqeSS5WX20LFDpAXfoLVgiPSJoVLLtR~urjgpepRPorgAL1qdBbQyFDCClO6R2i~NUV~QBNQ13A32f76xgFXPMnmMtKPfenoooaInOQXV1ocx1KNnb5pjRgUyDry-BIV2O1a~vpt5U5SR8hb4qCMP5pgdGLdEu2uuorHGi2oahf5~w__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 0.152970246503651,
                "label": "GTOSat",
                "fileName": "default_gto_sat.glb",
                "value": 5
              },
              {
                "cadKey": "default_ice_sat.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_ice_sat.glb?Expires=32503680000&Signature=vmGf8mbnhGhLRrAernw32EnAu64PjdxxHs0-ET-46YSGszv6UD9DciCS0PEnOJVrUMINzPSoUQIGaMNVWHvots~7YO954XrPu~gimXpkXwo8WunoKBegghn8UQC4gqtZNA8uMiLnG9ltTCXZ1YQQ4jD3GgGZYjyHktPG4GYCZiSQhBfsCqjpttVOswd6oULCJ2YsydnTRKSrktHoEu3hx7FXXXbLh08tvQz8n4PKtcYdQlx1VafcT2tradE0JGwMhT2GEFr2~BJmcU59SJx5qFK2YHhb-O1QOTbhe9P4YbItRv3CKltZF8UlecovT7OoazQXMbP4xazQVkYjNY-few__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 0.0098208757195627,
                "label": "ICESat",
                "fileName": "default_ice_sat.glb",
                "value": 6
              },
              {
                "cadKey": "default_iss.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_iss.glb?Expires=32503680000&Signature=edOXVgO0iWeVuQGk1CvnFXD3HMCI1HUzhXqwZo1f59NbcCjHF~-mxKbgnowZJyWnnt-TaYlYJKN0eNAHQbIABeP9skYgQPEgnrN41JNv0GykMWJb3wwJ0l3WwEB9wwgzUFay1D5CjVZWrOHmHbeyxuOPnfA3HGyuiiIlKDsHQfUXpCaYPEjnnZ-zkSbrvYJm0fy44BRhqFF00-IKjQ14viD21TWv1DEcWPHjFhh7hT0VoqnbnFjSSQsuy5PGgtzOEZmj3sjhyftJKwko48ASKivwpuO1PQQosma5Qs4BdmHmSczr9QA-mdaVIuwoXDlAwKSgH~WpryXUXXuTVSdVyA__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 0.414046926112043,
                "label": "International Space Station",
                "fileName": "default_iss.glb",
                "value": 7
              },
              {
                "cadKey": "default_surf_sat.glb",
                "cadSignedUrl": "https://d2me2gysyodohj.cloudfront.net/default_surf_sat.glb?Expires=32503680000&Signature=mLVqiJ1kiuVZytle5tkRLuKx0lUjSxRpXJ3dtSMMIb2zZvvCYAQSiI3M4Aez3X~qv1a~OttbJvdm7ksjfvrSDY9dZBq8TWt6SZI8LjbN1HYhGWifWNA2sFaD8cLDdpil~jBkBptqOg6bRYdDasKHSG0hOi4oLKUutUodkWqZTKiWl~WEKo48uoqZrkGE2dSUl-T38NSrQLvkTkIKS-ZDG66CsEbkAPe1VXtwPMzA90EV8HRccMbAtzbfrW6HPx5E7Yv21qAzssrafnRmZcjGX23abViQYApNlnAx6i7SJCp~Z0kb5MyWVNrL8hJScUXbbFVQnYzmCW4seOnAl2ueeQ__&Key-Pair-Id=K3MW6686F6VH4R",
                "cadScaleFactor": 0.421152667562793,
                "label": "SurfSat",
                "fileName": "default_surf_sat.glb",
                "value": 8
              }
            ]
          },
          "reactionWheels": {
            "title": "IDs of Associated ReactionWheel Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ReactionWheel` blocks. ",
            "default": []
          },
          "magnetorquers": {
            "title": "IDs of Associated Magnetorquer Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Magnetorquer` blocks. ",
            "default": []
          },
          "commandedAltitude": {
            "title": "Commandedaltitude",
            "type": "array",
            "items": { "type": "number" }
          },
          "commandedAngularRates": {
            "title": "Commandedangularrates",
            "type": "array",
            "items": { "type": "number" }
          }
        }
      },
      "SingleConvHybridTopology": {
        "title": "SingleConvHybridTopology",
        "required": ["name", "subsystem", "componentType", "topologyType", "battery"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": {
            "title": "Componenttype",
            "enum": ["POWER_PROCESSOR"],
            "type": "string"
          },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "topologyType": {
            "title": "Topologytype",
            "enum": ["SINGLE_CONV_HYBRID"],
            "type": "string"
          },
          "topologyParams": {
            "title": "Topology Definition Parameters",
            "anyOf": [
              { "$ref": "#/components/schemas/TopologyParamFRD" },
              { "$ref": "#/components/schemas/TopologyParamSCH" },
              { "$ref": "#/components/schemas/TopologyParamQRD" },
              { "$ref": "#/components/schemas/TopologyParamTCM" },
              { "$ref": "#/components/schemas/TopologyParamSCM" }
            ],
            "description": "This field may only be undefined initially.  It is required on first update."
          },
          "loads": {
            "title": "IDs of Associated Load Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Load` blocks. Reverse key: `Load.topology`.",
            "default": []
          },
          "battery": {
            "title": "ID of Associated Battery Block",
            "type": "integer",
            "description": "Relationship to a `Battery` block. Reverse key: `Battery.topology`."
          },
          "batteryCells": {
            "title": "IDs of Associated BatteryCell Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `BatteryCell` blocks. Reverse key: `BatteryCell.topology`.",
            "default": []
          },
          "busRegulators": {
            "title": "IDs of Associated BusRegulator Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `BusRegulator` blocks. Reverse key: `BusRegulator.topology`.",
            "default": []
          },
          "solarArrays": {
            "title": "IDs of Associated SolarArray Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarArray` blocks. Reverse key: `SolarArray.topology`.",
            "default": []
          },
          "solarCells": {
            "title": "IDs of Associated SolarCell Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarCell` blocks. Reverse key: `SolarCell.topology`.",
            "default": []
          }
        }
      },
      "SingleConvMpptTopology": {
        "title": "SingleConvMpptTopology",
        "required": ["name", "subsystem", "componentType", "topologyType", "battery"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": {
            "title": "Componenttype",
            "enum": ["POWER_PROCESSOR"],
            "type": "string"
          },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "topologyType": {
            "title": "Topologytype",
            "enum": ["SINGLE_CONV_MPPT"],
            "type": "string"
          },
          "topologyParams": {
            "title": "Topology Definition Parameters",
            "anyOf": [
              { "$ref": "#/components/schemas/TopologyParamFRD" },
              { "$ref": "#/components/schemas/TopologyParamSCH" },
              { "$ref": "#/components/schemas/TopologyParamQRD" },
              { "$ref": "#/components/schemas/TopologyParamTCM" },
              { "$ref": "#/components/schemas/TopologyParamSCM" }
            ],
            "description": "This field may only be undefined initially.  It is required on first update."
          },
          "loads": {
            "title": "IDs of Associated Load Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Load` blocks. Reverse key: `Load.topology`.",
            "default": []
          },
          "battery": {
            "title": "ID of Associated Battery Block",
            "type": "integer",
            "description": "Relationship to a `Battery` block. Reverse key: `Battery.topology`."
          },
          "batteryCells": {
            "title": "IDs of Associated BatteryCell Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `BatteryCell` blocks. Reverse key: `BatteryCell.topology`.",
            "default": []
          },
          "busRegulators": {
            "title": "IDs of Associated BusRegulator Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `BusRegulator` blocks. Reverse key: `BusRegulator.topology`.",
            "default": []
          },
          "solarArrays": {
            "title": "IDs of Associated SolarArray Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarArray` blocks. Reverse key: `SolarArray.topology`.",
            "default": []
          },
          "solarCells": {
            "title": "IDs of Associated SolarCell Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarCell` blocks. Reverse key: `SolarCell.topology`.",
            "default": []
          }
        }
      },
      "SlidingModeAlgorithm": {
        "title": "SlidingModeAlgorithm",
        "required": ["name", "rate", "gainK", "gainG", "gainC", "epsilon"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "rate": { "title": "Update Rate [Hz]", "type": "number" },
          "gainK": {
            "title": "Gain K",
            "exclusiveMinimum": 0.0,
            "type": "number",
            "description": "Alters the relative weighting between angular rate error."
          },
          "gainG": {
            "title": "Gain G",
            "exclusiveMinimum": 0.0,
            "type": "number",
            "description": "Scales the overall speed of convergence."
          },
          "gainC": {
            "title": "Gain C",
            "exclusiveMinimum": 0.0,
            "type": "number",
            "description": "Dictates the strength of the magnetorquer desaturation torques."
          },
          "epsilon": {
            "title": "Epsilon",
            "exclusiveMinimum": 0.0,
            "type": "number",
            "description": "The sliding mode boundary layer. Higher values may produce more error, but less chattering."
          }
        }
      },
      "SolarArray": {
        "title": "SolarArray",
        "required": ["name", "topology"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "panels": {
            "title": "IDs of Associated SolarPanel Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarPanel` blocks. Reverse key: `SolarPanel.array`.",
            "default": []
          },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to a `Topology` block. Reverse key: `Topology.solarArrays`."
          }
        }
      },
      "SolarArrayBG": {
        "title": "SolarArrayBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/SolarArray" },
            "default": {}
          }
        }
      },
      "SolarArrayCreate": {
        "title": "SolarArrayCreate",
        "required": ["name", "topology"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to a `Topology` block. Reverse key: `Topology.solarArrays`."
          }
        }
      },
      "SolarArrayUpdate": {
        "title": "SolarArrayUpdate",
        "required": ["name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "panels": {
            "title": "IDs of Associated SolarPanel Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarPanel` blocks. Reverse key: `SolarPanel.array`.",
            "default": []
          }
        }
      },
      "SolarCell": {
        "title": "SolarCell",
        "required": [
          "openCircuitVoltage",
          "shortCircuitCurrent",
          "maxPowerVoltage",
          "maxPowerCurrent",
          "numJunctions",
          "topology"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "openCircuitVoltage": {
            "title": "Open Circuit Voltage [V]",
            "minimum": 0.0,
            "type": "number"
          },
          "shortCircuitCurrent": {
            "title": "Short Circuit Current [A]",
            "minimum": 0.0,
            "type": "number"
          },
          "maxPowerVoltage": { "title": "Max Power Voltage [V]", "minimum": 0.0, "type": "number" },
          "maxPowerCurrent": { "title": "Max Power Current [A]", "minimum": 0.0, "type": "number" },
          "numJunctions": { "title": "# of Junctions", "minimum": 1.0, "type": "integer" },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to a `Topology` block. Reverse key: `Topology.solarCells`."
          },
          "panels": {
            "title": "IDs of Associated SolarPanel Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarPanel` blocks. Reverse key: `SolarPanel.cell`.",
            "default": []
          }
        }
      },
      "SolarCellBG": {
        "title": "SolarCellBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/SolarCell" },
            "default": {}
          }
        }
      },
      "SolarCellCreate": {
        "title": "SolarCellCreate",
        "required": [
          "openCircuitVoltage",
          "shortCircuitCurrent",
          "maxPowerVoltage",
          "maxPowerCurrent",
          "numJunctions",
          "topology"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "openCircuitVoltage": {
            "title": "Open Circuit Voltage [V]",
            "minimum": 0.0,
            "type": "number"
          },
          "shortCircuitCurrent": {
            "title": "Short Circuit Current [A]",
            "minimum": 0.0,
            "type": "number"
          },
          "maxPowerVoltage": { "title": "Max Power Voltage [V]", "minimum": 0.0, "type": "number" },
          "maxPowerCurrent": { "title": "Max Power Current [A]", "minimum": 0.0, "type": "number" },
          "numJunctions": { "title": "# of Junctions", "minimum": 1.0, "type": "integer" },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to a `Topology` block. Reverse key: `Topology.solarCells`."
          }
        }
      },
      "SolarCellUpdate": {
        "title": "SolarCellUpdate",
        "required": [
          "openCircuitVoltage",
          "shortCircuitCurrent",
          "maxPowerVoltage",
          "maxPowerCurrent",
          "numJunctions"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "openCircuitVoltage": {
            "title": "Open Circuit Voltage [V]",
            "minimum": 0.0,
            "type": "number"
          },
          "shortCircuitCurrent": {
            "title": "Short Circuit Current [A]",
            "minimum": 0.0,
            "type": "number"
          },
          "maxPowerVoltage": { "title": "Max Power Voltage [V]", "minimum": 0.0, "type": "number" },
          "maxPowerCurrent": { "title": "Max Power Current [A]", "minimum": 0.0, "type": "number" },
          "numJunctions": { "title": "# of Junctions", "minimum": 1.0, "type": "integer" }
        }
      },
      "SolarPanel": {
        "title": "SolarPanel",
        "required": [
          "name",
          "subsystem",
          "numSeries",
          "numParallel",
          "blockingDiodeDrop",
          "cell",
          "surface"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": {
            "title": "Componenttype",
            "enum": ["SOLAR_PANEL"],
            "type": "string",
            "default": "SOLAR_PANEL"
          },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "numSeries": { "title": "# of Series Cells", "minimum": 1.0, "type": "integer" },
          "numParallel": { "title": "# of Parallel Cells", "minimum": 1.0, "type": "integer" },
          "blockingDiodeDrop": {
            "title": "Blocking Diode Drop [V]",
            "minimum": 0.0,
            "type": "number",
            "description": "Set to 0 to omit diode."
          },
          "cell": {
            "title": "ID of Associated SolarCell Block",
            "type": "integer",
            "description": "Relationship to a `SolarCell` block. Reverse key: `SolarCell.panels`."
          },
          "surface": {
            "title": "ID of Associated Surface Block",
            "type": "integer",
            "description": "Relationship to a `Surface` block. Reverse key: `Surface.panels`."
          },
          "array": {
            "title": "ID of Associated SolarArray Block",
            "type": "integer",
            "description": "Relationship to zero or one `SolarArray` blocks. Reverse key: `SolarArray.panels`."
          }
        }
      },
      "SolarPanelCreate": {
        "title": "SolarPanelCreate",
        "required": [
          "name",
          "subsystem",
          "numSeries",
          "numParallel",
          "blockingDiodeDrop",
          "cell",
          "surface"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "numSeries": { "title": "# of Series Cells", "minimum": 1.0, "type": "integer" },
          "numParallel": { "title": "# of Parallel Cells", "minimum": 1.0, "type": "integer" },
          "blockingDiodeDrop": {
            "title": "Blocking Diode Drop [V]",
            "minimum": 0.0,
            "type": "number",
            "description": "Set to 0 to omit diode."
          },
          "cell": {
            "title": "ID of Associated SolarCell Block",
            "type": "integer",
            "description": "Relationship to a `SolarCell` block. Reverse key: `SolarCell.panels`."
          },
          "surface": {
            "title": "ID of Associated Surface Block",
            "type": "integer",
            "description": "Relationship to a `Surface` block. Reverse key: `Surface.panels`."
          }
        }
      },
      "SolarPanelUpdate": {
        "title": "SolarPanelUpdate",
        "required": ["name", "numSeries", "numParallel", "blockingDiodeDrop", "cell", "surface"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "numSeries": { "title": "# of Series Cells", "minimum": 1.0, "type": "integer" },
          "numParallel": { "title": "# of Parallel Cells", "minimum": 1.0, "type": "integer" },
          "blockingDiodeDrop": {
            "title": "Blocking Diode Drop [V]",
            "minimum": 0.0,
            "type": "number",
            "description": "Set to 0 to omit diode."
          },
          "cell": {
            "title": "ID of Associated SolarCell Block",
            "type": "integer",
            "description": "Relationship to a `SolarCell` block. Reverse key: `SolarCell.panels`."
          },
          "surface": {
            "title": "ID of Associated Surface Block",
            "type": "integer",
            "description": "Relationship to a `Surface` block. Reverse key: `Surface.panels`."
          }
        }
      },
      "SpaceTarget": {
        "title": "SpaceTarget",
        "required": ["name", "conOps"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.targets`."
          },
          "targetType": {
            "title": "Targettype",
            "enum": ["SPACE_TARGET"],
            "type": "string",
            "default": "SPACE_TARGET"
          },
          "conditions_A": {
            "title": "IDs of Associated Condition Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Condition` blocks. Reverse key: `Condition.targetA`.",
            "default": []
          },
          "conditions_B": {
            "title": "IDs of Associated Condition Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Condition` blocks. Reverse key: `Condition.targetB`.",
            "default": []
          },
          "targetGroups": {
            "title": "IDs of Associated TargetGroup Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `TargetGroup` blocks. Reverse key: `TargetGroup.targets`.",
            "default": []
          },
          "pointingModes_A": {
            "title": "IDs of Associated PointingMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `PointingMode` blocks. Reverse key: `PointingMode.targetA`.",
            "default": []
          },
          "pointingModes_B": {
            "title": "IDs of Associated PointingMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `PointingMode` blocks. Reverse key: `PointingMode.targetB`.",
            "default": []
          },
          "targetGroupAssociations": {
            "title": "IDs of Associated TargetGroupAssociation Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `TargetGroupAssociation` blocks. Reverse key: `TargetGroupAssociation.target`.",
            "default": []
          }
        }
      },
      "SpaceTargetCreate": {
        "title": "SpaceTargetCreate",
        "required": ["name", "conOps"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.targets`."
          },
          "targetType": {
            "title": "Targettype",
            "enum": ["SPACE_TARGET"],
            "type": "string",
            "default": "SPACE_TARGET"
          }
        }
      },
      "SpaceTargetUpdate": {
        "title": "SpaceTargetUpdate",
        "required": ["name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "targetType": {
            "title": "Targettype",
            "enum": ["SPACE_TARGET"],
            "type": "string",
            "default": "SPACE_TARGET"
          }
        }
      },
      "SphericalAngles": {
        "title": "SphericalAngles",
        "required": ["theta", "phi"],
        "type": "object",
        "properties": {
          "theta": { "title": "Theta [deg]", "maximum": 360.0, "minimum": 0.0, "type": "number" },
          "phi": { "title": "Phi [deg]", "maximum": 360.0, "minimum": 0.0, "type": "number" }
        }
      },
      "Statuses": {
        "title": "Statuses",
        "enum": ["PENDING", "RUNNING", "PAUSED", "TERMINATED", "FAILED", "SUCCEEDED"],
        "description": "An enumeration."
      },
      "Subsystem": {
        "title": "Subsystem",
        "required": ["name", "satellite"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to a `Satellite` block. Reverse key: `Satellite.subsystems`."
          },
          "category": {
            "allOf": [{ "$ref": "#/components/schemas/Categories" }],
            "default": "CUSTOM"
          },
          "components": {
            "title": "IDs of Associated Component Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Component` blocks. Reverse key: `Component.subsystem`.",
            "default": []
          }
        }
      },
      "SubsystemBG": {
        "title": "SubsystemBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/Subsystem" },
            "default": {}
          }
        }
      },
      "SubsystemCreate": {
        "title": "SubsystemCreate",
        "required": ["name", "satellite"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to a `Satellite` block. Reverse key: `Satellite.subsystems`."
          }
        }
      },
      "SubsystemUpdate": {
        "title": "SubsystemUpdate",
        "required": ["name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" }
        }
      },
      "SunTrackingSurface": {
        "title": "SunTrackingSurface",
        "required": [
          "name",
          "motionType",
          "area",
          "surfaceCentroid",
          "bodyFrameVector",
          "surfaceMaterial",
          "satellite"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "motionType": { "title": "Motiontype", "enum": ["SUN_TRACKING"], "type": "string" },
          "area": { "title": "Area [m^2]", "exclusiveMinimum": 0.0, "type": "number" },
          "surfaceCentroid": {
            "title": "Centeroid [Vector3[m]]",
            "type": "array",
            "items": { "type": "number" }
          },
          "bodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. Reverse key: `BodyFrameVector.surfaces`."
          },
          "surfaceMaterial": {
            "title": "ID of Associated SurfaceMaterial Block",
            "type": "integer",
            "description": "Relationship to a `SurfaceMaterial` block. Reverse key: `SurfaceMaterial.surfaces`."
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to a `Satellite` block. Reverse key: `Satellite.surfaces`."
          },
          "panels": {
            "title": "IDs of Associated SolarPanel Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarPanel` blocks. Reverse key: `SolarPanel.surface`.",
            "default": []
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.surfaceA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.surfaceB`.",
            "default": []
          },
          "heliocenterAngle": { "title": "Heliocenterangle", "type": "number" },
          "solarViewFactor": {
            "title": "Solarviewfactor",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "sat2Sun": { "title": "Sat2Sun", "type": "array", "items": { "type": "number" } },
          "earthIrHeatFlowRate": { "title": "Earthirheatflowrate", "type": "number" },
          "earthAlbedoHeatFlowRate": { "title": "Earthalbedoheatflowrate", "type": "number" },
          "solarHeatFlowRate": { "title": "Solarheatflowrate", "type": "number" },
          "spaceHeatFlowRate": { "title": "Spaceheatflowrate", "type": "number" },
          "heatFlowRate": { "title": "Heatflowrate", "type": "number" },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "articulationAngle": {
            "title": "Articulationangle",
            "maximum": 360.0,
            "minimum": 0.0,
            "type": "number",
            "default": 0
          }
        }
      },
      "Surface": {
        "title": "Surface",
        "required": [
          "name",
          "motionType",
          "area",
          "surfaceCentroid",
          "bodyFrameVector",
          "surfaceMaterial",
          "satellite"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "motionType": {
            "title": "Motion Type",
            "allOf": [{ "$ref": "#/components/schemas/MotionTypes" }]
          },
          "area": { "title": "Area [m^2]", "exclusiveMinimum": 0.0, "type": "number" },
          "surfaceCentroid": {
            "title": "Centeroid [Vector3[m]]",
            "type": "array",
            "items": { "type": "number" }
          },
          "bodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. Reverse key: `BodyFrameVector.surfaces`."
          },
          "surfaceMaterial": {
            "title": "ID of Associated SurfaceMaterial Block",
            "type": "integer",
            "description": "Relationship to a `SurfaceMaterial` block. Reverse key: `SurfaceMaterial.surfaces`."
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to a `Satellite` block. Reverse key: `Satellite.surfaces`."
          },
          "panels": {
            "title": "IDs of Associated SolarPanel Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarPanel` blocks. Reverse key: `SolarPanel.surface`.",
            "default": []
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.surfaceA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.surfaceB`.",
            "default": []
          },
          "heliocenterAngle": { "title": "Heliocenterangle", "type": "number" },
          "solarViewFactor": {
            "title": "Solarviewfactor",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "sat2Sun": { "title": "Sat2Sun", "type": "array", "items": { "type": "number" } },
          "earthIrHeatFlowRate": { "title": "Earthirheatflowrate", "type": "number" },
          "earthAlbedoHeatFlowRate": { "title": "Earthalbedoheatflowrate", "type": "number" },
          "solarHeatFlowRate": { "title": "Solarheatflowrate", "type": "number" },
          "spaceHeatFlowRate": { "title": "Spaceheatflowrate", "type": "number" },
          "heatFlowRate": { "title": "Heatflowrate", "type": "number" },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" }
        }
      },
      "SurfaceBG": {
        "title": "SurfaceBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                { "$ref": "#/components/schemas/FixedSurface" },
                { "$ref": "#/components/schemas/SunTrackingSurface" }
              ]
            },
            "default": {}
          }
        }
      },
      "SurfaceCreate": {
        "title": "SurfaceCreate",
        "required": [
          "name",
          "motionType",
          "area",
          "surfaceCentroid",
          "bodyFrameVector",
          "surfaceMaterial",
          "satellite"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "motionType": {
            "title": "Motion Type",
            "allOf": [{ "$ref": "#/components/schemas/MotionTypes" }]
          },
          "area": { "title": "Area [m^2]", "exclusiveMinimum": 0.0, "type": "number" },
          "surfaceCentroid": {
            "title": "Centeroid [Vector3[m]]",
            "type": "array",
            "items": { "type": "number" }
          },
          "bodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. Reverse key: `BodyFrameVector.surfaces`."
          },
          "surfaceMaterial": {
            "title": "ID of Associated SurfaceMaterial Block",
            "type": "integer",
            "description": "Relationship to a `SurfaceMaterial` block. Reverse key: `SurfaceMaterial.surfaces`."
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to a `Satellite` block. Reverse key: `Satellite.surfaces`."
          }
        }
      },
      "SurfaceMaterial": {
        "title": "SurfaceMaterial",
        "required": [
          "irEmissivity",
          "solarAbsorptivity",
          "diffuseSolarReflectivity",
          "specularSolarReflectivity",
          "hotTempRating",
          "coldTempRating"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "irEmissivity": {
            "title": "IR Emissivity",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "solarAbsorptivity": {
            "title": "Solar Absorptivity",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "diffuseSolarReflectivity": {
            "title": "Diffuse Solar Reflectivity",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "specularSolarReflectivity": {
            "title": "Specular Solar Reflectivity",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "hotTempRating": { "title": "Hot Temperature Rating [C]", "type": "number" },
          "coldTempRating": { "title": "Cold Temperature Rating [C]", "type": "number" },
          "surfaces": {
            "title": "IDs of Associated Surface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Surface` blocks. Reverse key: `Surface.surfaceMaterial`.",
            "default": []
          }
        }
      },
      "SurfaceMaterialBG": {
        "title": "SurfaceMaterialBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/SurfaceMaterial" },
            "default": {}
          }
        }
      },
      "SurfaceMaterialCreate": {
        "title": "SurfaceMaterialCreate",
        "required": [
          "irEmissivity",
          "solarAbsorptivity",
          "diffuseSolarReflectivity",
          "specularSolarReflectivity",
          "hotTempRating",
          "coldTempRating"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "irEmissivity": {
            "title": "IR Emissivity",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "solarAbsorptivity": {
            "title": "Solar Absorptivity",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "diffuseSolarReflectivity": {
            "title": "Diffuse Solar Reflectivity",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "specularSolarReflectivity": {
            "title": "Specular Solar Reflectivity",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "hotTempRating": { "title": "Hot Temperature Rating [C]", "type": "number" },
          "coldTempRating": { "title": "Cold Temperature Rating [C]", "type": "number" }
        }
      },
      "SurfaceMaterialUpdate": {
        "title": "SurfaceMaterialUpdate",
        "required": [
          "irEmissivity",
          "solarAbsorptivity",
          "diffuseSolarReflectivity",
          "specularSolarReflectivity",
          "hotTempRating",
          "coldTempRating"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "irEmissivity": {
            "title": "IR Emissivity",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "solarAbsorptivity": {
            "title": "Solar Absorptivity",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "diffuseSolarReflectivity": {
            "title": "Diffuse Solar Reflectivity",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "specularSolarReflectivity": {
            "title": "Specular Solar Reflectivity",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "hotTempRating": { "title": "Hot Temperature Rating [C]", "type": "number" },
          "coldTempRating": { "title": "Cold Temperature Rating [C]", "type": "number" }
        }
      },
      "SurfaceUpdate": {
        "title": "SurfaceUpdate",
        "required": [
          "name",
          "motionType",
          "area",
          "surfaceCentroid",
          "bodyFrameVector",
          "surfaceMaterial"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "motionType": {
            "title": "Motion Type",
            "allOf": [{ "$ref": "#/components/schemas/MotionTypes" }]
          },
          "area": { "title": "Area [m^2]", "exclusiveMinimum": 0.0, "type": "number" },
          "surfaceCentroid": {
            "title": "Centeroid [Vector3[m]]",
            "type": "array",
            "items": { "type": "number" }
          },
          "bodyFrameVector": {
            "title": "ID of Associated BodyFrameVector Block",
            "type": "integer",
            "description": "Relationship to a `BodyFrameVector` block. Reverse key: `BodyFrameVector.surfaces`."
          },
          "surfaceMaterial": {
            "title": "ID of Associated SurfaceMaterial Block",
            "type": "integer",
            "description": "Relationship to a `SurfaceMaterial` block. Reverse key: `SurfaceMaterial.surfaces`."
          }
        }
      },
      "TargetBG": {
        "title": "TargetBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                { "$ref": "#/components/schemas/SpaceTarget" },
                { "$ref": "#/components/schemas/GroundTarget" },
                { "$ref": "#/components/schemas/CelestialTarget" }
              ]
            },
            "default": {}
          }
        }
      },
      "TargetGroup": {
        "title": "TargetGroup",
        "required": ["name", "targetType", "conOps"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "targetAssociations": {
            "title": "IDs of Associated TargetGroupAssociation Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `TargetGroupAssociation` blocks. Reverse key: `TargetGroupAssociation.targetGroup`.",
            "default": []
          },
          "targetType": {
            "title": "Target Type",
            "allOf": [{ "$ref": "#/components/schemas/Types" }]
          },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.targetGroups`."
          },
          "targets": {
            "title": "IDs of Associated Target Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Target` blocks. Reverse key: `Target.targetGroups`.",
            "default": []
          },
          "targetVectors": {
            "title": "IDs of Associated TargetVector Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `TargetVector` blocks. Reverse key: `TargetVector.targetGroup`.",
            "default": []
          },
          "groupConditions_A": {
            "title": "IDs of Associated Condition Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Condition` blocks. Reverse key: `Condition.targetGroupA`.",
            "default": []
          },
          "groupPointingModes_A": {
            "title": "IDs of Associated PointingMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `PointingMode` blocks. Reverse key: `PointingMode.targetGroupA`.",
            "default": []
          },
          "groupPointingModes_B": {
            "title": "IDs of Associated PointingMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `PointingMode` blocks. Reverse key: `PointingMode.targetGroupB`.",
            "default": []
          }
        }
      },
      "TargetGroupAssociation": {
        "title": "TargetGroupAssociation",
        "required": ["priority", "targetGroup", "target"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "priority": {
            "title": "Priority",
            "minimum": 0.0,
            "type": "integer",
            "description": "Higher numbers are higher priority.  0 is default."
          },
          "targetGroup": {
            "title": "ID of Associated TargetGroup Block",
            "type": "integer",
            "description": "Relationship to a `TargetGroup` block. Reverse key: `TargetGroup.targetAssociations`."
          },
          "target": {
            "title": "ID of Associated Target Block",
            "type": "integer",
            "description": "Relationship to a `Target` block. Reverse key: `Target.targetGroupAssociations`."
          }
        }
      },
      "TargetGroupAssociationBG": {
        "title": "TargetGroupAssociationBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/TargetGroupAssociation" },
            "default": {}
          }
        }
      },
      "TargetGroupBG": {
        "title": "TargetGroupBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/TargetGroup" },
            "default": {}
          }
        }
      },
      "TargetGroupCreate": {
        "title": "TargetGroupCreate",
        "required": ["name", "targetType", "conOps"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "targetType": {
            "title": "Target Type",
            "allOf": [{ "$ref": "#/components/schemas/Types" }]
          },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. Reverse key: `ConOps.targetGroups`."
          }
        }
      },
      "TargetGroupUpdate": {
        "title": "TargetGroupUpdate",
        "required": ["name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "targetAssociations": {
            "title": "IDs of Associated TargetGroupAssociation Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `TargetGroupAssociation` blocks. Reverse key: `TargetGroupAssociation.targetGroup`.",
            "default": []
          }
        }
      },
      "TargetPointingDirections": {
        "title": "TargetPointingDirections",
        "enum": ["TARGET", "TARGET_GROUP"],
        "description": "An enumeration."
      },
      "TargetVector": {
        "title": "TargetVector",
        "required": ["name", "satellite", "targetPointingDirection"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "truth": { "title": "Truth", "type": "array", "items": { "type": "number" } },
          "estimate": { "title": "Estimate", "type": "array", "items": { "type": "number" } },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to a `Satellite` block. Reverse key: `Satellite.vectors`."
          },
          "pointingModes_A": {
            "title": "IDs of Associated PointingMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `PointingMode` blocks. Reverse key: `PointingMode.lockVector`.",
            "default": []
          },
          "pointingModes_B": {
            "title": "IDs of Associated PointingMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `PointingMode` blocks. Reverse key: `PointingMode.maxAlignVector`.",
            "default": []
          },
          "FOVConstraints": {
            "title": "IDs of Associated Vector Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Vector` blocks. Reverse key: `Vector.vector`.",
            "default": []
          },
          "directionSensors": {
            "title": "IDs of Associated DirectionSensor Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `DirectionSensor` blocks. Reverse key: `DirectionSensor.vector`.",
            "default": []
          },
          "vectorSensors": {
            "title": "IDs of Associated VectorSensor Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `VectorSensor` blocks. Reverse key: `VectorSensor.vector`.",
            "default": []
          },
          "targetPointingDirection": { "$ref": "#/components/schemas/TargetPointingDirections" },
          "target": {
            "title": "ID of Associated Target Block",
            "type": "integer",
            "description": "Relationship to zero or one `Target` blocks. Reverse key: `Target.targetVectors`."
          },
          "targetGroup": {
            "title": "ID of Associated TargetGroup Block",
            "type": "integer",
            "description": "Relationship to zero or one `TargetGroup` blocks. Reverse key: `TargetGroup.targetVectors`."
          }
        }
      },
      "TargetVectorCreate": {
        "title": "TargetVectorCreate",
        "required": ["name", "targetPointingDirection"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "targetPointingDirection": { "$ref": "#/components/schemas/TargetPointingDirections" },
          "target": {
            "title": "ID of Associated Target Block",
            "type": "integer",
            "description": "Relationship to zero or one `Target` blocks. Reverse key: `Target.targetVectors`."
          },
          "targetGroup": {
            "title": "ID of Associated TargetGroup Block",
            "type": "integer",
            "description": "Relationship to zero or one `TargetGroup` blocks. Reverse key: `TargetGroup.targetVectors`."
          }
        }
      },
      "TargetVectorUpdate": {
        "title": "TargetVectorUpdate",
        "required": ["name", "targetPointingDirection"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "targetPointingDirection": { "$ref": "#/components/schemas/TargetPointingDirections" },
          "target": {
            "title": "ID of Associated Target Block",
            "type": "integer",
            "description": "Relationship to zero or one `Target` blocks. Reverse key: `Target.targetVectors`."
          },
          "targetGroup": {
            "title": "ID of Associated TargetGroup Block",
            "type": "integer",
            "description": "Relationship to zero or one `TargetGroup` blocks. Reverse key: `TargetGroup.targetVectors`."
          }
        }
      },
      "TempControlLoad": {
        "title": "TempControlLoad",
        "required": ["name", "epsOutputType", "loadState"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "epsOutputType": {
            "title": "Power Supply Bus",
            "allOf": [{ "$ref": "#/components/schemas/EpsOutputTypes" }],
            "description": "`CORE_OUTPUT` if connected to the regulated/unregulated Power Processor bus.  `BUS_REGULATOR` if connected to a constant voltage `BusRegulator` output."
          },
          "busRegulator": {
            "title": "ID of Associated BusRegulator Block",
            "type": "integer",
            "description": "Relationship to zero or one `BusRegulator` blocks. Reverse key: `BusRegulator.loads`."
          },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to zero or one `Topology` blocks. Reverse key: `Topology.loads`."
          },
          "loadState": {
            "title": "ID of Associated LoadState Block",
            "type": "integer",
            "description": "Relationship to a `LoadState` block. Reverse key: `LoadState.loads`."
          }
        }
      },
      "TempControlLoadCreate": {
        "title": "TempControlLoadCreate",
        "required": ["name", "epsOutputType", "loadState"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "epsOutputType": {
            "title": "Power Supply Bus",
            "allOf": [{ "$ref": "#/components/schemas/EpsOutputTypes" }],
            "description": "`CORE_OUTPUT` if connected to the regulated/unregulated Power Processor bus.  `BUS_REGULATOR` if connected to a constant voltage `BusRegulator` output."
          },
          "busRegulator": {
            "title": "ID of Associated BusRegulator Block",
            "type": "integer",
            "description": "Relationship to zero or one `BusRegulator` blocks. Reverse key: `BusRegulator.loads`."
          },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to zero or one `Topology` blocks. Reverse key: `Topology.loads`."
          },
          "loadState": {
            "title": "ID of Associated LoadState Block",
            "type": "integer",
            "description": "Relationship to a `LoadState` block. Reverse key: `LoadState.loads`."
          }
        }
      },
      "TempControlLoadUpdate": {
        "title": "TempControlLoadUpdate",
        "required": ["name", "epsOutputType"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "epsOutputType": {
            "title": "Power Supply Bus",
            "allOf": [{ "$ref": "#/components/schemas/EpsOutputTypes" }],
            "description": "`CORE_OUTPUT` if connected to the regulated/unregulated Power Processor bus.  `BUS_REGULATOR` if connected to a constant voltage `BusRegulator` output."
          },
          "busRegulator": {
            "title": "ID of Associated BusRegulator Block",
            "type": "integer",
            "description": "Relationship to zero or one `BusRegulator` blocks. Reverse key: `BusRegulator.loads`."
          },
          "topology": {
            "title": "ID of Associated Topology Block",
            "type": "integer",
            "description": "Relationship to zero or one `Topology` blocks. Reverse key: `Topology.loads`."
          }
        }
      },
      "TempController": {
        "title": "TempController",
        "required": [
          "name",
          "subsystem",
          "onRegHeatFlowRate",
          "heatFlowRateRating",
          "controlledComponent"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": {
            "title": "Componenttype",
            "enum": ["GENERIC"],
            "type": "string",
            "default": "GENERIC"
          },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "onRegHeatFlowRate": {
            "title": "Onregheatflowrate",
            "exclusiveMinimum": 0.0,
            "type": "number"
          },
          "heatFlowRateRating": { "title": "Heatflowraterating", "type": "number" },
          "controlledComponent": {
            "title": "ID of Associated Component Block",
            "type": "integer",
            "description": "Relationship to a `Component` block. Reverse key: `Component.tempControllers`."
          },
          "regHeatFlowRate": { "title": "Regheatflowrate", "type": "number" },
          "tempControllerStates": {
            "title": "IDs of Associated TempControllerState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `TempControllerState` blocks. Reverse key: `TempControllerState.tempController`.",
            "default": []
          }
        }
      },
      "TempControllerBG": {
        "title": "TempControllerBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/TempController" },
            "default": {}
          }
        }
      },
      "TempControllerState": {
        "title": "TempControllerState",
        "required": ["name", "constantTemperature", "tempController"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "constantTemperature": { "title": "Constanttemperature", "type": "number" },
          "tempController": {
            "title": "ID of Associated TempController Block",
            "type": "integer",
            "description": "Relationship to a `TempController` block. Reverse key: `TempController.tempControllerStates`."
          },
          "operationalModes": {
            "title": "IDs of Associated OperationalMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `OperationalMode` blocks. Reverse key: `OperationalMode.tempControllerStates`.",
            "default": []
          },
          "active": { "title": "Active", "type": "boolean" }
        }
      },
      "TempControllerStateBG": {
        "title": "TempControllerStateBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/TempControllerState" },
            "default": {}
          }
        }
      },
      "TempControllerStateCreate": {
        "title": "TempControllerStateCreate",
        "required": ["name", "constantTemperature", "tempController"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "constantTemperature": { "title": "Constanttemperature", "type": "number" },
          "tempController": {
            "title": "ID of Associated TempController Block",
            "type": "integer",
            "description": "Relationship to a `TempController` block. Reverse key: `TempController.tempControllerStates`."
          },
          "operationalModes": {
            "title": "IDs of Associated OperationalMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `OperationalMode` blocks. Reverse key: `OperationalMode.tempControllerStates`.",
            "default": []
          }
        }
      },
      "TempControllerStateUpdate": {
        "title": "TempControllerStateUpdate",
        "required": ["name", "constantTemperature", "tempController"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "constantTemperature": { "title": "Constanttemperature", "type": "number" },
          "tempController": {
            "title": "ID of Associated TempController Block",
            "type": "integer",
            "description": "Relationship to a `TempController` block. Reverse key: `TempController.tempControllerStates`."
          },
          "operationalModes": {
            "title": "IDs of Associated OperationalMode Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `OperationalMode` blocks. Reverse key: `OperationalMode.tempControllerStates`.",
            "default": []
          }
        }
      },
      "TemplateRef": {
        "title": "TemplateRef",
        "required": ["ref"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "ref": { "title": "Ref", "type": "integer" },
          "agents": {
            "title": "IDs of Associated Agent Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Agent` blocks. Reverse key: `Agent.templateRef`.",
            "default": []
          }
        }
      },
      "TemplateRefBG": {
        "title": "TemplateRefBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/TemplateRef" },
            "default": {}
          }
        }
      },
      "ThermalInterface": {
        "title": "ThermalInterface",
        "required": ["name", "area", "sideA", "sideB", "material"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "area": { "title": "Area", "exclusiveMinimum": 0.0, "type": "number" },
          "sideA": { "$ref": "#/components/schemas/SideCategories" },
          "sideB": { "$ref": "#/components/schemas/SideCategories" },
          "material": {
            "title": "ID of Associated ThermalInterfaceMaterial Block",
            "type": "integer",
            "description": "Relationship to a `ThermalInterfaceMaterial` block. Reverse key: `ThermalInterfaceMaterial.thermalInterface`."
          },
          "componentA": {
            "title": "ID of Associated Component Block",
            "type": "integer",
            "description": "Relationship to zero or one `Component` blocks. Reverse key: `Component.thermal_interface_A`."
          },
          "componentB": {
            "title": "ID of Associated Component Block",
            "type": "integer",
            "description": "Relationship to zero or one `Component` blocks. Reverse key: `Component.thermal_interface_B`."
          },
          "surfaceA": {
            "title": "ID of Associated Surface Block",
            "type": "integer",
            "description": "Relationship to zero or one `Surface` blocks. Reverse key: `Surface.thermal_interface_A`."
          },
          "surfaceB": {
            "title": "ID of Associated Surface Block",
            "type": "integer",
            "description": "Relationship to zero or one `Surface` blocks. Reverse key: `Surface.thermal_interface_B`."
          },
          "coolerA": {
            "title": "ID of Associated Cooler Block",
            "type": "integer",
            "description": "Relationship to zero or one `Cooler` blocks. Reverse key: `Cooler.thermal_interface_A`."
          },
          "coolerB": {
            "title": "ID of Associated Cooler Block",
            "type": "integer",
            "description": "Relationship to zero or one `Cooler` blocks. Reverse key: `Cooler.thermal_interface_B`."
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.interfaces`."
          },
          "resistance": { "title": "Resistance", "type": "number" },
          "tempDelta": { "title": "Tempdelta", "type": "number" },
          "heatFlowRate": { "title": "Heatflowrate", "type": "number" },
          "hotTemp": { "title": "Hottemp", "type": "number" },
          "coldTemp": { "title": "Coldtemp", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" }
        }
      },
      "ThermalInterfaceBG": {
        "title": "ThermalInterfaceBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/ThermalInterface" },
            "default": {}
          }
        }
      },
      "ThermalInterfaceCreate": {
        "title": "ThermalInterfaceCreate",
        "required": ["name", "area", "sideA", "sideB", "material"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "area": { "title": "Area", "exclusiveMinimum": 0.0, "type": "number" },
          "sideA": { "$ref": "#/components/schemas/SideCategories" },
          "sideB": { "$ref": "#/components/schemas/SideCategories" },
          "material": {
            "title": "ID of Associated ThermalInterfaceMaterial Block",
            "type": "integer",
            "description": "Relationship to a `ThermalInterfaceMaterial` block. Reverse key: `ThermalInterfaceMaterial.thermalInterface`."
          },
          "componentA": {
            "title": "ID of Associated Component Block",
            "type": "integer",
            "description": "Relationship to zero or one `Component` blocks. Reverse key: `Component.thermal_interface_A`."
          },
          "componentB": {
            "title": "ID of Associated Component Block",
            "type": "integer",
            "description": "Relationship to zero or one `Component` blocks. Reverse key: `Component.thermal_interface_B`."
          },
          "surfaceA": {
            "title": "ID of Associated Surface Block",
            "type": "integer",
            "description": "Relationship to zero or one `Surface` blocks. Reverse key: `Surface.thermal_interface_A`."
          },
          "surfaceB": {
            "title": "ID of Associated Surface Block",
            "type": "integer",
            "description": "Relationship to zero or one `Surface` blocks. Reverse key: `Surface.thermal_interface_B`."
          },
          "coolerA": {
            "title": "ID of Associated Cooler Block",
            "type": "integer",
            "description": "Relationship to zero or one `Cooler` blocks. Reverse key: `Cooler.thermal_interface_A`."
          },
          "coolerB": {
            "title": "ID of Associated Cooler Block",
            "type": "integer",
            "description": "Relationship to zero or one `Cooler` blocks. Reverse key: `Cooler.thermal_interface_B`."
          }
        }
      },
      "ThermalInterfaceMaterial": {
        "title": "ThermalInterfaceMaterial",
        "required": ["resistivity", "thickness", "hotTempRating", "coldTempRating", "name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "resistivity": { "title": "Resistivity", "exclusiveMinimum": 0.0, "type": "number" },
          "thickness": { "title": "Thickness", "exclusiveMinimum": 0.0, "type": "number" },
          "hotTempRating": { "title": "Hottemprating", "type": "number" },
          "coldTempRating": { "title": "Coldtemprating", "type": "number" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "thermalInterface": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.material`.",
            "default": []
          }
        }
      },
      "ThermalInterfaceMaterialBG": {
        "title": "ThermalInterfaceMaterialBG",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "collection": { "$ref": "#/components/schemas/Collection" },
          "data": {
            "title": "Data",
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/ThermalInterfaceMaterial" },
            "default": {}
          }
        }
      },
      "ThermalInterfaceMaterialCreate": {
        "title": "ThermalInterfaceMaterialCreate",
        "required": ["resistivity", "thickness", "hotTempRating", "coldTempRating"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "resistivity": { "title": "Resistivity", "exclusiveMinimum": 0.0, "type": "number" },
          "thickness": { "title": "Thickness", "exclusiveMinimum": 0.0, "type": "number" },
          "hotTempRating": { "title": "Hottemprating", "type": "number" },
          "coldTempRating": { "title": "Coldtemprating", "type": "number" }
        }
      },
      "ThermalInterfaceMaterialUpdate": {
        "title": "ThermalInterfaceMaterialUpdate",
        "required": ["resistivity", "thickness", "hotTempRating", "coldTempRating"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "resistivity": { "title": "Resistivity", "exclusiveMinimum": 0.0, "type": "number" },
          "thickness": { "title": "Thickness", "exclusiveMinimum": 0.0, "type": "number" },
          "hotTempRating": { "title": "Hottemprating", "type": "number" },
          "coldTempRating": { "title": "Coldtemprating", "type": "number" }
        }
      },
      "ThermalInterfaceUpdate": {
        "title": "ThermalInterfaceUpdate",
        "required": ["name", "area", "sideA", "sideB", "material"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "area": { "title": "Area", "exclusiveMinimum": 0.0, "type": "number" },
          "sideA": { "$ref": "#/components/schemas/SideCategories" },
          "sideB": { "$ref": "#/components/schemas/SideCategories" },
          "material": {
            "title": "ID of Associated ThermalInterfaceMaterial Block",
            "type": "integer",
            "description": "Relationship to a `ThermalInterfaceMaterial` block. Reverse key: `ThermalInterfaceMaterial.thermalInterface`."
          },
          "componentA": {
            "title": "ID of Associated Component Block",
            "type": "integer",
            "description": "Relationship to zero or one `Component` blocks. Reverse key: `Component.thermal_interface_A`."
          },
          "componentB": {
            "title": "ID of Associated Component Block",
            "type": "integer",
            "description": "Relationship to zero or one `Component` blocks. Reverse key: `Component.thermal_interface_B`."
          },
          "surfaceA": {
            "title": "ID of Associated Surface Block",
            "type": "integer",
            "description": "Relationship to zero or one `Surface` blocks. Reverse key: `Surface.thermal_interface_A`."
          },
          "surfaceB": {
            "title": "ID of Associated Surface Block",
            "type": "integer",
            "description": "Relationship to zero or one `Surface` blocks. Reverse key: `Surface.thermal_interface_B`."
          },
          "coolerA": {
            "title": "ID of Associated Cooler Block",
            "type": "integer",
            "description": "Relationship to zero or one `Cooler` blocks. Reverse key: `Cooler.thermal_interface_A`."
          },
          "coolerB": {
            "title": "ID of Associated Cooler Block",
            "type": "integer",
            "description": "Relationship to zero or one `Cooler` blocks. Reverse key: `Cooler.thermal_interface_B`."
          }
        }
      },
      "Topology": {
        "title": "Topology",
        "required": ["name", "subsystem", "componentType", "topologyType", "battery"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": {
            "title": "Componenttype",
            "enum": ["POWER_PROCESSOR"],
            "type": "string"
          },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "topologyType": {
            "title": "Topology Type",
            "anyOf": [
              { "enum": [""], "type": "string" },
              { "$ref": "#/components/schemas/TopologyTypes" }
            ],
            "description": "This field may only be `''` initially.  It is required on first update."
          },
          "topologyParams": {
            "title": "Topology Definition Parameters",
            "anyOf": [
              { "$ref": "#/components/schemas/TopologyParamFRD" },
              { "$ref": "#/components/schemas/TopologyParamSCH" },
              { "$ref": "#/components/schemas/TopologyParamQRD" },
              { "$ref": "#/components/schemas/TopologyParamTCM" },
              { "$ref": "#/components/schemas/TopologyParamSCM" }
            ],
            "description": "This field may only be undefined initially.  It is required on first update."
          },
          "loads": {
            "title": "IDs of Associated Load Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Load` blocks. Reverse key: `Load.topology`.",
            "default": []
          },
          "battery": {
            "title": "ID of Associated Battery Block",
            "type": "integer",
            "description": "Relationship to a `Battery` block. Reverse key: `Battery.topology`."
          },
          "batteryCells": {
            "title": "IDs of Associated BatteryCell Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `BatteryCell` blocks. Reverse key: `BatteryCell.topology`.",
            "default": []
          },
          "busRegulators": {
            "title": "IDs of Associated BusRegulator Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `BusRegulator` blocks. Reverse key: `BusRegulator.topology`.",
            "default": []
          },
          "solarArrays": {
            "title": "IDs of Associated SolarArray Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarArray` blocks. Reverse key: `SolarArray.topology`.",
            "default": []
          },
          "solarCells": {
            "title": "IDs of Associated SolarCell Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarCell` blocks. Reverse key: `SolarCell.topology`.",
            "default": []
          }
        }
      },
      "TopologyParamFRD": {
        "title": "TopologyParamFRD",
        "required": [
          "bcrEfficiency",
          "outputPowerRating",
          "chargeDiodeDrop",
          "bdrEfficiency",
          "drivenControllerBusVoltage"
        ],
        "type": "object",
        "properties": {
          "bcrEfficiency": {
            "title": "Battery Charge Regulator (BCR) Efficiency",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "outputPowerRating": {
            "title": "Output Power Rating [W]",
            "minimum": 0.0,
            "type": "number"
          },
          "chargeDiodeDrop": { "title": "Charge Diode Drop [V]", "minimum": 0.0, "type": "number" },
          "bdrEfficiency": {
            "title": "Battery Discharge Regulator (BDR) Efficiency",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "drivenControllerBusVoltage": {
            "title": "Driven Controller Bus Voltage [V]",
            "minimum": 0.0,
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "TopologyParamQRD": {
        "title": "TopologyParamQRD",
        "required": [
          "bcrEfficiency",
          "outputPowerRating",
          "chargeDiodeDrop",
          "dischargeDiodeDrop",
          "chargeControllerBusVoltage"
        ],
        "type": "object",
        "properties": {
          "bcrEfficiency": {
            "title": "Battery Charge Regulator (BCR) Efficiency",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "outputPowerRating": {
            "title": "Output Power Rating [W]",
            "minimum": 0.0,
            "type": "number"
          },
          "chargeDiodeDrop": { "title": "Charge Diode Drop [V]", "minimum": 0.0, "type": "number" },
          "dischargeDiodeDrop": {
            "title": "Discharge Diode Drop [V]",
            "minimum": 0.0,
            "type": "number"
          },
          "chargeControllerBusVoltage": {
            "title": "Charge Controller Bus Voltage [V]",
            "minimum": 0.0,
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "TopologyParamSCH": {
        "title": "TopologyParamSCH",
        "required": ["bcrEfficiency", "outputPowerRating", "bypassBlockingDiodeDrop"],
        "type": "object",
        "properties": {
          "bcrEfficiency": {
            "title": "Battery Charge Regulator (BCR) Efficiency",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "outputPowerRating": {
            "title": "Output Power Rating [W]",
            "minimum": 0.0,
            "type": "number"
          },
          "bypassBlockingDiodeDrop": {
            "title": "Bypass Blocking Diode Drop [V]",
            "minimum": 0.0,
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "TopologyParamSCM": {
        "title": "TopologyParamSCM",
        "required": ["bcrEfficiency", "outputPowerRating"],
        "type": "object",
        "properties": {
          "bcrEfficiency": {
            "title": "Battery Charge Regulator (BCR) Efficiency",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "outputPowerRating": {
            "title": "Output Power Rating [W]",
            "minimum": 0.0,
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "TopologyParamTCM": {
        "title": "TopologyParamTCM",
        "required": [
          "bcrEfficiency",
          "outputPowerRating",
          "dischargeDiodeDrop",
          "chargeControllerBusVoltage",
          "pptEfficiency"
        ],
        "type": "object",
        "properties": {
          "bcrEfficiency": {
            "title": "Battery Charge Regulator (BCR) Efficiency",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          },
          "outputPowerRating": {
            "title": "Output Power Rating [W]",
            "minimum": 0.0,
            "type": "number"
          },
          "dischargeDiodeDrop": {
            "title": "Discharge Diode Drop [V]",
            "minimum": 0.0,
            "type": "number"
          },
          "chargeControllerBusVoltage": {
            "title": "Charge Controller Bus Voltage [V]",
            "minimum": 0.0,
            "type": "number"
          },
          "pptEfficiency": {
            "title": "Peak Power Tracking (PPT) Converter Efficiency",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "TopologyTypes": {
        "title": "TopologyTypes",
        "enum": [
          "SINGLE_CONV_MPPT",
          "TWO_CONV_MPPT",
          "QUASI_REG_DET",
          "FULLY_REG_DET",
          "SINGLE_CONV_HYBRID"
        ],
        "description": "An enumeration."
      },
      "TopologyUpdate": {
        "title": "TopologyUpdate",
        "required": ["name", "topologyType"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "topologyType": {
            "title": "Topology Type",
            "anyOf": [
              { "enum": [""], "type": "string" },
              { "$ref": "#/components/schemas/TopologyTypes" }
            ],
            "description": "This field may only be `''` initially.  It is required on first update."
          },
          "topologyParams": {
            "title": "Topology Definition Parameters",
            "anyOf": [
              { "$ref": "#/components/schemas/TopologyParamFRD" },
              { "$ref": "#/components/schemas/TopologyParamSCH" },
              { "$ref": "#/components/schemas/TopologyParamQRD" },
              { "$ref": "#/components/schemas/TopologyParamTCM" },
              { "$ref": "#/components/schemas/TopologyParamSCM" }
            ],
            "description": "This field may only be undefined initially.  It is required on first update."
          }
        }
      },
      "TriadAlgorithm": {
        "title": "TriadAlgorithm",
        "required": ["name", "rate", "attDetType"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "rate": { "title": "Update Rate [Hz]", "type": "number" },
          "attDetType": { "title": "Attdettype", "enum": ["TRIAD"], "type": "string" },
          "vectorSensors": {
            "title": "IDs of Associated Sensor Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Sensor` blocks. ",
            "default": []
          },
          "angularVelocitySensors": {
            "title": "IDs of Associated AngularVelocitySensor Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `AngularVelocitySensor` blocks. ",
            "default": []
          }
        }
      },
      "TwoConvMpptTopology": {
        "title": "TwoConvMpptTopology",
        "required": ["name", "subsystem", "componentType", "topologyType", "battery"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": {
            "title": "Componenttype",
            "enum": ["POWER_PROCESSOR"],
            "type": "string"
          },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "topologyType": { "title": "Topologytype", "enum": ["TWO_CONV_MPPT"], "type": "string" },
          "topologyParams": {
            "title": "Topology Definition Parameters",
            "anyOf": [
              { "$ref": "#/components/schemas/TopologyParamFRD" },
              { "$ref": "#/components/schemas/TopologyParamSCH" },
              { "$ref": "#/components/schemas/TopologyParamQRD" },
              { "$ref": "#/components/schemas/TopologyParamTCM" },
              { "$ref": "#/components/schemas/TopologyParamSCM" }
            ],
            "description": "This field may only be undefined initially.  It is required on first update."
          },
          "loads": {
            "title": "IDs of Associated Load Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `Load` blocks. Reverse key: `Load.topology`.",
            "default": []
          },
          "battery": {
            "title": "ID of Associated Battery Block",
            "type": "integer",
            "description": "Relationship to a `Battery` block. Reverse key: `Battery.topology`."
          },
          "batteryCells": {
            "title": "IDs of Associated BatteryCell Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `BatteryCell` blocks. Reverse key: `BatteryCell.topology`.",
            "default": []
          },
          "busRegulators": {
            "title": "IDs of Associated BusRegulator Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `BusRegulator` blocks. Reverse key: `BusRegulator.topology`.",
            "default": []
          },
          "solarArrays": {
            "title": "IDs of Associated SolarArray Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarArray` blocks. Reverse key: `SolarArray.topology`.",
            "default": []
          },
          "solarCells": {
            "title": "IDs of Associated SolarCell Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `SolarCell` blocks. Reverse key: `SolarCell.topology`.",
            "default": []
          }
        }
      },
      "Types": {
        "title": "Types",
        "enum": ["SPACE_TARGET", "CELESTIAL_TARGET", "GROUND_TARGET"],
        "description": "An enumeration."
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": ["loc", "msg", "type"],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] }
          },
          "msg": { "title": "Message", "type": "string" },
          "type": { "title": "Error Type", "type": "string" }
        }
      },
      "Vector": {
        "title": "Vector",
        "required": ["vector"],
        "type": "object",
        "properties": {
          "vector": { "title": "Vector", "type": "array", "items": { "type": "number" } }
        }
      },
      "VectorSensor": {
        "title": "VectorSensor",
        "required": ["name", "subsystem", "componentType", "oneSigmaPerAxisError", "vector"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "subsystem": {
            "title": "ID of Associated Subsystem Block",
            "type": "integer",
            "description": "Relationship to a `Subsystem` block. Reverse key: `Subsystem.components`."
          },
          "componentType": {
            "title": "Componenttype",
            "enum": ["VECTOR_SENSOR"],
            "type": "string"
          },
          "cotsTemplate": {
            "title": "COTS Template Name",
            "maxLength": 64,
            "type": "string",
            "description": "Read-only",
            "default": ""
          },
          "loadStates": {
            "title": "IDs of Associated LoadState Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `LoadState` blocks. Reverse key: `LoadState.component`.",
            "default": []
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to zero or one `Satellite` blocks. Reverse key: `Satellite.components`."
          },
          "thermal_interface_A": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentA`.",
            "default": []
          },
          "thermal_interface_B": {
            "title": "IDs of Associated ThermalInterface Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `ThermalInterface` blocks. Reverse key: `ThermalInterface.componentB`.",
            "default": []
          },
          "dissipations": {
            "title": "Dissipations",
            "type": "object",
            "additionalProperties": { "minimum": 0.0, "type": "number" }
          },
          "temperature": { "title": "Temperature", "type": "number" },
          "hotMargin": { "title": "Hotmargin", "type": "number" },
          "coldMargin": { "title": "Coldmargin", "type": "number" },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to zero or one `FieldOfView` blocks. Reverse key: `FieldOfView.sensor`."
          },
          "oneSigmaPerAxisError": { "title": "Onesigmaperaxiserror", "type": "number" },
          "vector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. Reverse key: `Vector.vectorSensors`."
          },
          "truth": { "title": "Truth", "type": "array", "items": { "type": "number" } },
          "measurement": { "title": "Measurement", "type": "array", "items": { "type": "number" } },
          "triadAlgorithms": {
            "title": "IDs of Associated TriadAlgorithm Blocks",
            "type": "array",
            "items": {},
            "description": "Relationship to one or more `TriadAlgorithm` blocks. Reverse key: `TriadAlgorithm.vectorSensors`.",
            "default": []
          }
        }
      },
      "VectorSensorCreate": {
        "title": "VectorSensorCreate",
        "required": ["name", "oneSigmaPerAxisError", "vector"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to zero or one `FieldOfView` blocks. Reverse key: `FieldOfView.sensor`."
          },
          "oneSigmaPerAxisError": { "title": "Onesigmaperaxiserror", "type": "number" },
          "vector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. Reverse key: `Vector.vectorSensors`."
          }
        }
      },
      "VectorSensorUpdate": {
        "title": "VectorSensorUpdate",
        "required": ["name", "oneSigmaPerAxisError", "vector"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer" },
          "partNumber": {
            "title": "Part Number",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "manufacturer": {
            "title": "Manufacturer",
            "maxLength": 32,
            "type": "string",
            "default": ""
          },
          "name": { "title": "Name", "maxLength": 32, "type": "string" },
          "hotTempRating": { "title": "Hottemprating", "type": "number", "default": 0 },
          "coldTempRating": { "title": "Coldtemprating", "type": "number", "default": 0 },
          "thermalCapacitance": {
            "title": "Thermalcapacitance",
            "minimum": 0.0,
            "type": "number",
            "default": 1
          },
          "fieldOfView": {
            "title": "ID of Associated FieldOfView Block",
            "type": "integer",
            "description": "Relationship to zero or one `FieldOfView` blocks. Reverse key: `FieldOfView.sensor`."
          },
          "oneSigmaPerAxisError": { "title": "Onesigmaperaxiserror", "type": "number" },
          "vector": {
            "title": "ID of Associated Vector Block",
            "type": "integer",
            "description": "Relationship to a `Vector` block. Reverse key: `Vector.vectorSensors`."
          }
        }
      },
      "VehicleTemplate": {
        "title": "VehicleTemplate",
        "required": ["latestPrimeId", "conOps", "missionOrbit", "satellite", "nextId"],
        "type": "object",
        "properties": {
          "latestPrimeId": { "title": "Latestprimeid", "type": "integer" },
          "blockToBlockGroupMap": {
            "title": "Blocktoblockgroupmap",
            "type": "object",
            "additionalProperties": { "type": "string" },
            "default": {}
          },
          "Algorithm": {
            "title": "Algorithm",
            "allOf": [{ "$ref": "#/components/schemas/AlgorithmBG" }],
            "default": {}
          },
          "Battery": {
            "title": "Battery",
            "allOf": [{ "$ref": "#/components/schemas/BatteryBG" }],
            "default": {}
          },
          "BatteryCell": {
            "title": "Batterycell",
            "allOf": [{ "$ref": "#/components/schemas/BatteryCellBG" }],
            "default": {}
          },
          "BodyFrameVector": {
            "title": "Bodyframevector",
            "allOf": [{ "$ref": "#/components/schemas/BodyFrameVectorBG" }],
            "default": {}
          },
          "BusRegulator": {
            "title": "Busregulator",
            "allOf": [{ "$ref": "#/components/schemas/BusRegulatorBG" }],
            "default": {}
          },
          "Component": {
            "title": "Component",
            "allOf": [{ "$ref": "#/components/schemas/ComponentBG" }],
            "default": {}
          },
          "ConOps": {
            "title": "Conops",
            "allOf": [{ "$ref": "#/components/schemas/ConOpsBG" }],
            "default": {}
          },
          "Condition": {
            "title": "Condition",
            "allOf": [{ "$ref": "#/components/schemas/ConditionBG" }],
            "default": {}
          },
          "FieldOfView": {
            "title": "Fieldofview",
            "allOf": [{ "$ref": "#/components/schemas/FieldOfViewBG" }],
            "default": {}
          },
          "FOVConstraint": {
            "title": "Fovconstraint",
            "allOf": [{ "$ref": "#/components/schemas/FOVConstraintBG" }],
            "default": {}
          },
          "Load": {
            "title": "Load",
            "allOf": [{ "$ref": "#/components/schemas/LoadBG" }],
            "default": {}
          },
          "LoadState": {
            "title": "Loadstate",
            "allOf": [{ "$ref": "#/components/schemas/LoadStateBG" }],
            "default": {}
          },
          "LocalVector": {
            "title": "Localvector",
            "allOf": [{ "$ref": "#/components/schemas/LocalVectorBG" }],
            "default": {}
          },
          "CelestialVector": {
            "title": "Celestialvector",
            "allOf": [{ "$ref": "#/components/schemas/CelestialVectorBG" }],
            "default": {}
          },
          "OperationalMode": {
            "title": "Operationalmode",
            "allOf": [{ "$ref": "#/components/schemas/OperationalModeBG" }],
            "default": {}
          },
          "Orbit": {
            "title": "Orbit",
            "allOf": [{ "$ref": "#/components/schemas/OrbitBG" }],
            "default": {}
          },
          "PointingMode": {
            "title": "Pointingmode",
            "allOf": [{ "$ref": "#/components/schemas/PointingModeBG" }],
            "default": {}
          },
          "Satellite": {
            "title": "Satellite",
            "allOf": [{ "$ref": "#/components/schemas/SatelliteBG" }],
            "default": {}
          },
          "SolarArray": {
            "title": "Solararray",
            "allOf": [{ "$ref": "#/components/schemas/SolarArrayBG" }],
            "default": {}
          },
          "SolarCell": {
            "title": "Solarcell",
            "allOf": [{ "$ref": "#/components/schemas/SolarCellBG" }],
            "default": {}
          },
          "Subsystem": {
            "title": "Subsystem",
            "allOf": [{ "$ref": "#/components/schemas/SubsystemBG" }],
            "default": {}
          },
          "Surface": {
            "title": "Surface",
            "allOf": [{ "$ref": "#/components/schemas/SurfaceBG" }],
            "default": {}
          },
          "SurfaceMaterial": {
            "title": "Surfacematerial",
            "allOf": [{ "$ref": "#/components/schemas/SurfaceMaterialBG" }],
            "default": {}
          },
          "TargetGroupAssociation": {
            "title": "Targetgroupassociation",
            "allOf": [{ "$ref": "#/components/schemas/TargetGroupAssociationBG" }],
            "default": {}
          },
          "TargetGroup": {
            "title": "Targetgroup",
            "allOf": [{ "$ref": "#/components/schemas/TargetGroupBG" }],
            "default": {}
          },
          "Target": {
            "title": "Target",
            "allOf": [{ "$ref": "#/components/schemas/TargetBG" }],
            "default": {}
          },
          "TempController": {
            "title": "Tempcontroller",
            "allOf": [{ "$ref": "#/components/schemas/TempControllerBG" }],
            "default": {}
          },
          "TempControllerState": {
            "title": "Tempcontrollerstate",
            "allOf": [{ "$ref": "#/components/schemas/TempControllerStateBG" }],
            "default": {}
          },
          "ThermalInterface": {
            "title": "Thermalinterface",
            "allOf": [{ "$ref": "#/components/schemas/ThermalInterfaceBG" }],
            "default": {}
          },
          "ThermalInterfaceMaterial": {
            "title": "Thermalinterfacematerial",
            "allOf": [{ "$ref": "#/components/schemas/ThermalInterfaceMaterialBG" }],
            "default": {}
          },
          "conOps": {
            "title": "ID of Associated ConOps Block",
            "type": "integer",
            "description": "Relationship to a `ConOps` block. "
          },
          "missionOrbit": {
            "title": "ID of Associated Orbit Block",
            "type": "integer",
            "description": "Relationship to a `Orbit` block. "
          },
          "satellite": {
            "title": "ID of Associated Satellite Block",
            "type": "integer",
            "description": "Relationship to a `Satellite` block. "
          },
          "nextId": {
            "title": "Nextid",
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
            "items": [{ "type": "integer" }, { "type": "integer" }]
          },
          "position": { "title": "Position" },
          "velocity": { "title": "Velocity" },
          "positionSolution": { "title": "Positionsolution" },
          "positionCovariance": { "title": "Positioncovariance" },
          "velocitySolution": { "title": "Velocitysolution" },
          "velocityCovariance": { "title": "Velocitycovariance" }
        }
      }
    }
  },
  "x-tagGroups": [
    { "name": "Repositories", "tags": ["Branches"] },
    { "name": "Simulation", "tags": ["Jobs"] },
    { "name": "Data", "tags": [] },
    {
      "name": "Blocks",
      "tags": [
        "Sensor",
        "Load",
        "Field of View",
        "Condition",
        "Target Group",
        "Operational Mode",
        "Bus Regulator",
        "Surface",
        "Conops",
        "Load State",
        "Subsystem",
        "Body Frame Vector",
        "Target",
        "Actuator",
        "Battery Cell",
        "Component",
        "Battery",
        "Solar Array",
        "Thermal Interface Material",
        "Field of View Constraint",
        "Satellite",
        "Algorithm",
        "Thermal Interface",
        "Temperature Controller",
        "Temperature Controller State",
        "Vector",
        "Solar Cell",
        "Pointing Mode",
        "Orbit",
        "Surface Material"
      ]
    }
  ]
}
